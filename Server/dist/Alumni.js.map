{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/api.js","webpack:///./src/api/administracija.js","webpack:///./src/api/ankete.js","webpack:///./src/api/forum.js","webpack:///./src/api/obavijesti.js","webpack:///./src/api/pretplate.js","webpack:///./src/api/profile.js","webpack:///./src/api/resursi.js","webpack:///./src/config/appConfig.js","webpack:///./src/db.js","webpack:///./src/error.handler.js","webpack:///./src/jwt/jwt.js","webpack:///./src/jwt/security.js","webpack:///./src/kripto.js","webpack:///./src/mail/emails/sendAnketaLinkMail.js","webpack:///./src/mail/emails/sendObavijestLinkMail.js","webpack:///./src/mail/emails/sendPassResetMail.js","webpack:///./src/mail/emails/sendRegistrationMail.js","webpack:///./src/mail/i18n/en.js","webpack:///./src/mail/i18n/hr.js","webpack:///./src/mail/mail.js","webpack:///./src/mail/mailService.js","webpack:///./src/server.js","webpack:///./src/services/ankete.service.js","webpack:///./src/services/app.service.js","webpack:///./src/services/google.oauth2.service.js","webpack:///./src/services/profile.service.js","webpack:///./src/tools.js","webpack:///./src/winston.js","webpack:///external \"activedirectory2\"","webpack:///external \"app-root-path\"","webpack:///external \"axios\"","webpack:///external \"body-parser\"","webpack:///external \"crypto\"","webpack:///external \"express\"","webpack:///external \"express-jwt\"","webpack:///external \"formidable\"","webpack:///external \"fs\"","webpack:///external \"fs-extra\"","webpack:///external \"googleapis\"","webpack:///external \"handlebars\"","webpack:///external \"helmet\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"morgan\"","webpack:///external \"nodemailer\"","webpack:///external \"path\"","webpack:///external \"process\"","webpack:///external \"request\"","webpack:///external \"rxjs\"","webpack:///external \"tedious\"","webpack:///external \"tedious-connection-pool\"","webpack:///external \"uuidv4\"","webpack:///external \"winston\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","express","router","Router","req","res","send","message","TYPES","db","simpleDbResolve","handleRequestUser","async","conn","createConnection","locals","currDatabase","request","createRequest","execStoredProcFromNode","output","outputParams","result","put","user","addParameter","Int","body","PkUsera","StatusKorisnika","NVarChar","ImePrezimeUsera","RowVersion","PkGrupa","JSON","stringify","Claims","PkVrstaClanstva","query","administracijaRouter","exists","constructConnection","makeObservableConnection","makeObservableConnectionWithOutput","groupFlatProperies","flatten","decryptIfEncrypted","stringToSentence","hasClaim","forkJoin","from","first","mergeMap","combineLatest","take","concat","last","of","sendAnketaLinkMail","tryDecryptOrReturnInput","insertPredlozakWithOutput","updatePredlozakWithOutput","insertPitanjePredlozak","groupStats","fetchAnketaStatistika","fetchAnketaStatistikaPitanja","PkPredlozak","skip","PkAnketa","IsPublic","status","map","fetchTipoviPitanja","predlozak","pitanja","tipoviPitanja","connections$","proc","Promise","resolve","obs","subscribe","next","length","connectionsOdgovori$","PkPitanje","obsOdg","odgovoriMap","trimAndConvertInt","Number","trim","PitanjeRedoslijed","odgovori","find","OdgovorRedoslijed","findRelevantQuestion","error","err","complete","setTimeout","unsubscribe","PkUser","fetchAnketaUser","pipe","anketaWithUser","isSolved","UserPristupioAnketiDaNe","eligible","params","statsAnketa","statsPitanja","groupedStatsPitanja","anketaStats","pitanjaStats","post","modul","claim","metadata","pitanje","questionsInserted","anketa","insertAnswerToQuestion","PkAnketaUserPitanje","Odgovor","PkOdgovor","OdgovorTekst","addOutputParameter","setQuestionStatistic","mapQuestionToSolvedAnketa","PkAnketaUser","UserOdgovorioNaPitanjeDaNe","Array","isArray","PkStatistikaAnketaUserPitanjeOdgovor","setStatisticAnketa","AnketaAnonimnaDaNe","setAnketaIsSolved","q","swap","current","target","PkPitanjeFrom","PkPitanjeTo","applyChanges","PitanjeTekst","PkPitanjeTip","PitanjeAktivnoDaNe","PitanjeObaveznoDaNe","updatePitanjeMeta","purgeAnswer","odgovor","index","insertAnswer","insertPitanje","PkPredlozakPitanje","AnketaOtvorenaDo","AnketaOtvorenaOd","Clanstva","AnketaNaziv","Date","vidljivoClanovi","join","convertToAnketa","fetchUsersForEmailSend","clanstva","sendEmails","u","lang","language","users","mapUsersToAnketa","onSend","IsActive","DateTime","manageAnketa","done","delete","deleteAnketa","anketeRouter","constructDirDepth","groupDataByKeySync","formidable","fs","crypt","uuid","createDatotekaInsertRequest","createDatotekaRelacijaRequest","executeSqlReqAsPromise","PkKategorija","PkObjava","groupId","PkObjavaOccurence","keys","forEach","k","includes","split","newKey","assign","[object Object]","pkGroup","key","reduce","prev","curr","PkKomentar","Naziv","Opis","ParentPk","PublicDaNe","Sadrzaj","PkUseraUnos","Dubina","Naslov","form","IncomingForm","tempPath","uploadDir","keepExtensions","parse","fields","CoverImage","file","PkOsobniPodaciPkUsera","id","savePath","dbSavePathRoot","dbSavePathcoverImage","dbSavePathAttachment","renameSync","path","removeSync","uploadFile","dbPath","filename","size","type","hash","lastModifiedDate","PkDatoteka","PkUseraPromjena","UserPromjena","UserUnos","destination","encoding","mimetype","originalname","PkDatotekaCoverImage","insertedPkCover","PkForumObjava","PkForumObjavaKomentar","multiples","files","prilogDummyPk","parent","dubina","reject","insertComment","encryptString","prilozi","NazivDatotekaMeta","OpisDatotekaMeta","filter","global","appConfig","ukljuciConsoleLog","ukljuciStackTrace","console","trace","forumRouter","sendObavijestLinkMail","PkObavijest","search","PkObavijestKategorija","Status","CoverImagePath","Html","DatumObjave","DatumIskljucenjaObavijest","UserZadnjePromjene","Tags","DatumUnosa","readdirSync","unlinkSync","rmdirSync","NazivKategorije","AktivnaDaNe","dbSavePath","segment","pk","json","success","PkPretplate","Modul","Segment","toUpperCase","Pk","DatumZadnjeProvjere","pretplateRouter","devLogger","createUpsertOsobniPodaciRequest","fetchDatotekaInfo","deletePrilog","checkFileExists","removeDiacritics","grouped","acc","LDAPLoginName","PrivatnostPodataka","AvatarPath","VrstaClanstvaNaziv","Email","ImeUsera","PrezimeUsera","LoginName","UserAktivanDaNe","Spol","DatumRodenja","OIB","JMBAG","Mobitel","PkDrzava","Grad","Adresa","IDDrzaveNN","NazivDrzave","rest","osobniPodaci","profile","PkOsobniPodaciVrsta","PkOsobniPodaciObrazovanjeRadnoIskustvo","PkOsobniPodaciKompetencijaNapredovanje","handleObrazovanjeIliIskustvo","PeriodDo","PeriodOd","StupanjObrazovanjaIliZanimanje","UstanovaIMjesto","OsobniPodaciVrstaNaziv","handleKompetencije","KompetencijaIliNapredovanje","filePath","directoryParams","uploadPath","existsSync","sendFile","PkResursObjava","datotekaInfo","item","Datoteka","Relacija","mapped","Akcija","Podaci","PkUseraPristupio","modulName","PkResursKategorija","PkResursKomentar","PkResursObjavaKomentar","insertObjava","resursiRouter","appRootPath","encryptionConfig","enkripcijaDaNe","encryptColumns","extAppConfig","readFileSync","toString","customAppConfig","greska","ConnectionPool","config","server","databaseParams","productionDatabaseServer","userName","decryptString","productionUserName","password","productionPassword","options","encrypt","database","productionDatabaseName","instanceName","productionDatabaseServerInstanceName","trustServerCertificate","authentication","config4Test","testDatabaseServer","testUserName","testPassword","testDatabaseName","testDatabaseServerInstanceName","poolConfig","min","max","log","acquireTimeout","pool","pool4Test","on","drain","connection","systemLogger","level","createPool","Connection","connect","Request","rowCount","finished","headersSent","close","createRequestPool","release","execStoredProc","defaultContent","callback","dbResultObj","this","empty","columns","rowObject","column","colName","push","more","returnStatus","rows","write","encryptColumnsToClient","data","jsonKeys","dataObj","jsonKey","parsirajJSON","end","parameterName","temp","callProcedure","execStoredProcNoJSONLocalResults","dbRequest","resultData","resultStatus","createTransactionRequest","apiLogger","beginTransaction","commitTransaction","rollbackTransaction","execStoredProcInTransaction","state","info","number","process","handleWithLog","reason","promise","exceptionType","useGlobalAppHandlers","args","jwt","expressJwt","kripto","jwtService","init","jwtConfig","decryptConfig","decryptKeys","prop","eachRecursive","acceptableSecrets","obj","fn","loginJwt","payload","sign","jwtSecret","expiresIn","algorithm","signJwt","secret","extractJwt","authHeader","isValidJWTToken","token","verify","algorithms","decodeToken","decode","verifyJwtAndReturnAuthData","headers","authorization","findValidSecret","tryValidateToken","undefined","acceptableSecret","jwtMiddleware","unless","ActiveDirectory","axios","default","sendRegistrationMail","sendPassResetEmail","fetchUserLogin","dbUser","adminUser","IsAdmin","fetchUserByPk","findUserByUUID","UUID","setUserAccountActivityStatus","dbResult","syncWithEduplan","API_URL","eduplanSync","syncEduplanPayload","eduplanUser","meta","nastavnik","student","dataFeed","PkNastavnikSuradnik","toLowerCase","startsWith","Ime","Prezime","DatumRodjenja","Email1","Email2","NazivGrada","PostanskiBroj","PostanskiBrojPA","AdresaKucna","BrojMobitela","login","handleLoginPermit","rejectLogin","checkKorisnikStatusCanLogin","registerInWithLDAP","Lozinka","client","url","ldap","ActiveDirectoryApi","username","baseDN","authenticate","auth","findUser","sn","givenName","userPrincipalName","sAMAccountName","insertedUser","insertUser","ObaveznaIzmjenaLozinkeDaNe","signInWithLDAP","credential","ldapDomena","userLogin","decryptAdminPassword","aaiLogin","hrEduPersonUniqueID","hrEduPersonOIB","findOsobniPodaciForUser","finishAAIUser","needsUpdate","param","updateOsobniPodaci","userMeta","osobniPodaciPayload","syncedUser","registerMeta","sendMail","extraParams","handleLdapUsername","UserClaims","defaultUserClaims","upsertOsobniPodaciReq","upsertConn","endsWith","then","catch","PkApplicationUserGroup","KorisnikPkUsera","UserSePridruzujeDaNe","User","account","onlyAvatar","resetUserPassword","captchaSecretKey","response","captchaToken","httpResponse","Bit","AktivanDaNe","NovaLozinka","StaraLozinka","used","securityRouter","crypto","encObj","cfgSecret","iv","slice","Buffer","cfgKeyDecrypt","inputString","decipher","createDecipheriv","update","final","cfgKeyEncrypt","cryptString","cipher","createCipheriv","dataCryptoAlgorithm","codes","delta","dataSecret","alpha","beta","encrypted","decrypted","dekriptirajPk","kolone","element","ResultObjArray","vratiErr","propertyArray","enkriptirano","removeSaltFromAdminPassword","date","y","getUTCMonth","getUTCDate","getUTCFullYear","keyPayload","indexSplit","substring","addSaltToAdminPassword","pass","charset","match","text","Math","floor","random","getRandomText","str","generateAdminPassword","mailInit","constructEmailOptions","translate","anketaLink","mailConfig","emails","mailTransport","dest","to","subject","templateParams","ANKETA_LINK","ANKETA_LINK_HEADER","POSTOVANI","ime","prezime","ANKETA_LINK_TEXT_0","link","ANKETA_BUTTON_LABEL","ORG_NEED_HELP","ACC_CONFIRM_BACKUP_LINK","organizationContactLink","incomingMailParams","staticUrl","ORGANIZATION","ADDRESS","appLink","templateUrl","template","attachments","obavijestLink","OBAVIJEST_LINK","OBAVIJEST_LINK_HEADER","OBAVIJEST_LINK_TEXT_0","OBAVIJEST_BUTTON_LABEL","passReset","RESET_PASSWORD","RESET_PASSWORD_HEADER","RESET_PASSWORD_TEXT_0","RESET_PASSWORD_BTN_LABEL","RESET_PASSWORD_BACKUP_LINK","accConfirm","CONFIRM_ACCOUNT","CONFIRM_ACCOUNT_HEADER","CONFIRM_ACCOUNT_TEXT_0","ACC_CONFIRM_BTN_LABEL","PASS_CHANGE_BTN_LABEL","nodemailer","Handlebars","templateText","hr","en","transportOptions","mailUser","mailPass","mailServiceDaNe","service","mailService","host","mailHost","port","mailPort","secure","tls","rejectUnauthorized","createTransport","source","compile","html","bodyParser","helmet","morgan","app","isAdmin","winston","loggers","use","header","limit","urlencoded","extended","appLogParams","apiCallLog","method","stream","curr_db","mainParams","checkAuthHeader","static","nodeSrv","Error","listen","applicationPort","PredlozakNaziv","PredlozakNaslov","PredlozakOpis","ProglasenoAnketomDaNe","IzbrisanDaNe","UredivanjeDaNe","PkUserUnos","DatumUnos","gs","Odgovori","ONE_SECOND","handleJWT","base64","replace","jsonPayload","decodeURIComponent","a","charCodeAt","errMessage","dbResolveMiddleware","dbType","swapType","httpOrHttps","timeout","pingDatabase","pathParts","rootDir","dir","targetPath","mkdirSync","x","valuesToGroup","groupByProperties","properties","some","group","shouldAdd","every","input","Console","createWriteStream","flat","unflat","iterator","forEachOwnProperty","currentNode","currentProperty","test","procName","dbName","dbContext","array","apply","google","googleCfg","oauth","oauth2Client","OAuth2","GOOGLE_CLIENT_ID","GOOGLE_CLIENT_SECRET","redirectUrl","getGoogleUser","code","tokens","getToken","access_token","Authorization","id_token","generateAuthUrl","access_type","prompt","scope","cleanUpFileName","defaultCharactersRemovalMap","base","letters","deleteDiacritic","defaultDiacriticsRemovalMap","checkFolderExists","statSync","e","pripremiFoldere","mkdir","uploadPathTest","format","combine","timestamp","label","printf","myFormat","add","transports","File","maxsize","maxFiles","require"],"mappings":"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","file":"Alumni.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"C:\\\\Users\\\\denis.stajduhar\\\\Desktop\\\\LAMA\\\\_Alumni\\\\AlumniNode\\\\dist\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/server.js\");\n","\r\nvar express = require('express'),\r\n    request = require('request'),\r\n    crypt = require('./kripto.js'),\r\n    router = express.Router(),\r\n    db = require('./db.js'),\r\n    jwt = require('./jwt/jwt'),\r\n    fs = require('fs');\r\n\r\n\r\nrouter.get('/test', function (req, res) {\r\n    res.send({ \"message\": \"OK\"});\r\n});\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\nconst { TYPES } = require('tedious');\r\nconst db = require('../db.js');\r\nconst { simpleDbResolve, handleRequestUser } = require('../services/app.service');\r\n\r\n//#region GET DATA\r\n//Api vraća sve usere s pripadajućim podatcima potrebnim za administraciju, kao claimovi, kojoj grupi pripada i vrsta clanstva\r\nrouter.get('/users', async function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Administracija.spApplicationUsers_Select', conn, res);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n//#endregion\r\n\r\n//#region UPDATE DATA\r\nrouter.put('/statusKorisnika', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Administracija.spStatusKorisnika_Update', conn, res);\r\n\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('StatusKorisnika', TYPES.Int, req.body.StatusKorisnika);\r\n\trequest.addParameter('UserPromjena', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\trequest.addParameter('PkUserPromjena', TYPES.Int, user.PkUsera);\r\n\trequest.addParameter('RowVersion', TYPES.NVarChar, req.body.RowVersion);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.put('/userApplicationGroup', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Administracija.spSetUserGroup', conn, res);\r\n\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('PkGrupa', TYPES.Int, req.body.PkGrupa);\r\n\trequest.addParameter('UserUnos', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\trequest.addParameter('PkUseraUnos', TYPES.Int, user.PkUsera);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.put('/userClaims', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Administracija.spUserClaims_Update', conn, res);\r\n\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('Claims', TYPES.NVarChar, JSON.stringify(req.body.Claims));\r\n\trequest.addParameter('PkUserPromjena', TYPES.Int, user.PkUsera);\r\n\trequest.addParameter('UserPromjena', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\trequest.addParameter('RowVersion', TYPES.NVarChar, req.body.RowVersion);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.put('/userVrstaClanstva', async function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Administracija.spVrstaClanstva_Update', conn, res);\r\n\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('PkVrstaClanstva', TYPES.Int, req.body.PkVrstaClanstva);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n//#endregion\r\n\r\nrouter.get('/LogOsobniPodaci', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Logs.spLogOsobniPodaci_Select', conn, res);\r\n\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.query.PkUsera);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nmodule.exports = { administracijaRouter: router };\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst { TYPES } = require('tedious');\r\nconst db = require('../db.js');\r\nconst { simpleDbResolve, handleRequestUser, exists, constructConnection, makeObservableConnection, makeObservableConnectionWithOutput, groupFlatProperies, flatten, decryptIfEncrypted, stringToSentence, hasClaim } = require('../services/app.service');\r\nconst { forkJoin, from, first, mergeMap, combineLatest, take, concat, last, of } = require('rxjs');\r\nconst { sendAnketaLinkMail } = require('../mail/mail.js');\r\nconst { tryDecryptOrReturnInput } = require('../kripto.js');\r\nconst { insertPredlozakWithOutput, updatePredlozakWithOutput, insertPitanjePredlozak, groupStats, fetchAnketaStatistika, fetchAnketaStatistikaPitanja } = require('../services/ankete.service.js');\r\n\r\nconst modulName = 'Ankete';\r\n\r\n//#region  GET\r\n\r\nrouter.get('/predlosci', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Ankete.spPredlozak_select', conn, res);\r\n\texists(req.query.PkPredlozak) && request.addParameter('PkPredlozak', TYPES.Int, req.query.PkPredlozak);\r\n\texists(req.query.PkUsera) && request.addParameter('PkUsera', TYPES.Int, req.query.PkUsera);\r\n\texists(req.query.skip) && request.addParameter('skip', TYPES.Int, req.query.skip);\r\n\texists(req.query.take) && request.addParameter('take', TYPES.Int, req.query.take);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/ankete', async function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Ankete.spAnketa_select', conn, res);\r\n\texists(req.query.PkAnketa) && request.addParameter('PkAnketa', TYPES.Int, req.query.PkAnketa);\r\n\texists(req.query.PkUsera) && request.addParameter('PkUsera', TYPES.Int, req.query.PkUsera);\r\n\texists(req.query.skip) && request.addParameter('skip', TYPES.Int, req.query.skip);\r\n\texists(req.query.take) && request.addParameter('take', TYPES.Int, req.query.take);\r\n\texists(req.query.IsPublic) && request.addParameter('IsPublic', TYPES.Int, +req.query.IsPublic);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\treturn res.status(200).send(result.map((r) => groupFlatProperies(r)));\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t});\r\n});\r\n\r\nrouter.get('/predlozak/templating', function (req, res) {\r\n\tconst { PkPredlozak } = req.query;\r\n\r\n\tconst fetchTipoviPitanja = ({ predlozak = null, pitanja = null }) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('AP.spPitanjeTip_select', conn, res);\r\n\t\treturn db.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tres.status(200).send({\r\n\t\t\t\t\tpredlozak: predlozak,\r\n\t\t\t\t\tpitanja: pitanja,\r\n\t\t\t\t\ttipoviPitanja: result\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// ovo znaci da je blank slate\r\n\tif (!exists(PkPredlozak)) {\r\n\t\treturn fetchTipoviPitanja({});\r\n\t}\r\n\r\n\tconst connections$ = ['Ankete.spPredlozak_select', 'Ankete.spPitanjaZaPredlozak_select'].map((proc) => {\r\n\t\tconst { request, conn } = constructConnection(proc, res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\t\treturn from(\r\n\t\t\tnew Promise((resolve) => {\r\n\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresolve([]);\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t);\r\n\t});\r\n\r\n\tconst obs = forkJoin(connections$).subscribe({\r\n\t\tnext: ([[predlozak], pitanja]) => {\r\n\t\t\tif (!predlozak) {\r\n\t\t\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t\tif (!pitanja.length) {\r\n\t\t\t\treturn fetchTipoviPitanja({\r\n\t\t\t\t\tpredlozak,\r\n\t\t\t\t\tpitanja: []\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tconst connectionsOdgovori$ = pitanja.map((p) => {\r\n\t\t\t\tconst { PkPitanje } = p;\r\n\t\t\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\t\t\tconst request = db.createRequest('Ankete.spOdgovorZaPitanje_select', conn, res);\r\n\t\t\t\trequest.addParameter('PkPitanje', TYPES.Int, PkPitanje);\r\n\r\n\t\t\t\treturn from(\r\n\t\t\t\t\tnew Promise((resolve) => {\r\n\t\t\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tresolve([]);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t\tconst obsOdg = forkJoin(connectionsOdgovori$).subscribe({\r\n\t\t\t\tnext: (odgovoriMap) => {\r\n\t\t\t\t\tconst trimAndConvertInt = (value) => Number(value.trim());\r\n\r\n\t\t\t\t\tconst findRelevantQuestion = (odgovoriMap, PkPitanje) => {\r\n\t\t\t\t\t\tfor (const odgovori of odgovoriMap) {\r\n\t\t\t\t\t\t\tconst odgovoriZaPitanje = odgovori.find((i) => i.PkPitanje === PkPitanje);\r\n\t\t\t\t\t\t\tif (odgovoriZaPitanje) {\r\n\t\t\t\t\t\t\t\treturn odgovori.map((o) => ({ ...o, ...{ OdgovorRedoslijed: trimAndConvertInt(o.OdgovorRedoslijed) } }));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn fetchTipoviPitanja({\r\n\t\t\t\t\t\tpredlozak,\r\n\t\t\t\t\t\tpitanja: pitanja.map((p) => ({ ...p, ...{ PitanjeRedoslijed: trimAndConvertInt(p.PitanjeRedoslijed) }, odgovori: findRelevantQuestion(odgovoriMap, p.PkPitanje) }))\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\terror: (err) => {\r\n\t\t\t\t\tres.status(500).send({ ...err, message: 'STD:INVALID_REQUEST' });\r\n\t\t\t\t},\r\n\t\t\t\tcomplete: () => {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tobsOdg.unsubscribe();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\terror: (err) => {\r\n\t\t\tres.status(500).send({ ...err, message: 'STD:INVALID_REQUEST' });\r\n\t\t},\r\n\t\tcomplete: () => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tobs.unsubscribe();\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n});\r\n\r\nrouter.get('/anketa/solved/check', async (req, res) => {\r\n\tconst user = await handleRequestUser(req, res);\r\n\tconst { PkAnketa } = req.query;\r\n\tconst fetchAnketaUser = ({ PkAnketa, PkUser }) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spAnketaUser_select', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\trequest.addParameter('PkUser', TYPES.Int, PkUser);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\treturn fetchAnketaUser({ PkAnketa, PkUser: user.PkUsera })\r\n\t\t.pipe(first())\r\n\t\t.subscribe({\r\n\t\t\tnext: ([anketaWithUser]) => {\r\n\t\t\t\tif (anketaWithUser) {\r\n\t\t\t\t\tres.status(200).send({ isSolved: !!anketaWithUser.UserPristupioAnketiDaNe, eligible: true });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres.status(200).send({ isSolved: false, eligible: false });\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\terror: (err) => {\r\n\t\t\t\tres.status(200).send(err);\r\n\t\t\t}\r\n\t\t});\r\n});\r\n\r\nrouter.get('/anketa/statistika', async function (req, res) {\r\n\tconst { PkAnketa, PkPredlozak } = req.query;\r\n\tconst params = {\r\n\t\t...(PkAnketa && { PkAnketa }),\r\n\t\t...(PkPredlozak && { PkPredlozak })\r\n\t};\r\n\tforkJoin([fetchAnketaStatistika({ ...params, res, db }), fetchAnketaStatistikaPitanja({ ...params, res, db })])\r\n\t\t.pipe(first())\r\n\t\t.subscribe(([[statsAnketa], statsPitanja]) => {\r\n\t\t\tconst groupedStatsPitanja = groupStats(statsPitanja);\r\n\t\t\tres.send({\r\n\t\t\t\tanketaStats: statsAnketa,\r\n\t\t\t\tpitanjaStats: groupedStatsPitanja\r\n\t\t\t});\r\n\t\t});\r\n});\r\n\r\n//#endregion  GET\r\n\r\n//#region POST\r\nrouter.post('/predlozak/copy', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Predlozak' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n\tconst user = await handleRequestUser(req, res);\r\n\tconst { predlozak: metadata } = req.body;\r\n\tconst { predlozak, pitanja, tipoviPitanja } = metadata;\r\n\tinsertPredlozakWithOutput({ predlozak, db, res, user })\r\n\t\t.pipe(first())\r\n\t\t.subscribe(({ PkPredlozak }) => {\r\n\t\t\tforkJoin(pitanja.map((pitanje) => insertPitanjePredlozak({ PkPitanje: pitanje.PkPitanje, PkPredlozak, db, res, user, pitanje })))\r\n\t\t\t\t.pipe(first())\r\n\t\t\t\t.subscribe((questionsInserted) => {\r\n\t\t\t\t\tres.send({ message: 'OK' });\r\n\t\t\t\t});\r\n\t\t});\r\n});\r\n\r\nrouter.post('/predlozak/templating', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Predlozak' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\tconst user = await handleRequestUser(req, res);\r\n\tconst { predlozak } = req.body;\r\n\tconst { PkPredlozak } = predlozak;\r\n\tif (PkPredlozak) {\r\n\t\treturn updatePredlozakWithOutput({ predlozak, PkPredlozak, db, user, res })\r\n\t\t\t.pipe(first())\r\n\t\t\t.subscribe(({ PkPredlozak }) => {\r\n\t\t\t\tres.status(200).send({ PkPredlozak });\r\n\t\t\t});\r\n\t} else {\r\n\t\treturn insertPredlozakWithOutput({ predlozak, db, res, user })\r\n\t\t\t.pipe(first())\r\n\t\t\t.subscribe(({ PkPredlozak }) => {\r\n\t\t\t\tres.status(200).send({ PkPredlozak });\r\n\t\t\t});\r\n\t}\r\n});\r\n\r\nrouter.post('/anketa/solved', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\tconst { pitanja, PkAnketa, PkPredlozak, anketa } = req.body;\r\n\r\n\tconst fetchAnketaUser = ({ PkAnketa, PkUser }) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spAnketaUser_select', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\trequest.addParameter('PkUser', TYPES.Int, PkUser);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\tconst setAnketaIsSolved = ({ PkAnketa, PkUser }) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spAnketaUserSolved_update', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\trequest.addParameter('PkUser', TYPES.Int, PkUser);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\r\n\tconst insertAnswerToQuestion = ({ PkAnketaUserPitanje, Odgovor }) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spAnketaUserSolvedQuestionOdgovor_insert', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkAnketaUserPitanje', TYPES.Int, PkAnketaUserPitanje);\r\n\t\tif (Odgovor) {\r\n\t\t\tconst { PkOdgovor, OdgovorTekst } = Odgovor;\r\n\t\t\tPkOdgovor && request.addParameter('PkOdgovor', TYPES.Int, PkOdgovor);\r\n\t\t\trequest.addParameter('UserOdgovorTekst', TYPES.NVarChar, OdgovorTekst);\r\n\t\t}\r\n\t\trequest.addOutputParameter('PkAnketaUserPitanjeOdgovor', TYPES.Int, null);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\r\n\tconst setStatisticAnketa = () => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.[spStatistikaAnketaCounter_upsert]', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\trequest.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\t\trequest.addOutputParameter('PkStatistikaAnketa', TYPES.Int, null);\r\n\t\treturn makeObservableConnectionWithOutput(request, conn, res, db, 'PkStatistikaAnketa');\r\n\t};\r\n\r\n\tconst setQuestionStatistic = ({ PkPitanje, PkOdgovor, OdgovorTekst }) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.[spStatistikaAnketaPitanjaOdgovor_upsert]', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\trequest.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\t\trequest.addParameter('PkPitanje', TYPES.Int, PkPitanje);\r\n\t\t!exists(PkOdgovor) && request.addParameter('AnonimniOdgovorTekst', TYPES.NVarChar, stringToSentence(OdgovorTekst));\r\n\t\trequest.addParameter('PkOdgovor', TYPES.Int, PkOdgovor);\r\n\t\trequest.addOutputParameter('PkStatistikaAnketaUserPitanjeOdgovor', TYPES.Int, null);\r\n\t\treturn makeObservableConnectionWithOutput(request, conn, res, db, 'PkStatistikaAnketaUserPitanjeOdgovor');\r\n\t};\r\n\r\n\tconst mapQuestionToSolvedAnketa = ({ PkAnketaUser, pitanje }) => {\r\n\t\tconst { PkPitanje, Odgovor } = pitanje;\r\n\r\n\t\tconst UserOdgovorioNaPitanjeDaNe = exists(Odgovor) ? 1 : 0;\r\n\r\n\t\tif (UserOdgovorioNaPitanjeDaNe) {\r\n\t\t\tif (Array.isArray(Odgovor)) {\r\n\t\t\t\tforkJoin(Odgovor.map((o) => setQuestionStatistic({ PkPitanje, PkOdgovor: o.PkOdgovor, OdgovorTekst: o.OdgovorTekst })))\r\n\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t.subscribe((result) => {});\r\n\t\t\t} else {\r\n\t\t\t\tconst { PkOdgovor, OdgovorTekst } = Odgovor;\r\n\t\t\t\tsetQuestionStatistic({ PkPitanje, PkOdgovor, OdgovorTekst })\r\n\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t.subscribe(({ PkStatistikaAnketaUserPitanjeOdgovor }) => {});\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (PkAnketaUser) {\r\n\t\t\tconst { request, conn } = constructConnection('Ankete.spAnketaUserSolvedQuestion_insert', res.locals.currDatabase, res, db);\r\n\t\t\trequest.addParameter('PkAnketaUser', TYPES.Int, PkAnketaUser);\r\n\t\t\trequest.addParameter('PkPitanje', TYPES.Int, PkPitanje);\r\n\t\t\trequest.addParameter('UserOdgovorioNaPitanjeDaNe', TYPES.Int, UserOdgovorioNaPitanjeDaNe);\r\n\t\t\trequest.addOutputParameter('PkAnketaUserPitanje', TYPES.Int, null);\r\n\r\n\t\t\treturn makeObservableConnectionWithOutput(request, conn, res, db, 'PkAnketaUserPitanje').pipe(\r\n\t\t\t\tfirst(),\r\n\t\t\t\tmergeMap(({ PkAnketaUserPitanje }) => {\r\n\t\t\t\t\tif (UserOdgovorioNaPitanjeDaNe) {\r\n\t\t\t\t\t\tif (Array.isArray(Odgovor)) {\r\n\t\t\t\t\t\t\treturn forkJoin(Odgovor.map((o) => insertAnswerToQuestion({ PkAnketaUserPitanje, Odgovor: o }))).pipe(first());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn insertAnswerToQuestion({ PkAnketaUserPitanje, Odgovor }).pipe(first());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn of(null);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn of(true);\r\n\t\t}\r\n\t};\r\n\r\n\tsetStatisticAnketa()\r\n\t\t.pipe(first())\r\n\t\t.subscribe((result) => {});\r\n\r\n\tconst { AnketaAnonimnaDaNe } = anketa;\r\n\r\n\tif (!(user && user.PkUsera)) {\r\n\t\tif (AnketaAnonimnaDaNe) {\r\n\t\t\treturn forkJoin(pitanja.map((q) => mapQuestionToSolvedAnketa({ PkAnketaUser: null, pitanje: q })))\r\n\t\t\t\t.pipe(first())\r\n\t\t\t\t.subscribe({\r\n\t\t\t\t\tnext: (complete) => {\r\n\t\t\t\t\t\tres.status(200).send({ complete });\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: (err) => {\r\n\t\t\t\t\t\tres.status(500).send({ message: err.message });\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tres.status(200).send({ message: 'STD:ILLEGAL_STATE' });\r\n\t\t}\r\n\t} else {\r\n\t\treturn fetchAnketaUser({ PkAnketa, PkUser: user.PkUsera })\r\n\t\t\t.pipe(first())\r\n\t\t\t.subscribe({\r\n\t\t\t\tnext: ([anketaWithUser]) => {\r\n\t\t\t\t\tsetAnketaIsSolved({ PkAnketa, PkUser: anketaWithUser.PkUser })\r\n\t\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t\t.subscribe((result) => {});\r\n\r\n\t\t\t\t\treturn forkJoin(pitanja.map((q) => mapQuestionToSolvedAnketa({ PkAnketaUser: anketaWithUser.PkAnketaUser, pitanje: q })))\r\n\t\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t\t.subscribe({\r\n\t\t\t\t\t\t\tnext: (complete) => {\r\n\t\t\t\t\t\t\t\tres.status(200).send({ complete });\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror: (err) => {\r\n\t\t\t\t\t\t\t\tres.status(500).send({ message: err.message });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\terror: (err) => {\r\n\t\t\t\t\tres.status(500).send({ message: err.message });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n});\r\n\r\n//#endregion POST\r\n\r\n//#region PUT\r\n\r\nrouter.put('/predlozak/templating/question/reorder', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Predlozak' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\tconst user = await handleRequestUser(req, res);\r\n\tconst { swap, current, target, PkPredlozak } = req.body;\r\n\tconst { PkPitanjeFrom, PkPitanjeTo } = swap;\r\n\tconst { request, conn } = constructConnection('Ankete.spPitanjeRedoslijed_Update', res.locals.currDatabase, res, db);\r\n\trequest.addParameter('PkPitanjeFrom', TYPES.Int, PkPitanjeFrom);\r\n\trequest.addParameter('PkPitanjeTo', TYPES.Int, PkPitanjeTo);\r\n\trequest.addParameter('RedoslijedFrom', TYPES.Int, current);\r\n\trequest.addParameter('RedoslijedTo', TYPES.Int, target);\r\n\trequest.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\trequest.addParameter('UserPromjene', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\trequest.addParameter('PkUserPromjene', TYPES.Int, user.PkUsera);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tsimpleDbResolve(output, outputParams, result, res);\r\n\t});\r\n});\r\n\r\nrouter.put('/predlozak/templating/question/replace', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Predlozak' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst { pitanje, odgovori, PkPredlozak } = req.body;\r\n\r\n\tconst updatePitanjeMeta = () => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spPitanje_Update', res.locals.currDatabase, res, db);\r\n\t\tconst { PkPitanje, PitanjeTekst, PkPitanjeTip, PitanjeAktivnoDaNe, PitanjeObaveznoDaNe } = pitanje;\r\n\t\trequest.addParameter('PkPitanje', TYPES.Int, PkPitanje);\r\n\t\trequest.addParameter('PitanjeTekst', TYPES.NVarChar, PitanjeTekst);\r\n\t\trequest.addParameter('PkPitanjeTip', TYPES.Int, PkPitanjeTip);\r\n\t\trequest.addParameter('PitanjeAktivnoDaNe', TYPES.Int, PitanjeAktivnoDaNe);\r\n\t\trequest.addParameter('PitanjeObaveznoDaNe', TYPES.Int, PitanjeObaveznoDaNe);\r\n\t\trequest.addParameter('PkUser', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('User', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\tconst purgeAnswer = (PkOdgovor) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spOdgovor_delete', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkOdgovor', TYPES.Int, PkOdgovor);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\tconst insertAnswer = (odgovor, index) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spOdgovor_upsert', res.locals.currDatabase, res, db);\r\n\t\tconst { PkPitanje } = pitanje;\r\n\t\tconst { OdgovorTekst } = odgovor;\r\n\t\trequest.addParameter('PkPitanje', TYPES.Int, PkPitanje);\r\n\t\trequest.addParameter('OdgovorTekst', TYPES.NVarChar, OdgovorTekst);\r\n\t\trequest.addParameter('OdgovorRedoslijed', TYPES.NVarChar, `${index}`);\r\n\t\trequest.addParameter('PkUserUnos', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('PkUserPromjena', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('PkUsera', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('User', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addOutputParameter('PkOdgovor', TYPES.Int, null);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\r\n\tconst applyChanges = () => {\r\n\t\treturn forkJoin([updatePitanjeMeta(), ...(pitanje.odgovori ? pitanje.odgovori.map((o) => purgeAnswer(o.PkOdgovor)) : []), ...(odgovori && odgovori.length ? odgovori.map((o, i) => insertAnswer(o, i + 1)) : [])])\r\n\t\t\t.pipe(first())\r\n\t\t\t.subscribe((result) => {\r\n\t\t\t\tres.send({ message: 'OK' });\r\n\t\t\t});\r\n\t};\r\n\tif (pitanje.PkPitanje) {\r\n\t\treturn applyChanges();\r\n\t} else {\r\n\t\tconst insertPitanje = () => {\r\n\t\t\tconst { request, conn } = constructConnection('Ankete.spPitanje_Insert', res.locals.currDatabase, res, db);\r\n\t\t\tconst { PitanjeTekst, PkPitanjeTip, PitanjeAktivnoDaNe, PitanjeObaveznoDaNe } = pitanje;\r\n\t\t\trequest.addParameter('PitanjeTekst', TYPES.NVarChar, PitanjeTekst);\r\n\t\t\trequest.addParameter('PkPitanjeTip', TYPES.Int, PkPitanjeTip);\r\n\t\t\trequest.addParameter('PitanjeAktivnoDaNe', TYPES.Int, PitanjeAktivnoDaNe);\r\n\t\t\trequest.addParameter('PitanjeObaveznoDaNe', TYPES.Int, PitanjeObaveznoDaNe);\r\n\t\t\trequest.addParameter('PkUser', TYPES.Int, user.PkUsera);\r\n\t\t\trequest.addParameter('User', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\t\trequest.addOutputParameter('PkPitanje', TYPES.Int, null);\r\n\t\t\treturn makeObservableConnectionWithOutput(request, conn, res, db, 'PkPitanje');\r\n\t\t};\r\n\r\n\t\tinsertPitanje()\r\n\t\t\t.pipe(\r\n\t\t\t\tfirst(),\r\n\t\t\t\tmergeMap(({ PkPitanje }) => {\r\n\t\t\t\t\tpitanje.PkPitanje = PkPitanje;\r\n\t\t\t\t\treturn insertPitanjePredlozak({ PkPitanje, PkPredlozak, db, pitanje, res, user });\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe(({ PkPredlozakPitanje }) => {\r\n\t\t\t\tapplyChanges();\r\n\t\t\t});\r\n\t}\r\n});\r\n\r\nrouter.put('/predlozak/proglasiAnketom', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Predlozak' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst { PkPredlozak, AnketaAnonimnaDaNe, AnketaOtvorenaDo, AnketaOtvorenaOd, Clanstva, AnketaNaziv } = req.body;\r\n\r\n\tconst convertToAnketa = () => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spPredlozakProglasiAnketom', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\t\trequest.addParameter('PkUser', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('User', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addParameter('AnketaNaziv', TYPES.NVarChar, AnketaNaziv);\r\n\t\trequest.addParameter('AnketaAnonimnaDaNe', TYPES.Int, AnketaAnonimnaDaNe);\r\n\t\trequest.addParameter('AnketaOtvorenaDo', TYPES.Date, AnketaOtvorenaDo);\r\n\t\trequest.addParameter('AnketaOtvorenaOd', TYPES.Date, AnketaOtvorenaOd);\r\n\t\tconst vidljivoClanovi = Clanstva ? Clanstva.join(',') : null;\r\n\t\tvidljivoClanovi && request.addParameter('VidljivaPkVrstiClanovimaArray', TYPES.NVarChar, vidljivoClanovi);\r\n\t\trequest.addOutputParameter('PkAnketa', TYPES.Int, null);\r\n\t\treturn makeObservableConnectionWithOutput(request, conn, res, db, 'PkAnketa');\r\n\t};\r\n\r\n\tconst mapUsersToAnketa = ({ PkAnketa, PkUser }) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spUserMapToAnketa', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\trequest.addParameter('PkUser', TYPES.Int, tryDecryptOrReturnInput(PkUser));\r\n\t\trequest.addParameter('PkUserPromjena', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('UserPromjena', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\r\n\tconst fetchUsersForEmailSend = ({ PkAnketa, PkVrstaClanstva }) => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spUsersForAnketaSend', res.locals.currDatabase, res, db);\r\n\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\trequest.addParameter('PkClanstvo', TYPES.Int, PkVrstaClanstva);\r\n\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\r\n\tconvertToAnketa()\r\n\t\t.pipe(first())\r\n\t\t.subscribe(({ PkAnketa }) => {\r\n\t\t\treturn forkJoin(Clanstva.map((PkVrstaClanstva) => fetchUsersForEmailSend({ PkAnketa, PkVrstaClanstva })))\r\n\t\t\t\t.pipe(first())\r\n\t\t\t\t.subscribe((clanstva) => {\r\n\t\t\t\t\tif (clanstva) {\r\n\t\t\t\t\t\tconst sendEmails = (u) => {\r\n\t\t\t\t\t\t\treturn from(sendAnketaLinkMail({ user: u, lang: res.locals.language, PkAnketa: PkAnketa }));\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tconst users = flatten(clanstva);\r\n\r\n\t\t\t\t\t\tforkJoin(flatten([...users.map((u) => [sendEmails(u), mapUsersToAnketa({ PkAnketa, PkUser: u.PkUsera })])]))\r\n\t\t\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t\t\t.subscribe({\r\n\t\t\t\t\t\t\t\tnext: (onSend) => {\r\n\t\t\t\t\t\t\t\t\tres.send(onSend);\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\terror: (err) => {\r\n\t\t\t\t\t\t\t\t\tres.status(500).send(err);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t});\r\n});\r\n\r\nrouter.put('/anketa/manage', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Anketa' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst { PkAnketa, IsActive, AnketaOtvorenaOd, AnketaOtvorenaDo } = req.body;\r\n\r\n\tconst manageAnketa = () => {\r\n\t\tconst { request, conn } = constructConnection('Ankete.spAnketa_Update', res.locals.currDatabase, res, db);\r\n\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\trequest.addParameter('IsActive', TYPES.Int, IsActive);\r\n\t\trequest.addParameter('AnketaOtvorenaOd', TYPES.DateTime, AnketaOtvorenaOd);\r\n\t\trequest.addParameter('AnketaOtvorenaDo', TYPES.DateTime, AnketaOtvorenaDo);\r\n\t\trequest.addParameter('PkUser', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('User', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\r\n\tmanageAnketa()\r\n\t\t.pipe(first())\r\n\t\t.subscribe((done) => {\r\n\t\t\tres.send({ message: 'OK' });\r\n\t\t});\r\n});\r\n\r\n//#endregion PUT\r\n\r\n//#region DELETE\r\n\r\nrouter.delete('/predlozak/templating/question/delete', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Predlozak' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\tconst { PkPitanje, PkPredlozak } = req.query;\r\n\tconst { request, conn } = constructConnection('Ankete.spPitanje_Delete', res.locals.currDatabase, res, db);\r\n\trequest.addParameter('PkPitanje', TYPES.Int, PkPitanje);\r\n\trequest.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.delete('/predlozak/delete', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Predlozak' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\tconst { PkPredlozak } = req.query;\r\n\tconst { request, conn } = constructConnection('Ankete.spPredlozak_delete', res.locals.currDatabase, res, db);\r\n\trequest.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.delete('/anketa/delete', async (req, res, next) => {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Anketa' }, req);\r\n\tif (!hasAcces) {\r\n\t\treturn res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\tconst { PkAnketa } = req.query;\r\n\tconst deleteAnketa = () => {\r\n\t\tconst { request, conn } = constructConnection('[Ankete].[spAnketa_delete]', res.locals.currDatabase, res, db);\r\n\t\trequest.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\r\n\tdeleteAnketa()\r\n\t\t.pipe(first())\r\n\t\t.subscribe({\r\n\t\t\tnext: (done) => {\r\n\t\t\t\tres.send({ message: 'OK' });\r\n\t\t\t},\r\n\t\t\terror: (err) => {\r\n\t\t\t\tres.status(500).send(err);\r\n\t\t\t}\r\n\t\t});\r\n});\r\n\r\n//#endregion DELETE\r\n\r\nmodule.exports = { anketeRouter: router };\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst { TYPES } = require('tedious');\r\nconst db = require('../db.js');\r\nconst { simpleDbResolve, handleRequestUser, constructDirDepth, decryptIfEncrypted, exists, groupFlatProperies, groupDataByKeySync, hasClaim } = require('../services/app.service');\r\nconst formidable = require('formidable');\r\nconst fs = require('fs-extra');\r\nconst crypt = require('../kripto');\r\nconst { uuid } = require('uuidv4');\r\nconst { createDatotekaInsertRequest, createDatotekaRelacijaRequest } = require('../services/profile.service.js');\r\n\r\nconst modulName = 'Forum';\r\n//#region GET DATA\r\n//Ukoliko se ne posalje PkKategorija dohvacaju se sve kategorije NULTE razine\r\nrouter.get('/kategorije', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Forum.spKategorija_Select', conn, res);\r\n\trequest.addParameter('PkKategorija', TYPES.Int, req.query.PkKategorija);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/potkategorije', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Forum.spPotKategorija_Select', conn, res);\r\n\trequest.addParameter('PkKategorija', TYPES.Int, req.query.PkKategorija);\r\n\treq.query.skip && request.addParameter('skip', TYPES.Int, req.query.skip);\r\n\treq.query.take && request.addParameter('take', TYPES.Int, req.query.take);\r\n\treq.query.query && request.addParameter('query', TYPES.NVarChar, req.query.query);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/komentari', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Forum.spKomentar_Select', conn, res);\r\n\trequest.addParameter('PkObjava', TYPES.Int, req.query.PkObjava);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\tresult = result.map((r) => {\r\n\t\t\t\tconst { groupId, PkObjavaOccurence } = r;\r\n\t\t\t\tObject.keys(r).forEach((k) => {\r\n\t\t\t\t\tif (k.includes(groupId)) {\r\n\t\t\t\t\t\tconst [first, last] = k.split(groupId);\r\n\t\t\t\t\t\tconst newKey = `${first}.${PkObjavaOccurence - 1}.${last}`;\r\n\t\t\t\t\t\tdelete Object.assign(r, { [newKey]: r[k] })[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn r;\r\n\t\t\t});\r\n\t\t\tconst pkGroup = groupDataByKeySync(result, 'PkKomentar');\r\n\t\t\tresult = Object.keys(pkGroup).map(key => {\r\n\t\t\t\treturn { ...pkGroup[key].reduce((prev, curr) => ({ ...prev, ...curr }), {}) }\r\n\t\t\t});\r\n\t\t\tresult = result.map((r) => groupFlatProperies(r));\r\n\t\t\treturn res.status(200).send(result);\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t});\r\n});\r\n\r\nrouter.get('/komentar', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Forum.spKomentar_Select', conn, res);\r\n\trequest.addParameter('PkKomentar', TYPES.Int, req.query.PkKomentar);\r\n\trequest.addParameter('PkObjava', TYPES.Int, req.query.PkObjava);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\tresult = result.map((r) => {\r\n\t\t\t\tconst { groupId, PkObjavaOccurence } = r;\r\n\t\t\t\tObject.keys(r).forEach((k) => {\r\n\t\t\t\t\tif (k.includes(groupId)) {\r\n\t\t\t\t\t\tconst [first, last] = k.split(groupId);\r\n\t\t\t\t\t\tconst newKey = `${first}.${PkObjavaOccurence - 1}.${last}`;\r\n\t\t\t\t\t\tdelete Object.assign(r, { [newKey]: r[k] })[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn r;\r\n\t\t\t});\r\n\t\t\tconst pkGroup = groupDataByKeySync(result, 'PkKomentar');\r\n\t\t\tresult = Object.keys(pkGroup).map(key => {\r\n\t\t\t\treturn { ...pkGroup[key].reduce((prev, curr) => ({ ...prev, ...curr }), {}) }\r\n\t\t\t});\r\n\r\n\t\t\tresult = result.map((r) => groupFlatProperies(r));\r\n\t\t\treturn res.status(200).send(result);\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t});\r\n});\r\n\r\nrouter.get('/objave', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Forum.spObjava_Select', conn, res);\r\n\treq.query.PkObjava && request.addParameter('PkObjava', TYPES.Int, req.query.PkObjava);\r\n\treq.query.PkKategorija && request.addParameter('PkKategorija', TYPES.Int, req.query.PkKategorija);\r\n\treq.query.skip && request.addParameter('skip', TYPES.Int, req.query.skip);\r\n\treq.query.take && request.addParameter('take', TYPES.Int, req.query.take);\r\n\treq.query.query && request.addParameter('query', TYPES.NVarChar, req.query.query);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/objavaPrilozi', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Forum.spObjavaPrilozi_select', conn, res);\r\n\treq.query.PkObjava && request.addParameter('PkForumObjava', TYPES.Int, req.query.PkObjava);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\treturn res.status(200).send(result.map((r) => groupFlatProperies(r)));\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t});\r\n});\r\n//#endregion\r\n\r\n//#region INSERT DATA\r\nrouter.post('/kategorija', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Kategorija' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spKategorija_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Naziv', TYPES.NVarChar, req.body.Naziv);\r\n\t\trequest.addParameter('Opis', TYPES.NVarChar, req.body.Opis);\r\n\t\trequest.addParameter('UserUnos', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addParameter('PkUserUnos', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('ParentPk', TYPES.Int, req.body.ParentPk);\r\n\t\treq.body.PublicDaNe && request.addParameter('PublicDaNe', TYPES.Int, req.body.PublicDaNe);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.post('/komentar', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Komentar' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spKomentar_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, req.body.Sadrzaj);\r\n\t\trequest.addParameter('PkUseraUnos', TYPES.Int, req.body.PkUseraUnos);\r\n\t\trequest.addParameter('PkObjava', TYPES.Int, req.body.PkObjava);\r\n\t\trequest.addParameter('ParentPk', TYPES.Int, req.body.ParentPk);\r\n\t\trequest.addParameter('Dubina', TYPES.Int, req.body.Dubina);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.post('/objava', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Objava' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spObjava_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Naslov', TYPES.NVarChar, req.body.Naslov);\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, req.body.Sadrzaj);\r\n\t\trequest.addParameter('PkUseraUnos', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('PkKategorija', TYPES.Int, req.body.PkKategorija);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.post('/attachment', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Objava' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst form = new formidable.IncomingForm();\r\n\t\tconst pathParts = ['uploads', 'tempFiles', 'korisnici', 'attachment'];\r\n\r\n\t\tconst tempPath = constructDirDepth(pathParts);\r\n\r\n\t\tform.uploadDir = tempPath;\r\n\t\tform.keepExtensions = true;\r\n\t\ttry {\r\n\t\t\tform.parse(req, async function (err, fields, { CoverImage, file }) {\r\n\t\t\t\tconst { Naziv, Opis, PkObjava, PkOsobniPodaciPkUsera } = fields;\r\n\t\t\t\tconst id = uuid();\r\n\t\t\t\tconst savePath = constructDirDepth(['uploads', 'korisnici', PkOsobniPodaciPkUsera, 'attachments', 'forum', `${PkObjava}`, `${id}/`]);\r\n\r\n\t\t\t\tconst dbSavePathRoot = `korisnici/${PkOsobniPodaciPkUsera}/attachments/forum/${PkObjava}/${id}/`;\r\n\t\t\t\tconst dbSavePathcoverImage = CoverImage ? `korisnici/${PkOsobniPodaciPkUsera}/attachments/forum/${PkObjava}/${id}/${id}_${CoverImage.name}` : null; // not required field!\r\n\t\t\t\tconst dbSavePathAttachment = `korisnici/${PkOsobniPodaciPkUsera}/attachments/forum/${PkObjava}/${id}/${id}_${file.name}`;\r\n\t\t\t\tif (CoverImage) fs.renameSync(CoverImage.path, `${savePath}${id}_${CoverImage.name}`);\r\n\t\t\t\tfs.renameSync(file.path, `${savePath}${id}_${file.name}`);\r\n\r\n\t\t\t\tfs.removeSync(tempPath);\r\n\r\n\t\t\t\tconst uploadFile = ({ dbPath, dbSavePathRoot, user, filename, file, Naziv, Opis, PkOsobniPodaciPkUsera }) =>\r\n\t\t\t\t\tnew Promise((resolve) => {\r\n\t\t\t\t\t\tconst { size, path, name, type, hash, lastModifiedDate } = file;\r\n\t\t\t\t\t\tconst { conn, request } = createDatotekaInsertRequest(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tNaziv,\r\n\t\t\t\t\t\t\t\tOpis,\r\n\t\t\t\t\t\t\t\tPkDatoteka: null,\r\n\t\t\t\t\t\t\t\tPkUseraPromjena: user.PkUsera,\r\n\t\t\t\t\t\t\t\tPkUseraUnos: user.PkUsera,\r\n\t\t\t\t\t\t\t\tUserPromjena: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\tUserUnos: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\tdestination: dbSavePathRoot,\r\n\t\t\t\t\t\t\t\tencoding: null,\r\n\t\t\t\t\t\t\t\tfilename,\r\n\t\t\t\t\t\t\t\tmimetype: type,\r\n\t\t\t\t\t\t\t\toriginalname: name,\r\n\t\t\t\t\t\t\t\tpath: dbPath, //dbSavePathcoverImage,\r\n\t\t\t\t\t\t\t\tsize: size\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\t\t\t\tconst { PkDatoteka } = outputParams;\r\n\t\t\t\t\t\t\t\tresolve({ PkDatoteka });\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\tlet PkDatotekaCoverImage = null;\r\n\t\t\t\tif (CoverImage) {\r\n\t\t\t\t\tconst { PkDatoteka: insertedPkCover } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathcoverImage, filename: `${id}_${CoverImage.name}`, dbSavePathRoot, user, file: CoverImage });\r\n\t\t\t\t\tPkDatotekaCoverImage = exists(insertedPkCover) ? insertedPkCover : null;\r\n\t\t\t\t}\r\n\t\t\t\tconst { PkDatoteka } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathAttachment, filename: `${id}_${file.name}`, dbSavePathRoot, user, file });\r\n\r\n\t\t\t\tconst { conn, request } = createDatotekaRelacijaRequest(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tPkForumObjava: PkObjava,\r\n\t\t\t\t\t\tPkDatoteka,\r\n\t\t\t\t\t\tPkDatotekaCoverImage,\r\n\t\t\t\t\t\tPkUsera: decryptIfEncrypted(PkOsobniPodaciPkUsera),\r\n\t\t\t\t\t\tPkForumObjavaKomentar: null\r\n\t\t\t\t\t},\r\n\t\t\t\t\tres\r\n\t\t\t\t);\r\n\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n});\r\n\r\nasync function insertComment({ Sadrzaj, PkUseraUnos, PkObjava, ParentPk = null, Dubina = null }, res) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spKomentar_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, Sadrzaj);\r\n\t\trequest.addParameter('PkUseraUnos', TYPES.Int, PkUseraUnos);\r\n\t\trequest.addParameter('PkObjava', TYPES.Int, PkObjava);\r\n\t\trequest.addParameter('ParentPk', TYPES.Int, ParentPk);\r\n\t\trequest.addParameter('Dubina', TYPES.Int, Dubina);\r\n\t\trequest.addOutputParameter('PkKomentar', TYPES.Int, null);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tconst { PkKomentar } = outputParams;\r\n\t\t\t\tresolve({ PkKomentar });\r\n\t\t\t} else {\r\n\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction executeSqlReqAsPromise({ request, conn, res }) {\r\n\treturn new Promise((resolve) => {\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tresolve(result);\r\n\t\t\t} else {\r\n\t\t\t\tresolve({ message: output });\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nrouter.post('/attachment/comment', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Komentar' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst form = new formidable.IncomingForm();\r\n\t\tconst pathParts = ['uploads', 'tempFiles', 'korisnici', 'attachment'];\r\n\r\n\t\tconst tempPath = constructDirDepth(pathParts);\r\n\r\n\t\tform.uploadDir = tempPath;\r\n\t\tform.keepExtensions = true;\r\n\t\tform.multiples = true;\r\n\t\ttry {\r\n\t\t\tform.parse(req, async function (err, fields, files) {\r\n\r\n\t\t\t\tfields = groupFlatProperies(fields);\r\n\t\t\t\tconst { prilogDummyPk: keys } = fields;\r\n\t\t\t\tfiles = groupFlatProperies(files);\r\n\r\n\t\t\t\tconst { PkObjava, Sadrzaj, UserUnos, ParentPk, Dubina } = fields;\r\n\t\t\t\tlet { PkUsera: PkOsobniPodaciPkUsera } = user;\r\n\t\t\t\tlet parent = exists(ParentPk) ? ParentPk : null;\r\n\t\t\t\tlet dubina = exists(Dubina) ? Dubina : null;\r\n\r\n\t\t\t\tconst { PkKomentar } = await insertComment({ Sadrzaj, PkObjava, PkUseraUnos: PkOsobniPodaciPkUsera, Dubina: dubina, ParentPk: parent }, res);\r\n\r\n\t\t\t\tif (keys) {\r\n\t\t\t\t\tPkOsobniPodaciPkUsera = crypt.encryptString('' + PkOsobniPodaciPkUsera);\r\n\r\n\t\t\t\t\tconst prilozi = keys.map((k) => ({ file: files.file[+k], ...(files.CoverImage && { CoverImage: files.CoverImage[+k] }), Naziv: fields.NazivDatotekaMeta[+k], Opis: fields.OpisDatotekaMeta[+k] })).filter(i => i);\r\n\r\n\t\t\t\t\tfor (const { file, CoverImage, Naziv, Opis } of prilozi) {\r\n\t\t\t\t\t\tconst id = uuid();\r\n\t\t\t\t\t\tconst savePath = constructDirDepth(['uploads', 'korisnici', `${PkOsobniPodaciPkUsera}`, 'attachments', 'forum', `${PkObjava}`, 'comment', `${id}/`]);\r\n\r\n\t\t\t\t\t\tconst dbSavePathRoot = `korisnici/${PkOsobniPodaciPkUsera}/attachments/forum/${PkObjava}/comment/${id}/`;\r\n\t\t\t\t\t\tconst dbSavePathcoverImage = CoverImage ? `korisnici/${PkOsobniPodaciPkUsera}/attachments/forum/${PkObjava}/comment/${id}/${id}_${CoverImage.name}` : null; // not required field!\r\n\t\t\t\t\t\tconst dbSavePathAttachment = `korisnici/${PkOsobniPodaciPkUsera}/attachments/forum/${PkObjava}/comment/${id}/${id}_${file.name}`;\r\n\t\t\t\t\t\tif (CoverImage) fs.renameSync(CoverImage.path, `${savePath}${id}_${CoverImage.name}`);\r\n\t\t\t\t\t\tfs.renameSync(file.path, `${savePath}${id}_${file.name}`);\r\n\r\n\t\t\t\t\t\tconst uploadFile = ({ dbPath, dbSavePathRoot, user, filename, file, Naziv, Opis, PkOsobniPodaciPkUsera }) =>\r\n\t\t\t\t\t\t\tnew Promise((resolve) => {\r\n\t\t\t\t\t\t\t\tconst { size, path, name, type, hash, lastModifiedDate } = file;\r\n\t\t\t\t\t\t\t\tconst { conn, request } = createDatotekaInsertRequest(\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tNaziv,\r\n\t\t\t\t\t\t\t\t\t\tOpis,\r\n\t\t\t\t\t\t\t\t\t\tPkDatoteka: null,\r\n\t\t\t\t\t\t\t\t\t\tPkUseraPromjena: user.PkUsera,\r\n\t\t\t\t\t\t\t\t\t\tPkUseraUnos: user.PkUsera,\r\n\t\t\t\t\t\t\t\t\t\tUserPromjena: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\t\t\tUserUnos: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\t\t\tdestination: dbSavePathRoot,\r\n\t\t\t\t\t\t\t\t\t\tencoding: null,\r\n\t\t\t\t\t\t\t\t\t\tfilename,\r\n\t\t\t\t\t\t\t\t\t\tmimetype: type,\r\n\t\t\t\t\t\t\t\t\t\toriginalname: name,\r\n\t\t\t\t\t\t\t\t\t\tpath: dbPath, //dbSavePathcoverImage,\r\n\t\t\t\t\t\t\t\t\t\tsize: size\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\t\t\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\t\t\t\t\t\tconst { PkDatoteka } = outputParams;\r\n\t\t\t\t\t\t\t\t\t\tresolve({ PkDatoteka });\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\tlet PkDatotekaCoverImage = null;\r\n\t\t\t\t\t\tif (CoverImage) {\r\n\t\t\t\t\t\t\tconst { PkDatoteka: insertedPkCover } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathcoverImage, filename: `${id}_${CoverImage.name}`, dbSavePathRoot, user, file: CoverImage });\r\n\t\t\t\t\t\t\tPkDatotekaCoverImage = exists(insertedPkCover) ? insertedPkCover : null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst { PkDatoteka } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathAttachment, filename: `${id}_${file.name}`, dbSavePathRoot, user, file });\r\n\t\t\t\t\t\tconst { conn, request } = createDatotekaRelacijaRequest(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tPkForumObjava: PkObjava,\r\n\t\t\t\t\t\t\t\tPkDatoteka,\r\n\t\t\t\t\t\t\t\tPkDatotekaCoverImage,\r\n\t\t\t\t\t\t\t\tPkUsera: decryptIfEncrypted(PkOsobniPodaciPkUsera),\r\n\t\t\t\t\t\t\t\tPkForumObjavaKomentar: PkKomentar\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tawait executeSqlReqAsPromise({ request, conn, res });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfs.removeSync(tempPath);\r\n\r\n\t\t\t\tres.status(200).send({ PkKomentar });\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\t\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n});\r\n//#endregion\r\n\r\n//#region UPDATE DATA\r\nrouter.put('/kategorija', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Kategorija' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spKategorija_Update', conn, res);\r\n\r\n\t\trequest.addParameter('PkKategorija', TYPES.Int, req.body.PkKategorija);\r\n\t\trequest.addParameter('Naziv', TYPES.NVarChar, req.body.Naziv);\r\n\t\trequest.addParameter('Opis', TYPES.NVarChar, req.body.Opis);\r\n\t\trequest.addParameter('UserPromjenio', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addParameter('PkUseraPromjenio', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('RowVersion', TYPES.NVarChar, req.body.RowVersion);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n});\r\n\r\nrouter.put('/komentar', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Komentar' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spKomentar_Update', conn, res);\r\n\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, req.body.Sadrzaj);\r\n\t\trequest.addParameter('PkKomentar', TYPES.Int, req.body.PkKomentar);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.put('/objava', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Objava' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spObjava_Update', conn, res);\r\n\r\n\t\trequest.addParameter('Naslov', TYPES.NVarChar, req.body.Naslov);\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, req.body.Sadrzaj);\r\n\t\trequest.addParameter('PkObjava', TYPES.Int, req.body.PkObjava);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n//#endregion\r\n\r\n//#region DELETE DATA\r\n\r\n//Ukoliko kategoriaj ima potkategorije, baza vraca error\r\nrouter.delete('/kategorija', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Kategorija' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spKategorija_Delete', conn, res);\r\n\r\n\t\trequest.addParameter('PkKategorija', TYPES.Int, req.query.PkKategorija);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\n//Komentar ne brisemo iz baze vec dizemo flag da je izbrisan radi hijerarhijske strukture komentara\r\nrouter.delete('/komentar', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Komentar' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spKomentar_Delete', conn, res);\r\n\r\n\t\trequest.addParameter('PkKomentar', TYPES.Int, req.query.PkKomentar);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.delete('/objava', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Objava' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Forum.spObjava_Delete', conn, res);\r\n\r\n\t\trequest.addParameter('PkObjava', TYPES.Int, req.query.PkObjava);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n//#endregion\r\nmodule.exports = { forumRouter: router };\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst { TYPES } = require('tedious');\r\nconst db = require('../db.js');\r\nconst { simpleDbResolve, flatten, constructDirDepth, handleRequestUser, exists, decryptIfEncrypted, constructConnection, hasClaim, makeObservableConnection } = require('../services/app.service');\r\nconst formidable = require('formidable');\r\nconst path = require('path');\r\nconst fs = require('fs-extra');\r\nconst { uuid } = require('uuidv4');\r\nconst crypt = require('../kripto');\r\nconst { sendObavijestLinkMail } = require('../mail/mail.js');\r\nconst { forkJoin, from, first } = require('rxjs');\r\nconst { send } = require('process');\r\n\r\nconst PkVrstaClanstvaForAnonymous = 4;\r\nconst modulName = 'Obavijesti';\r\n\r\n// router.use(dbResolveMiddleware);\r\n// select\r\nrouter.get('/obavijest', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Alumni].spObavijest_Select', conn, res);\r\n\trequest.addParameter('PkObavijest', TYPES.Int, req.query.PkObavijest);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/obavijestCategoryGroup', async function (req, res, next) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\ttry {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spObavijestKategorijaJoined_Select]', conn, res);\r\n\t\trequest.addParameter('skip', TYPES.Int, req.query.skip);\r\n\t\trequest.addParameter('take', TYPES.Int, req.query.take);\r\n\t\trequest.addParameter('PkViewUsera', TYPES.Int, decryptIfEncrypted(user.PkUsera));\r\n\t\trequest.addParameter('PkVrstaClanstva', TYPES.Int, exists(user.PkVrstaClanstva) ? user.PkVrstaClanstva : PkVrstaClanstvaForAnonymous);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tsimpleDbResolve(output, outputParams, result, res);\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tnext(error);\r\n\t}\r\n});\r\n\r\nrouter.get('/obavijestForCategoryFTS', async function (req, res, next) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\ttry {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spObavijest_FTSSelect]', conn, res);\r\n\t\trequest.addParameter('skip', TYPES.Int, req.query.skip);\r\n\t\trequest.addParameter('take', TYPES.Int, req.query.take);\r\n\t\trequest.addParameter('Search', TYPES.NVarChar, req.query.search);\r\n\t\trequest.addParameter('PkObavijestKategorija', TYPES.NVarChar, req.query.PkObavijestKategorija);\r\n\t\trequest.addParameter('PkUsera', TYPES.Int, exists(req.query.PkUsera) ? req.query.PkUsera : null);\r\n\t\trequest.addParameter('PkViewUsera', TYPES.Int, decryptIfEncrypted(user.PkUsera));\r\n\t\t//Ukoliko PkUsera postoji to znaci da smo usli u moje obavijesti, stoga ne saljemo PkVrstaClanstva\r\n\t\tif (!req.query.PkUsera) {\r\n\t\t\trequest.addParameter('PkVrstaClanstva', TYPES.Int, exists(user.PkVrstaClanstva) ? user.PkVrstaClanstva : PkVrstaClanstvaForAnonymous);\r\n\t\t}\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tsimpleDbResolve(output, outputParams, result, res);\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tif (global.appConfig.ukljuciConsoleLog.ukljuciStackTrace) console.trace('obavijestForCategoryFTS', error);\r\n\t\tnext(error);\r\n\t}\r\n});\r\n\r\nrouter.put('/obavijestStatus', async function (req, res, next) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\ttry {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spObavijestStatus_Update]', conn, res);\r\n\t\trequest.addParameter('UserZadnjePromjene', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addParameter('Status', TYPES.Int, req.body.Status);\r\n\t\trequest.addParameter('PkObavijest', TYPES.Int, req.body.PkObavijest);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tsimpleDbResolve(output, outputParams, result, res);\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tif (global.appConfig.ukljuciConsoleLog.ukljuciStackTrace) console.trace('obavijestStatus', error);\r\n\t\tnext(error);\r\n\t}\r\n});\r\n\r\n// insert\r\nrouter.post('/obavijest', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Dodavanje' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Alumni].spObavijest_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Naslov', TYPES.NVarChar, req.body.Naslov);\r\n\t\trequest.addParameter('CoverImagePath', TYPES.NVarChar, req.body.CoverImagePath);\r\n\t\trequest.addParameter('Html', TYPES.NVarChar, req.body.Html);\r\n\t\trequest.addParameter('DatumObjave', TYPES.Date, req.body.DatumObjave);\r\n\t\treq.body.DatumIskljucenjaObavijest && request.addParameter('DatumIskljucenjaObavijest', TYPES.Date, req.body.DatumIskljucenjaObavijest);\r\n\t\trequest.addParameter('UserUnos', TYPES.NVarChar, req.body.UserUnos ? req.body.UserUnos : user.ImePrezimeUsera);\r\n\t\trequest.addParameter('UserZadnjePromjene', TYPES.NVarChar, req.body.UserZadnjePromjene ? req.body.UserZadnjePromjene : user.ImePrezimeUsera);\r\n\t\trequest.addParameter('Status', TYPES.Int, req.body.Status);\r\n\t\trequest.addParameter('Tags', TYPES.NVarChar, req.body.Tags);\r\n\t\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera ? req.body.PkUsera : user.PkUsera);\r\n\t\trequest.addParameter('PkObavijestKategorija', TYPES.Int, req.body.PkObavijestKategorija);\r\n\r\n\t\trequest.addOutputParameter('PkObavijest', TYPES.Int, null);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tconst { PkObavijest } = outputParams;\r\n\t\t\t\tres.status(200).send({ PkObavijest });\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\n// update\r\nrouter.put('/obavijest', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Dodavanje' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Alumni].spObavijest_Update', conn, res);\r\n\t\trequest.addParameter('PkObavijest', TYPES.Int, req.body.PkObavijest);\r\n\t\trequest.addParameter('Naslov', TYPES.NVarChar, req.body.Naslov);\r\n\t\trequest.addParameter('CoverImagePath', TYPES.NVarChar, req.body.CoverImagePath);\r\n\t\trequest.addParameter('Html', TYPES.NVarChar, req.body.Html);\r\n\t\trequest.addParameter('DatumObjave', TYPES.Date, req.body.DatumObjave);\r\n\t\treq.body.DatumIskljucenjaObavijest && request.addParameter('DatumIskljucenjaObavijest', TYPES.Date, req.body.DatumIskljucenjaObavijest);\r\n\t\trequest.addParameter('DatumUnosa', TYPES.DateTime, req.body.DatumUnosa);\r\n\t\trequest.addParameter('UserUnos', TYPES.NVarChar, req.body.UserUnos);\r\n\t\trequest.addParameter('Tags', TYPES.NVarChar, req.body.Tags);\r\n\t\trequest.addParameter('UserZadnjePromjene', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addParameter('Status', TYPES.Int, req.body.Status);\r\n\t\trequest.addParameter('PkObavijestKategorija', TYPES.Int, req.body.PkObavijestKategorija);\r\n\t\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\n// delete\r\nrouter.delete('/obavijest', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Dodavanje' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Alumni].spObavijest_Delete', conn, res);\r\n\r\n\t\ttry {\r\n\t\t\tconst savePath = constructDirDepth(['public', 'obavijesti', req.query.PkObavijest + '/']);\r\n\t\t\tconst files = fs.readdirSync(savePath);\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfs.unlinkSync(path.join(savePath, file));\r\n\t\t\t}\r\n\t\t\tfs.rmdirSync(savePath);\r\n\r\n\t\t\trequest.addParameter('PkObavijest', TYPES.Int, req.query.PkObavijest);\r\n\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t\t} catch (error) {\r\n\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n});\r\n\r\n// select\r\nrouter.get('/obavijestiKategorija', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Alumni].spObavijestKategorija_Select', conn, res);\r\n\r\n\trequest.addParameter('PkObavijestKategorija', TYPES.Int, req.query.PkObavijestKategorija);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/obavijestiKategorijaAll', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Alumni].spObavijestKategorijaAll_Select', conn, res);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/obavijestForCategory', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\tif (req.query.PkObavijestKategorija) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Alumni].obavijestForCategory_Select', conn, res);\r\n\t\trequest.addParameter('skip', TYPES.Int, req.query.skip);\r\n\t\trequest.addParameter('take', TYPES.Int, req.query.take);\r\n\t\trequest.addParameter('PkObavijestKategorija', TYPES.Int, req.query.PkObavijestKategorija);\r\n\t\trequest.addParameter('PkUsera', TYPES.Int, exists(req.query.PkUsera) ? req.query.PkUsera : null);\r\n\t\trequest.addParameter('PkViewUsera', TYPES.Int, decryptIfEncrypted(user.PkUsera));\r\n\t\t//Ukoliko PkUsera postoji to znaci da smo usli u moje obavijesti, stoga ne saljemo PkVrstaClanstva\r\n\t\tif (!req.query.PkUsera) {\r\n\t\t\trequest.addParameter('PkVrstaClanstva', TYPES.Int, exists(user.PkVrstaClanstva) ? user.PkVrstaClanstva : PkVrstaClanstvaForAnonymous);\r\n\t\t}\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\treturn res.status(200).send([]);\r\n\t}\r\n});\r\n\r\n// insert\r\nrouter.post('/obavijestiKategorija', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Alumni].spObavijestKategorija_Insert', conn, res);\r\n\r\n\trequest.addParameter('NazivKategorije', TYPES.NVarChar, req.body.NazivKategorije);\r\n\trequest.addParameter('UserUnos', TYPES.NVarChar, req.body.UserUnos);\r\n\trequest.addParameter('DatumUnosa', TYPES.DateTime, req.body.DatumUnosa);\r\n\trequest.addParameter('AktivnaDaNe', TYPES.Int, req.body.AktivnaDaNe);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\n// update\r\nrouter.put('/obavijestiKategorija', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Alumni].spObavijestKategorija_Update', conn, res);\r\n\r\n\trequest.addParameter('NazivKategorije', TYPES.NVarChar, req.body.NazivKategorije);\r\n\trequest.addParameter('UserUnos', TYPES.NVarChar, req.body.UserUnos);\r\n\trequest.addParameter('DatumUnosa', TYPES.DateTime, req.body.DatumUnosa);\r\n\trequest.addParameter('AktivnaDaNe', TYPES.Int, req.body.AktivnaDaNe);\r\n\trequest.addParameter('PkObavijestKategorija', TYPES.Int, req.body.PkObavijestKategorija);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\n// delete\r\nrouter.delete('/obavijestiKategorija', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Alumni].spObavijestKategorija_Delete', conn, res);\r\n\trequest.addParameter('PkObavijestKategorija', TYPES.Int, req.query.PkObavijestKategorija);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.post('/uploadCoverImage', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst form = new formidable.IncomingForm();\r\n\tconst pathParts = ['uploads', 'tempFiles', 'obavijesti'];\r\n\r\n\tconst tempPath = constructDirDepth(pathParts);\r\n\r\n\tform.uploadDir = tempPath;\r\n\tform.keepExtensions = true;\r\n\ttry {\r\n\t\tform.parse(req, function (err, fields, { file }) {\r\n\t\t\ttry {\r\n\t\t\t\tconst savePath = constructDirDepth(['public', 'obavijesti', fields.PkObavijest + '/']);\r\n\t\t\t\tconst id = uuid();\r\n\t\t\t\tconst files = fs.readdirSync(savePath);\r\n\t\t\t\tfor (const file of files) {\r\n\t\t\t\t\tfs.unlinkSync(path.join(savePath, file));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst dbSavePath = `obavijesti/${fields.PkObavijest}/${id}_${file.name}`;\r\n\t\t\t\tfs.renameSync(file.path, `${savePath}${id}_${file.name}`);\r\n\t\t\t\t// fs.removeSync(tempPath);\r\n\t\t\t\t// return res.status(200).send();\r\n\t\t\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\t\t\tconst request = db.createRequest('[Alumni].spObavijestImage_Update', conn, res);\r\n\r\n\t\t\t\trequest.addParameter('PkObavijest', TYPES.Int, fields.PkObavijest);\r\n\t\t\t\trequest.addParameter('CoverImagePath', TYPES.NVarChar, dbSavePath);\r\n\t\t\t\trequest.addParameter('UserZadnjePromjene', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\r\n\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t\t\t} catch (error) {\r\n\t\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\t\t\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t}\r\n});\r\n\r\n// insert\r\nrouter.post('/vidljivostObavijestiVrstaClanstva', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spVidljivostObavijestiVrstaClanstva_Insert', conn, res);\r\n\r\n\trequest.addParameter('PkObavijest', TYPES.Int, req.body.PkObavijest);\r\n\trequest.addParameter('PkVrstaClanstva', TYPES.Int, req.body.PkVrstaClanstva);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\n//Slanje maila\r\nrouter.post('/sendObavijestLinkMail', function (req, res) {\r\n\tconst { PkObavijest, Clanstva } = req.body;\r\n\r\n\tconst fetchUsersForEmailSend = ({ PkVrstaClanstva }) => {\r\n\t\tconst { request, conn } = constructConnection('Alumni.spUsersForObavijestSend', res.locals.currDatabase, res, db);\r\n\r\n\t\trequest.addParameter('PkClanstvo', TYPES.Int, PkVrstaClanstva);\r\n\r\n\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t};\r\n\r\n\tforkJoin(Clanstva.map((PkVrstaClanstva) => fetchUsersForEmailSend({ PkVrstaClanstva })))\r\n\t\t.pipe(first())\r\n\t\t.subscribe((clanstva) => {\r\n\t\t\tif (clanstva) {\r\n\t\t\t\tconst sendEmails = (u) => {\r\n\t\t\t\t\treturn from(sendObavijestLinkMail({ user: u, lang: res.locals.language, PkObavijest: PkObavijest }));\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst users = flatten(clanstva);\r\n\r\n\t\t\t\tforkJoin(users.map((u) => sendEmails(u)))\r\n\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t.subscribe({\r\n\t\t\t\t\t\tnext: (onSend) => {\r\n\t\t\t\t\t\t\tres.send(onSend);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: (err) => {\r\n\t\t\t\t\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(err);\r\n\r\n\t\t\t\t\t\t\tres.status(500).send(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tres.send();\r\n\t\t\t}\r\n\t\t});\r\n});\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst { TYPES } = require('tedious');\r\nconst db = require('../db.js');\r\nconst { simpleDbResolve, handleRequestUser } = require('../services/app.service');\r\n\r\nrouter.get('/check', async function (req, res) {\r\n    const user = await handleRequestUser(req, res);\r\n\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spCheckUserPretplata', conn, res);\r\n\t\r\n    request.addParameter('Modul', TYPES.NVarChar, req.query.modul);\r\n\trequest.addParameter('Segment', TYPES.NVarChar, req.query.segment);\r\n    request.addParameter('PkUsera', TYPES.Int, user.PkUsera);\r\n\trequest.addParameter('Pk', TYPES.Int, req.query.pk);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\n//ruta je prazna jer je definirano app.use('/api/pretplata', require('./api/pretplate').pretplateRouter);\r\n//stoga get req na /api/pretplata ulazi u ovaj api\r\nrouter.get('', async function (req, res) {\r\n    const user = await handleRequestUser(req, res);\r\n\tif (!user) return res.status(500).json({success: false, error: 'There is no logged in user!'});\r\n\t\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spPretplate_Select', conn, res);\r\n\t\r\n    request.addParameter('PkUsera', TYPES.Int, user.PkUsera);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\n//ruta je prazna jer je definirano app.use('/api/pretplata', require('./api/pretplate').pretplateRouter);\r\n//stoga post req na /api/pretplata uazi u ovaj api\r\nrouter.post('', async function (req, res) {\r\n    const user = await handleRequestUser(req, res);\r\n\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spPretplate_Insert', conn, res);\r\n\t\r\n    request.addParameter('Modul', TYPES.NVarChar, req.body.modul);\r\n\trequest.addParameter('Segment', TYPES.NVarChar, req.body.segment);\r\n    request.addParameter('PkUsera', TYPES.Int, user.PkUsera);\r\n\trequest.addParameter('Pk', TYPES.Int, req.body.pk);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\n//ruta je prazna jer je definirano app.use('/api/pretplata', require('./api/pretplate').pretplateRouter);\r\n//stoga delete req na /api/pretplata uazi u ovaj api\r\nrouter.delete('', async function (req, res) {\r\n    const user = await handleRequestUser(req, res);\r\n\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spPretplate_Delete', conn, res);\r\n\t\r\n    request.addParameter('PkPretplate', TYPES.Int, req.query.PkPretplate);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/pretplataData', async function (req, res) {\r\n    const user = await handleRequestUser(req, res);\r\n\tif (!user) return res.status(500).send({success: false, message: 'There is no logged in user!'});\r\n\t\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tlet request = null;\r\n\r\n\tswitch((req.query.Modul + '_' + req.query.Segment).toUpperCase()) {\r\n\t\tcase 'FORUM_KATEGORIJA':\r\n\t\t\trequest = db.createRequest('Alumni.spPretplateForumKategorija_Select', conn, res);\r\n\t\r\n\t\t\trequest.addParameter('PkKategorija', TYPES.Int, req.query.Pk);\r\n\t\t\trequest.addParameter('DatumZadnjeProvjere', TYPES.NVarChar, req.query.DatumZadnjeProvjere);\r\n\r\n\t\t\tbreak;\r\n\t\tcase 'E-BIBLIOTEKA_KATEGORIJA':\r\n\t\t\trequest = db.createRequest('Alumni.spPretplateResursiKategorija_Select', conn, res);\r\n\t\r\n\t\t\trequest.addParameter('PkResursKategorija', TYPES.Int, req.query.Pk);\r\n\t\t\trequest.addParameter('DatumZadnjeProvjere', TYPES.NVarChar, req.query.DatumZadnjeProvjere);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tres.status(400).send({success: false, message: 'Bad request!'});\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.put('/datumZadnjeProvjere', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spPretplate_UpdateDatumZadnjeProvjere', conn, res);\r\n\r\n\trequest.addParameter('PkPretplate', TYPES.Int, req.body.PkPretplate);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\r\n});\r\nmodule.exports = { pretplateRouter: router };\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst { TYPES } = require('tedious');\r\nconst db = require('../db.js');\r\nconst { simpleDbResolve, handleRequestUser, exists, groupDataByKeySync, constructDirDepth, decryptIfEncrypted, groupFlatProperies, devLogger } = require('../services/app.service');\r\nconst formidable = require('formidable');\r\nconst path = require('path');\r\nconst fs = require('fs-extra');\r\nconst { uuid } = require('uuidv4');\r\nconst crypt = require('../kripto');\r\nconst { createUpsertOsobniPodaciRequest, createDatotekaInsertRequest, createDatotekaRelacijaRequest, fetchDatotekaInfo, deletePrilog } = require('../services/profile.service.js');\r\nconst { checkFileExists, removeDiacritics } = require('../tools');\r\n\r\nrouter.get('/profile', function (req, res) {\r\n\tif (!(req.query && req.query.PkUsera)) {\r\n\t\treturn res.status(500).send({ message: null });\r\n\t}\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.[spOsobniPodaciSvi]', conn, res);\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.query.PkUsera);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\tconst grouped = result.reduce((acc, curr) => {\r\n\t\t\t\tconst { PkUsera, LDAPLoginName, PrivatnostPodataka, AvatarPath, VrstaClanstvaNaziv, PkVrstaClanstva, Email, ImePrezimeUsera, ImeUsera, PrezimeUsera, LoginName, StatusKorisnika, UserAktivanDaNe, PkOsobniPodaciPkUsera, Spol, DatumRodenja, OIB, JMBAG, Mobitel, PkDrzava, Grad, Adresa, IDDrzaveNN, NazivDrzave, ...rest } = curr;\r\n\t\t\t\tconst osobniPodaci = { PkUsera, LDAPLoginName, PrivatnostPodataka, AvatarPath, VrstaClanstvaNaziv, PkVrstaClanstva, Email, ImePrezimeUsera, ImeUsera, PrezimeUsera, LoginName, StatusKorisnika, UserAktivanDaNe, PkOsobniPodaciPkUsera, Spol, DatumRodenja, OIB, JMBAG, Mobitel, PkDrzava, Grad, Adresa, IDDrzaveNN, NazivDrzave };\r\n\t\t\t\tif (!acc.osobniPodaci) {\r\n\t\t\t\t\tacc.osobniPodaci = osobniPodaci;\r\n\t\t\t\t}\r\n\t\t\t\tif (!acc.profile) {\r\n\t\t\t\t\tacc.profile = [rest];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tacc.profile = [...acc.profile, rest];\r\n\t\t\t\t}\r\n\t\t\t\treturn acc;\r\n\t\t\t}, {});\r\n\t\t\tif (grouped.profile) {\r\n\t\t\t\tgrouped.profile = groupDataByKeySync(grouped.profile, 'PkOsobniPodaciVrsta');\r\n\t\t\t}\r\n\t\t\treturn res.status(200).send(grouped);\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: null });\r\n\t});\r\n});\r\n\r\nrouter.post('/upsertOsobniPodaci', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\tconst { request, conn } = createUpsertOsobniPodaciRequest(req, res);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.put('/profile', function (req, res) {\r\n\treturn res.status(500).send({ message: \"Implement me: router.put('/profile')\" });\r\n\t//\r\n\t// const conn = db.createConnection(res.locals.currDatabase);\r\n\t// const request = db.createRequest('Alumni.[spOsobniPodaciSvi]', conn, res);\r\n\t// request.addParameter('PkUsera', TYPES.Int, req.query.PkUsera);\r\n\t//\r\n\t// db.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.delete('/profile', function (req, res) {\r\n\treturn res.status(500).send({ message: \"Implement me: router.delete('/profile')\" });\r\n\t//\r\n\t// const conn = db.createConnection(res.locals.currDatabase);\r\n\t// const request = db.createRequest('Alumni.[spOsobniPodaciSvi]', conn, res);\r\n\t// request.addParameter('PkUsera', TYPES.Int, req.query.PkUsera);\r\n\t//\r\n\t// db.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/osobniPodaciVrste', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[AP].[spOsobniPodaciVrsta_Select]', conn, res);\r\n\trequest.addParameter('PkOsobniPodaciVrsta', TYPES.Int, req.query.PkOsobniPodaciVrsta);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/getDrzave', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[AP].[spDrzave_Select]', conn, res);\r\n\trequest.addParameter('PkDrzava', TYPES.Int, req.query.PkDrzava);\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/profileVrsta', (req, res) => {\r\n\tconst { PkOsobniPodaciObrazovanjeRadnoIskustvo, PkOsobniPodaciKompetencijaNapredovanje } = req.query;\r\n\tif (PkOsobniPodaciObrazovanjeRadnoIskustvo) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spOsobniPodaciObrazovanjeRadnoIskustvo_select]', conn, res);\r\n\t\trequest.addParameter('PkOsobniPodaciObrazovanjeRadnoIskustvo', TYPES.Int, PkOsobniPodaciObrazovanjeRadnoIskustvo);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else if (PkOsobniPodaciKompetencijaNapredovanje) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spOsobniPodaciKompetencijaNapredovanje_select]', conn, res);\r\n\t\trequest.addParameter('PkOsobniPodaciKompetencijaNapredovanje', TYPES.Int, PkOsobniPodaciKompetencijaNapredovanje);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t}\r\n});\r\n\r\nrouter.post('/profileVrsta', async function (req, res) {\r\n\tconst { PkOsobniPodaciVrsta } = req.body;\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst handleObrazovanjeIliIskustvo = () => {\r\n\t\tconst { Opis, PeriodDo, PeriodOd, PkOsobniPodaciPkUsera, StupanjObrazovanjaIliZanimanje, UstanovaIMjesto, OsobniPodaciVrstaNaziv, PkOsobniPodaciObrazovanjeRadnoIskustvo } = req.body;\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spOsobniPodaciObrazovanjeRadnoIskustvo_insert]', conn, res);\r\n\t\trequest.addParameter('UstanovaIMjesto', TYPES.NVarChar, UstanovaIMjesto);\r\n\t\trequest.addParameter('StupanjObrazovanjaIliZanimanje', TYPES.NVarChar, StupanjObrazovanjaIliZanimanje);\r\n\t\trequest.addParameter('PeriodOd', TYPES.Date, PeriodOd);\r\n\t\trequest.addParameter('PeriodDo', TYPES.Date, PeriodDo);\r\n\t\trequest.addParameter('Opis', TYPES.NVarChar, Opis);\r\n\t\trequest.addParameter('PkOsobniPodaciVrsta', TYPES.Int, PkOsobniPodaciVrsta);\r\n\t\trequest.addParameter('PkOsobniPodaciPkUsera', TYPES.Int, PkOsobniPodaciPkUsera);\r\n\t\trequest.addParameter('UserZadnjePromjene', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addOutputParameter('PkOsobniPodaciObrazovanjeRadnoIskustvo', TYPES.Int, null);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tconst { PkOsobniPodaciObrazovanjeRadnoIskustvo } = outputParams;\r\n\t\t\t\tres.status(200).send({ PkOsobniPodaciObrazovanjeRadnoIskustvo });\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\tconst handleKompetencije = () => {\r\n\t\tconst { KompetencijaIliNapredovanje, Opis, OsobniPodaciVrstaNaziv, PkOsobniPodaciVrsta, PkOsobniPodaciKompetencijaNapredovanje, PkOsobniPodaciPkUsera } = req.body;\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spOsobniPodaciKompetencijaNapredovanje_insert]', conn, res);\r\n\r\n\t\trequest.addParameter('KompetencijaIliNapredovanje', TYPES.NVarChar, KompetencijaIliNapredovanje);\r\n\t\trequest.addParameter('Opis', TYPES.NVarChar, Opis);\r\n\t\trequest.addParameter('PkOsobniPodaciVrsta', TYPES.Int, PkOsobniPodaciVrsta);\r\n\t\trequest.addParameter('PkOsobniPodaciPkUsera', TYPES.Int, PkOsobniPodaciPkUsera);\r\n\t\trequest.addParameter('UserZadnjePromjene', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addOutputParameter('PkOsobniPodaciKompetencijaNapredovanje', TYPES.Int, null);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tconst { PkOsobniPodaciKompetencijaNapredovanje } = outputParams;\r\n\r\n\t\t\t\tres.status(200).send({ PkOsobniPodaciKompetencijaNapredovanje });\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tif (PkOsobniPodaciVrsta) {\r\n\t\tswitch (PkOsobniPodaciVrsta) {\r\n\t\t\tcase 1: // \"OBRAZOVANJE\"\r\n\t\t\t\thandleObrazovanjeIliIskustvo();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // \"RADNO_ISKUSTVO\"\r\n\t\t\t\thandleObrazovanjeIliIskustvo();\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3: // \"KOMPETENCIJE\"\r\n\t\t\t\thandleKompetencije();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4: // \"OSTALA_NAPREDOVANJA\"\r\n\t\t\t\thandleKompetencije();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5: // \"OSTALA_ZNANSTVENA_NAPREDOVANJA\"\r\n\t\t\t\thandleKompetencije();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t}\r\n});\r\n\r\nrouter.put('/profileVrsta', async function (req, res) {\r\n\tconst { PkOsobniPodaciVrsta } = req.body;\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst handleObrazovanjeIliIskustvo = () => {\r\n\t\tconst { Opis, PeriodDo, PeriodOd, PkOsobniPodaciPkUsera, StupanjObrazovanjaIliZanimanje, UstanovaIMjesto, OsobniPodaciVrstaNaziv, PkOsobniPodaciObrazovanjeRadnoIskustvo } = req.body;\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spOsobniPodaciObrazovanjeRadnoIskustvo_update]', conn, res);\r\n\t\trequest.addParameter('UstanovaIMjesto', TYPES.NVarChar, UstanovaIMjesto);\r\n\t\trequest.addParameter('StupanjObrazovanjaIliZanimanje', TYPES.NVarChar, StupanjObrazovanjaIliZanimanje);\r\n\t\trequest.addParameter('PeriodOd', TYPES.Date, PeriodOd);\r\n\t\trequest.addParameter('PeriodDo', TYPES.Date, PeriodDo);\r\n\t\trequest.addParameter('Opis', TYPES.NVarChar, Opis);\r\n\t\trequest.addParameter('PkOsobniPodaciVrsta', TYPES.Int, PkOsobniPodaciVrsta);\r\n\t\trequest.addParameter('PkOsobniPodaciPkUsera', TYPES.Int, PkOsobniPodaciPkUsera);\r\n\t\trequest.addParameter('UserZadnjePromjene', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addParameter('PkOsobniPodaciObrazovanjeRadnoIskustvo', TYPES.Int, PkOsobniPodaciObrazovanjeRadnoIskustvo);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tres.status(200).send({ PkOsobniPodaciObrazovanjeRadnoIskustvo });\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleKompetencije = () => {\r\n\t\tconst { KompetencijaIliNapredovanje, Opis, OsobniPodaciVrstaNaziv, PkOsobniPodaciVrsta, PkOsobniPodaciKompetencijaNapredovanje, PkOsobniPodaciPkUsera } = req.body;\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spOsobniPodaciKompetencijaNapredovanje_update]', conn, res);\r\n\r\n\t\trequest.addParameter('PkOsobniPodaciKompetencijaNapredovanje', TYPES.Int, PkOsobniPodaciKompetencijaNapredovanje);\r\n\t\trequest.addParameter('KompetencijaIliNapredovanje', TYPES.NVarChar, KompetencijaIliNapredovanje);\r\n\t\trequest.addParameter('Opis', TYPES.NVarChar, Opis);\r\n\t\trequest.addParameter('PkOsobniPodaciVrsta', TYPES.Int, PkOsobniPodaciVrsta);\r\n\t\trequest.addParameter('PkOsobniPodaciPkUsera', TYPES.Int, PkOsobniPodaciPkUsera);\r\n\t\trequest.addParameter('UserZadnjePromjene', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tres.status(200).send({ PkOsobniPodaciKompetencijaNapredovanje });\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tif (PkOsobniPodaciVrsta) {\r\n\t\tswitch (PkOsobniPodaciVrsta) {\r\n\t\t\tcase 1: // \"OBRAZOVANJE\"\r\n\t\t\t\thandleObrazovanjeIliIskustvo();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // \"RADNO_ISKUSTVO\"\r\n\t\t\t\thandleObrazovanjeIliIskustvo();\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3: // \"KOMPETENCIJE\"\r\n\t\t\t\thandleKompetencije();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4: // \"OSTALA_NAPREDOVANJA\"\r\n\t\t\t\thandleKompetencije();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5: // \"OSTALA_ZNANSTVENA_NAPREDOVANJA\"\r\n\t\t\t\thandleKompetencije();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t}\r\n});\r\n\r\nrouter.delete('/profileVrsta', function (req, res) {\r\n\tconst { PkOsobniPodaciKompetencijaNapredovanje, PkOsobniPodaciObrazovanjeRadnoIskustvo } = req.query;\r\n\tif (exists(PkOsobniPodaciKompetencijaNapredovanje)) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spOsobniPodaciKompetencijaNapredovanje_delete]', conn, res);\r\n\t\trequest.addParameter('PkOsobniPodaciKompetencijaNapredovanje', TYPES.Int, PkOsobniPodaciKompetencijaNapredovanje);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else if (exists(PkOsobniPodaciObrazovanjeRadnoIskustvo)) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.[spOsobniPodaciObrazovanjeRadnoIskustvo_delete]', conn, res);\r\n\t\trequest.addParameter('PkOsobniPodaciObrazovanjeRadnoIskustvo', TYPES.Int, PkOsobniPodaciObrazovanjeRadnoIskustvo);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t}\r\n});\r\n\r\nrouter.post('/uploadCoverImage', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst form = new formidable.IncomingForm();\r\n\tconst pathParts = ['uploads', 'tempFiles', 'korisnici', 'avatar'];\r\n\r\n\tconst tempPath = constructDirDepth(pathParts);\r\n\r\n\tform.uploadDir = tempPath;\r\n\tform.keepExtensions = true;\r\n\ttry {\r\n\t\tform.parse(req, function (err, fields, { file }) {\r\n\t\t\ttry {\r\n\t\t\t\tconst savePath = constructDirDepth(['public', 'korisnici', fields.PkOsobniPodaciPkUsera, 'avatar/']);\r\n\t\t\t\tconst id = uuid();\r\n\t\t\t\tconst files = fs.readdirSync(savePath);\r\n\t\t\t\tfor (const file of files) {\r\n\t\t\t\t\tfs.unlinkSync(path.join(savePath, file));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst dbSavePath = `korisnici/${fields.PkOsobniPodaciPkUsera}/avatar/${id}_${file.name}`;\r\n\t\t\t\tfs.renameSync(file.path, `${savePath}${id}_${file.name}`);\r\n\t\t\t\t// fs.removeSync(tempPath);\r\n\t\t\t\t// return res.status(200).send();\r\n\t\t\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\t\t\tconst request = db.createRequest('[Alumni].[spOsobniPodaciAvatar_update]', conn, res);\r\n\t\t\t\trequest.addParameter('PkOsobniPodaciPkUsera', TYPES.Int, decryptIfEncrypted(fields.PkOsobniPodaciPkUsera));\r\n\t\t\t\trequest.addParameter('AvatarPath', TYPES.NVarChar, dbSavePath);\r\n\r\n\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t\t\t} catch (error) {\r\n\t\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\r\n\t\t\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\r\n\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t}\r\n});\r\n\r\nrouter.get('/attachments', function (req, res) {\r\n\tconst { PkOsobniPodaciPkUsera } = req.query;\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.[spOsobniPodaciPrilozi_select]', conn, res);\r\n\trequest.addParameter('PkOsobniPodaciPkUsera', TYPES.Int, PkOsobniPodaciPkUsera);\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\tconst prilozi = result.map((r) => groupFlatProperies(r));\r\n\t\t\treturn res.status(200).send(prilozi);\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t});\r\n});\r\n\r\nrouter.get('/uploadedFile', function (req, res) {\r\n\tconst { file } = req.query;\r\n\tconst filePath = path.join(global.appConfig.directoryParams.uploadPath, file);\r\n\r\n\tif (fs.existsSync(filePath)) {\r\n\t\tres.status(200).sendFile(filePath);\r\n\t} else {\r\n\t\tres.status(400).send('STD:INVALID_REQUEST');\r\n\t}\r\n});\r\n\r\nrouter.post('/attachment', async function (req, res) {\r\n\tconst user = await handleRequestUser(req, res);\r\n\r\n\tconst form = new formidable.IncomingForm();\r\n\tconst pathParts = ['uploads', 'tempFiles', 'korisnici', 'attachment'];\r\n\r\n\tconst tempPath = constructDirDepth(pathParts);\r\n\r\n\tform.uploadDir = tempPath;\r\n\tform.keepExtensions = true;\r\n\ttry {\r\n\t\tform.parse(req, async function (err, fields, { CoverImage, file }) {\r\n\t\t\ttry {\r\n\t\t\t\tconst { Naziv, Opis, PkOsobniPodaciPkUsera } = fields;\r\n\t\t\t\tconst id = uuid();\r\n\t\t\t\tconst savePath = constructDirDepth(['uploads', 'korisnici', PkOsobniPodaciPkUsera, 'attachments', `${id}/`]);\r\n\t\t\t\t// const files = fs.readdirSync(savePath);\r\n\t\t\t\t// for (const file of files) {\r\n\t\t\t\t// \tfs.unlinkSync(path.join(savePath, file));\r\n\t\t\t\t// }\r\n\t\t\t\tconst dbSavePathRoot = `korisnici/${PkOsobniPodaciPkUsera}/attachments/${id}/`;\r\n\t\t\t\tconst dbSavePathcoverImage = CoverImage ? `korisnici/${PkOsobniPodaciPkUsera}/attachments/${id}/${id}_${CoverImage.name}` : null; // not required field!\r\n\t\t\t\tconst dbSavePathAttachment = `korisnici/${PkOsobniPodaciPkUsera}/attachments/${id}/${id}_${file.name}`;\r\n\t\t\t\tif (CoverImage) fs.renameSync(CoverImage.path, `${savePath}${id}_${CoverImage.name}`);\r\n\t\t\t\tfs.renameSync(file.path, `${savePath}${id}_${file.name}`);\r\n\r\n\t\t\t\tfs.removeSync(tempPath);\r\n\r\n\t\t\t\tconst uploadFile = ({ dbPath, dbSavePathRoot, user, filename, file, Naziv, Opis, PkOsobniPodaciPkUsera }) =>\r\n\t\t\t\t\tnew Promise((resolve) => {\r\n\t\t\t\t\t\tconst { size, path, name, type, hash, lastModifiedDate } = file;\r\n\t\t\t\t\t\tconst { conn, request } = createDatotekaInsertRequest(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tNaziv,\r\n\t\t\t\t\t\t\t\tOpis,\r\n\t\t\t\t\t\t\t\tPkDatoteka: null,\r\n\t\t\t\t\t\t\t\tPkUseraPromjena: user.PkUsera,\r\n\t\t\t\t\t\t\t\tPkUseraUnos: user.PkUsera,\r\n\t\t\t\t\t\t\t\tUserPromjena: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\tUserUnos: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\tdestination: dbSavePathRoot,\r\n\t\t\t\t\t\t\t\tencoding: null,\r\n\t\t\t\t\t\t\t\tfilename,\r\n\t\t\t\t\t\t\t\tmimetype: type,\r\n\t\t\t\t\t\t\t\toriginalname: name,\r\n\t\t\t\t\t\t\t\tpath: dbPath, //dbSavePathcoverImage,\r\n\t\t\t\t\t\t\t\tsize: size\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\t\t\t\tconst { PkDatoteka } = outputParams;\r\n\t\t\t\t\t\t\t\tresolve({ PkDatoteka });\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tlet PkDatotekaCoverImage = null;\r\n\t\t\t\tif (CoverImage) {\r\n\t\t\t\t\tconst { PkDatoteka: insertedPkCover } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathcoverImage, filename: `${id}_${CoverImage.name}`, dbSavePathRoot, user, file: CoverImage });\r\n\t\t\t\t\tPkDatotekaCoverImage = exists(insertedPkCover) ? insertedPkCover : null;\r\n\t\t\t\t}\r\n\t\t\t\tconst { PkDatoteka } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathAttachment, filename: `${id}_${file.name}`, dbSavePathRoot, user, file });\r\n\r\n\t\t\t\tconst { conn, request } = createDatotekaRelacijaRequest(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tPkForumObjava: null,\r\n\t\t\t\t\t\tPkResursObjava: null,\r\n\t\t\t\t\t\tPkDatoteka,\r\n\t\t\t\t\t\tPkDatotekaCoverImage,\r\n\t\t\t\t\t\tPkUsera: decryptIfEncrypted(PkOsobniPodaciPkUsera)\r\n\t\t\t\t\t},\r\n\t\t\t\t\tres\r\n\t\t\t\t);\r\n\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t\t\t} catch (error) {\r\n\t\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\r\n\t\t\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\r\n\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t}\r\n});\r\n\r\nrouter.delete('/deletePrilog', async function (req, res) {\r\n\ttry {\r\n\t\tconst { PkDatoteka } = req.query;\r\n\t\tconst datotekaInfo = (await fetchDatotekaInfo({ PkDatoteka }, res)).map((item) => {\r\n\t\t\titem = groupFlatProperies(item);\r\n\t\t\titem.Datoteka.path = path.join(global.appConfig.directoryParams.uploadPath, item.Datoteka.path);\r\n\t\t\titem.Datoteka.destination = path.join(global.appConfig.directoryParams.uploadPath, item.Datoteka.destination);\r\n\t\t\treturn item;\r\n\t\t});\r\n\t\tdatotekaInfo.map(({ Datoteka }) => {\r\n\t\t\tif (fs.existsSync(Datoteka.path)) fs.removeSync(Datoteka.path);\r\n\t\t});\r\n\t\tconst [first] = datotekaInfo;\r\n\t\tif (fs.existsSync(first.Datoteka.destination)) fs.rmdirSync(first.Datoteka.destination);\r\n\r\n\t\tfor (const { Relacija } of datotekaInfo) {\r\n\t\t\tawait deletePrilog(Relacija, res);\r\n\t\t}\r\n\r\n\t\tres.status(200).send({ message: 'OK' });\r\n\t} catch (error) {\r\n\t\tres.status(500).send(error);\r\n\t}\r\n});\r\n\r\nrouter.put('/editPrilog', function (req, res) {\r\n\tconst { PkDatoteka, Naziv, Opis } = req.body;\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spDatoteka_update', conn, res);\r\n\trequest.addParameter('PkDatoteka', TYPES.Int, PkDatoteka);\r\n\trequest.addParameter('Naziv', TYPES.NVarChar, Naziv);\r\n\trequest.addParameter('Opis', TYPES.NVarChar, Opis);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/vrstaClanstva', function (req, res) {\r\n\tconst { PkVrstaClanstva } = req.query;\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spVrstaClanstva_Select', conn, res);\r\n\trequest.addParameter('PkVrstaClanstva', TYPES.Int, PkVrstaClanstva);\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/vrstaClanstvaAll', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spVrstaClanstva_SelectAll', conn, res);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/obavijestVidljivost', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spObavijestVidljivost_Select', conn, res);\r\n\r\n\trequest.addParameter('PkObavijest', TYPES.Int, req.query.PkObavijest);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/clanoviVrsta', function (req, res) {\r\n\tconst { PkVrstaClanstva, query, skip, take } = req.query;\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spClanovi_select', conn, res);\r\n\trequest.addParameter('PkVrstaClanstva', TYPES.Int, PkVrstaClanstva);\r\n\trequest.addParameter('skip', TYPES.Int, skip || 0);\r\n\trequest.addParameter('take', TYPES.Int, take || 6);\r\n\trequest.addParameter('Search', TYPES.NVarChar, query || null);\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\tconst mapped = result\r\n\t\t\t\t.map((r) => groupFlatProperies(r))\r\n\t\t\t\t.map((r) => {\r\n\t\t\t\t\tr.osobniPodaci.PkUsera = crypt.encryptString('' + r.osobniPodaci.PkUsera);\r\n\t\t\t\t\treturn r;\r\n\t\t\t\t});\r\n\t\t\tres.status(200).send(mapped);\r\n\t\t} else {\r\n\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t});\r\n});\r\n\r\nrouter.get('/clanoviDataForExcelExport', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.spClanoviDataForExcelExport_select', conn, res);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.post('/ProfileLog', async function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Logs.spLogOsobniPodaci_insert', conn, res);\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('Akcija', TYPES.NVarChar, req.body.Akcija);\r\n\trequest.addParameter('Podaci', TYPES.NVarChar, req.body.Podaci);\r\n\trequest.addParameter('PkUseraPristupio', TYPES.Int, decryptIfEncrypted(req.body.PkUseraPristupio));\r\n\t\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\tres.status(200).send();\r\n\t\t} else {\r\n\t\t\tres.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t});\r\n});\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst { TYPES } = require('tedious');\r\nconst db = require('../db.js');\r\nconst { simpleDbResolve, handleRequestUser, constructDirDepth, decryptIfEncrypted, exists, groupFlatProperies, groupDataByKeySync, hasClaim } = require('../services/app.service');\r\nconst formidable = require('formidable');\r\nconst path = require('path');\r\nconst fs = require('fs-extra');\r\nconst crypt = require('../kripto');\r\nconst { uuid } = require('uuidv4');\r\nconst { createDatotekaInsertRequest, createDatotekaRelacijaRequest } = require('../services/profile.service.js');\r\n\r\nconst modulName = 'eBiblioteka';\r\n\r\n//#region GET DATA\r\n//Ukoliko se ne posalje PkKategorija dohvacaju se sve kategorije NULTE razine\r\nrouter.get('/ResursiKategorije', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Resursi.spResursKategorija_Select', conn, res);\r\n\trequest.addParameter('PkResursKategorija', TYPES.Int, req.query.PkResursKategorija);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/ResursiPotkategorije', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Resursi.spResursPotKategorija_Select', conn, res);\r\n\trequest.addParameter('PkResursKategorija', TYPES.Int, req.query.PkResursKategorija);\r\n\treq.query.skip && request.addParameter('skip', TYPES.Int, req.query.skip);\r\n\treq.query.take && request.addParameter('take', TYPES.Int, req.query.take);\r\n\treq.query.query && request.addParameter('query', TYPES.NVarChar, req.query.query);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/ResursiKomentari', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Resursi.spResursKomentar_Select', conn, res);\r\n\trequest.addParameter('PkResursObjava', TYPES.Int, req.query.PkResursObjava);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\tresult = result.map((r) => {\r\n\t\t\t\tconst { groupId, PkObjavaOccurence } = r;\r\n\t\t\t\tObject.keys(r).forEach((k) => {\r\n\t\t\t\t\tif (k.includes(groupId)) {\r\n\t\t\t\t\t\tconst [first, last] = k.split(groupId);\r\n\t\t\t\t\t\tconst newKey = `${first}.${PkObjavaOccurence - 1}.${last}`;\r\n\t\t\t\t\t\tdelete Object.assign(r, { [newKey]: r[k] })[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn r;\r\n\t\t\t});\r\n\t\t\tconst pkGroup = groupDataByKeySync(result, 'PkResursKomentar');\r\n\t\t\tresult = Object.keys(pkGroup).map((key) => {\r\n\t\t\t\treturn { ...pkGroup[key].reduce((prev, curr) => ({ ...prev, ...curr }), {}) };\r\n\t\t\t});\r\n\r\n\t\t\tresult = result.map((r) => groupFlatProperies(r));\r\n\t\t\treturn res.status(200).send(result);\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t});\r\n});\r\n\r\nrouter.get('/ResursiKomentar', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Resursi.spResursKomentar_Select', conn, res);\r\n\trequest.addParameter('PkResursKomentar', TYPES.Int, req.query.PkResursKomentar);\r\n\trequest.addParameter('PkResursObjava', TYPES.Int, req.query.PkResursObjava);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\tresult = result.map((r) => {\r\n\t\t\t\tconst { groupId, PkObjavaOccurence } = r;\r\n\t\t\t\tObject.keys(r).forEach((k) => {\r\n\t\t\t\t\tif (k.includes(groupId)) {\r\n\t\t\t\t\t\tconst [first, last] = k.split(groupId);\r\n\t\t\t\t\t\tconst newKey = `${first}.${PkObjavaOccurence - 1}.${last}`;\r\n\t\t\t\t\t\tdelete Object.assign(r, { [newKey]: r[k] })[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn r;\r\n\t\t\t});\r\n\t\t\tconst pkGroup = groupDataByKeySync(result, 'PkResursKomentar');\r\n\t\t\tresult = Object.keys(pkGroup).map((key) => {\r\n\t\t\t\treturn { ...pkGroup[key].reduce((prev, curr) => ({ ...prev, ...curr }), {}) };\r\n\t\t\t});\r\n\r\n\t\t\tresult = result.map((r) => groupFlatProperies(r));\r\n\t\t\treturn res.status(200).send(result);\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t});\r\n});\r\n\r\nrouter.get('/ResursiObjave', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Resursi.spResursObjava_Select', conn, res);\r\n\treq.query.PkResursObjava && request.addParameter('PkResursObjava', TYPES.Int, req.query.PkResursObjava);\r\n\treq.query.PkResursKategorija && request.addParameter('PkResursKategorija', TYPES.Int, req.query.PkResursKategorija);\r\n\treq.query.skip && request.addParameter('skip', TYPES.Int, req.query.skip);\r\n\treq.query.take && request.addParameter('take', TYPES.Int, req.query.take);\r\n\treq.query.query && request.addParameter('query', TYPES.NVarChar, req.query.query);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n});\r\n\r\nrouter.get('/ResursiObjavaPrilozi', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Resursi.spResursObjavaPrilozi_select', conn, res);\r\n\treq.query.PkResursObjava && request.addParameter('PkResursObjava', TYPES.Int, req.query.PkResursObjava);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\tif (output == 'OK') {\r\n\t\t\treturn res.status(200).send(result.map((r) => groupFlatProperies(r)));\r\n\t\t}\r\n\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t});\r\n});\r\n//#endregion\r\n\r\n//#region INSERT DATA\r\nrouter.post('/ResursiKategorija', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Kategorija' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursKategorija_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Naziv', TYPES.NVarChar, req.body.Naziv);\r\n\t\trequest.addParameter('Opis', TYPES.NVarChar, req.body.Opis);\r\n\t\trequest.addParameter('UserUnos', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addParameter('PkUserUnos', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('ParentPk', TYPES.Int, req.body.ParentPk);\r\n\t\treq.body.PublicDaNe && request.addParameter('PublicDaNe', TYPES.Int, req.body.PublicDaNe);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n});\r\n\r\nrouter.post('/ResursiKomentar', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Komentar' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursKomentar_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, req.body.Sadrzaj);\r\n\t\trequest.addParameter('PkUseraUnos', TYPES.Int, req.body.PkUseraUnos);\r\n\t\trequest.addParameter('PkResursObjava', TYPES.Int, req.body.PkResursObjava);\r\n\t\trequest.addParameter('ParentPk', TYPES.Int, req.body.ParentPk);\r\n\t\trequest.addParameter('Dubina', TYPES.Int, req.body.Dubina);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.post('/ResursiObjava', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Datoteka' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursObjava_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Naslov', TYPES.NVarChar, req.body.Naslov);\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, req.body.Sadrzaj);\r\n\t\trequest.addParameter('PkUseraUnos', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('PkResursKategorija', TYPES.Int, req.body.PkResursKategorija);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n});\r\n\r\nrouter.post('/ResursiAttachment', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Datoteka' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst form = new formidable.IncomingForm();\r\n\t\tconst pathParts = ['uploads', 'tempFiles', 'korisnici', 'attachment'];\r\n\r\n\t\tconst tempPath = constructDirDepth(pathParts);\r\n\r\n\t\tform.uploadDir = tempPath;\r\n\t\tform.keepExtensions = true;\r\n\t\ttry {\r\n\t\t\tform.parse(req, async function (err, fields, { CoverImage, file }) {\r\n\t\t\t\tconst { Naziv, Opis, PkObjava, PkOsobniPodaciPkUsera } = fields;\r\n\t\t\t\tconst id = uuid();\r\n\t\t\t\tconst savePath = constructDirDepth(['uploads', 'korisnici', PkOsobniPodaciPkUsera, 'attachments', 'Resursi', `${PkObjava}`, `${id}/`]);\r\n\r\n\t\t\t\tconst dbSavePathRoot = `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkObjava}/${id}/`;\r\n\t\t\t\tconst dbSavePathcoverImage = CoverImage ? `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkObjava}/${id}/${id}_${CoverImage.name}` : null; // not required field!\r\n\t\t\t\tconst dbSavePathAttachment = `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkObjava}/${id}/${id}_${file.name}`;\r\n\t\t\t\tif (CoverImage) fs.renameSync(CoverImage.path, `${savePath}${id}_${CoverImage.name}`);\r\n\t\t\t\tfs.renameSync(file.path, `${savePath}${id}_${file.name}`);\r\n\r\n\t\t\t\tfs.removeSync(tempPath);\r\n\r\n\t\t\t\tconst uploadFile = ({ dbPath, dbSavePathRoot, user, filename, file, Naziv, Opis, PkOsobniPodaciPkUsera }) =>\r\n\t\t\t\t\tnew Promise((resolve) => {\r\n\t\t\t\t\t\tconst { size, path, name, type, hash, lastModifiedDate } = file;\r\n\t\t\t\t\t\tconst { conn, request } = createDatotekaInsertRequest(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tNaziv,\r\n\t\t\t\t\t\t\t\tOpis,\r\n\t\t\t\t\t\t\t\tPkDatoteka: null,\r\n\t\t\t\t\t\t\t\tPkUseraPromjena: user.PkUsera,\r\n\t\t\t\t\t\t\t\tPkUseraUnos: user.PkUsera,\r\n\t\t\t\t\t\t\t\tUserPromjena: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\tUserUnos: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\tdestination: dbSavePathRoot,\r\n\t\t\t\t\t\t\t\tencoding: null,\r\n\t\t\t\t\t\t\t\tfilename,\r\n\t\t\t\t\t\t\t\tmimetype: type,\r\n\t\t\t\t\t\t\t\toriginalname: name,\r\n\t\t\t\t\t\t\t\tpath: dbPath, //dbSavePathcoverImage,\r\n\t\t\t\t\t\t\t\tsize: size\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\t\t\t\tconst { PkDatoteka } = outputParams;\r\n\t\t\t\t\t\t\t\tresolve({ PkDatoteka });\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tlet PkDatotekaCoverImage = null;\r\n\t\t\t\tif (CoverImage) {\r\n\t\t\t\t\tconst { PkDatoteka: insertedPkCover } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathcoverImage, filename: `${id}_${CoverImage.name}`, dbSavePathRoot, user, file: CoverImage });\r\n\t\t\t\t\tPkDatotekaCoverImage = exists(insertedPkCover) ? insertedPkCover : null;\r\n\t\t\t\t}\r\n\t\t\t\tconst { PkDatoteka } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathAttachment, filename: `${id}_${file.name}`, dbSavePathRoot, user, file });\r\n\r\n\t\t\t\tconst { conn, request } = createDatotekaRelacijaRequest(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tPkForumObjava: null,\r\n\t\t\t\t\t\tPkResursObjava: PkObjava,\r\n\t\t\t\t\t\tPkDatoteka,\r\n\t\t\t\t\t\tPkDatotekaCoverImage,\r\n\t\t\t\t\t\tPkUsera: decryptIfEncrypted(PkOsobniPodaciPkUsera),\r\n\t\t\t\t\t\tPkForumObjavaKomentar: null,\r\n\t\t\t\t\t\tPkResursObjavaKomentar: null\r\n\t\t\t\t\t},\r\n\t\t\t\t\tres\r\n\t\t\t\t);\r\n\r\n\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\r\n\t\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n\r\n});\r\n\r\nrouter.post('/ResursiAttachment/comment', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Komentar' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst form = new formidable.IncomingForm();\r\n\t\tconst pathParts = ['uploads', 'tempFiles', 'korisnici', 'attachment'];\r\n\r\n\t\tconst tempPath = constructDirDepth(pathParts);\r\n\r\n\t\tform.uploadDir = tempPath;\r\n\t\tform.keepExtensions = true;\r\n\t\tform.multiples = true;\r\n\t\ttry {\r\n\t\t\tform.parse(req, async function (err, fields, files) {\r\n\t\t\t\tfields = groupFlatProperies(fields);\r\n\t\t\t\tconst { prilogDummyPk: keys } = fields;\r\n\t\t\t\tfiles = groupFlatProperies(files);\r\n\r\n\t\t\t\tconst { PkResursObjava, Sadrzaj, UserUnos, ParentPk, Dubina } = fields;\r\n\t\t\t\tlet { PkUsera: PkOsobniPodaciPkUsera } = user;\r\n\t\t\t\tlet parent = exists(ParentPk) ? ParentPk : null;\r\n\t\t\t\tlet dubina = exists(Dubina) ? Dubina : null;\r\n\r\n\t\t\t\tconst { PkResursKomentar } = await insertComment({ Sadrzaj, PkResursObjava, PkUseraUnos: PkOsobniPodaciPkUsera, Dubina: dubina, ParentPk: parent }, res);\r\n\r\n\t\t\t\tif (keys) {\r\n\t\t\t\t\tPkOsobniPodaciPkUsera = crypt.encryptString('' + PkOsobniPodaciPkUsera);\r\n\r\n\t\t\t\t\tconst prilozi = keys.map((k) => ({ file: files.file[+k], ...(files.CoverImage && { CoverImage: files.CoverImage[+k] }), Naziv: fields.NazivDatotekaMeta[+k], Opis: fields.OpisDatotekaMeta[+k] })).filter((i) => i);\r\n\r\n\t\t\t\t\tfor (const { file, CoverImage, Naziv, Opis } of prilozi) {\r\n\t\t\t\t\t\tconst id = uuid();\r\n\t\t\t\t\t\tconst savePath = constructDirDepth(['uploads', 'korisnici', `${PkOsobniPodaciPkUsera}`, 'attachments', 'Resursi', `${PkResursObjava}`, 'comment', `${id}/`]);\r\n\r\n\t\t\t\t\t\tconst dbSavePathRoot = `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkResursObjava}/comment/${id}/`;\r\n\t\t\t\t\t\tconst dbSavePathcoverImage = CoverImage ? `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkResursObjava}/comment/${id}/${id}_${CoverImage.name}` : null; // not required field!\r\n\t\t\t\t\t\tconst dbSavePathAttachment = `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkResursObjava}/comment/${id}/${id}_${file.name}`;\r\n\t\t\t\t\t\tif (CoverImage) fs.renameSync(CoverImage.path, `${savePath}${id}_${CoverImage.name}`);\r\n\t\t\t\t\t\tfs.renameSync(file.path, `${savePath}${id}_${file.name}`);\r\n\r\n\t\t\t\t\t\tconst uploadFile = ({ dbPath, dbSavePathRoot, user, filename, file, Naziv, Opis, PkOsobniPodaciPkUsera }) =>\r\n\t\t\t\t\t\t\tnew Promise((resolve) => {\r\n\t\t\t\t\t\t\t\tconst { size, path, name, type, hash, lastModifiedDate } = file;\r\n\t\t\t\t\t\t\t\tconst { conn, request } = createDatotekaInsertRequest(\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tNaziv,\r\n\t\t\t\t\t\t\t\t\t\tOpis,\r\n\t\t\t\t\t\t\t\t\t\tPkDatoteka: null,\r\n\t\t\t\t\t\t\t\t\t\tPkUseraPromjena: user.PkUsera,\r\n\t\t\t\t\t\t\t\t\t\tPkUseraUnos: user.PkUsera,\r\n\t\t\t\t\t\t\t\t\t\tUserPromjena: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\t\t\tUserUnos: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\t\t\tdestination: dbSavePathRoot,\r\n\t\t\t\t\t\t\t\t\t\tencoding: null,\r\n\t\t\t\t\t\t\t\t\t\tfilename,\r\n\t\t\t\t\t\t\t\t\t\tmimetype: type,\r\n\t\t\t\t\t\t\t\t\t\toriginalname: name,\r\n\t\t\t\t\t\t\t\t\t\tpath: dbPath, //dbSavePathcoverImage,\r\n\t\t\t\t\t\t\t\t\t\tsize: size\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\t\t\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\t\t\t\t\t\tconst { PkDatoteka } = outputParams;\r\n\t\t\t\t\t\t\t\t\t\tresolve({ PkDatoteka });\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\tlet PkDatotekaCoverImage = null;\r\n\t\t\t\t\t\tif (CoverImage) {\r\n\t\t\t\t\t\t\tconst { PkDatoteka: insertedPkCover } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathcoverImage, filename: `${id}_${CoverImage.name}`, dbSavePathRoot, user, file: CoverImage });\r\n\t\t\t\t\t\t\tPkDatotekaCoverImage = exists(insertedPkCover) ? insertedPkCover : null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst { PkDatoteka } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathAttachment, filename: `${id}_${file.name}`, dbSavePathRoot, user, file });\r\n\t\t\t\t\t\tconst { conn, request } = createDatotekaRelacijaRequest(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tPkResursObjava: PkResursObjava,\r\n\t\t\t\t\t\t\t\tPkDatoteka,\r\n\t\t\t\t\t\t\t\tPkDatotekaCoverImage,\r\n\t\t\t\t\t\t\t\tPkUsera: decryptIfEncrypted(PkOsobniPodaciPkUsera),\r\n\t\t\t\t\t\t\t\tPkResursObjavaKomentar: PkResursKomentar\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tawait executeSqlReqAsPromise({ request, conn, res });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfs.removeSync(tempPath);\r\n\r\n\t\t\t\tres.status(200).send({ PkResursKomentar });\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\r\n\t\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.post('/ResursiAttachment/objava', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Datoteka' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst form = new formidable.IncomingForm();\r\n\t\tconst pathParts = ['uploads', 'tempFiles', 'korisnici', 'attachment'];\r\n\r\n\t\tconst tempPath = constructDirDepth(pathParts);\r\n\r\n\t\tform.uploadDir = tempPath;\r\n\t\tform.keepExtensions = true;\r\n\t\tform.multiples = true;\r\n\t\ttry {\r\n\t\t\tform.parse(req, async function (err, fields, files) {\r\n\t\t\t\tfields = groupFlatProperies(fields);\r\n\t\t\t\tconst { prilogDummyPk: keys } = fields;\r\n\t\t\t\tfiles = groupFlatProperies(files);\r\n\r\n\t\t\t\tconst { Naslov, Sadrzaj, PkResursKategorija } = fields;\r\n\t\t\t\tlet { PkUsera: PkOsobniPodaciPkUsera } = user;\r\n\r\n\t\t\t\tconst { PkResursObjava } = await insertObjava({ Naslov, Sadrzaj, PkUseraUnos: PkOsobniPodaciPkUsera, PkResursKategorija }, res);\r\n\r\n\t\t\t\tif (keys) {\r\n\t\t\t\t\tPkOsobniPodaciPkUsera = crypt.encryptString('' + PkOsobniPodaciPkUsera);\r\n\r\n\t\t\t\t\tconst prilozi = keys.map((k) => ({ file: files.file[+k], ...(files.CoverImage && { CoverImage: files.CoverImage[+k] }), Naziv: fields.NazivDatotekaMeta[+k], Opis: fields.OpisDatotekaMeta[+k] })).filter((i) => i);\r\n\r\n\t\t\t\t\tfor (const { file, CoverImage, Naziv, Opis } of prilozi) {\r\n\t\t\t\t\t\tconst id = uuid();\r\n\t\t\t\t\t\tconst savePath = constructDirDepth(['uploads', 'korisnici', `${PkOsobniPodaciPkUsera}`, 'attachments', 'Resursi', `${PkResursObjava}`, `${id}/`]);\r\n\r\n\t\t\t\t\t\tconst dbSavePathRoot = `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkResursObjava}/${id}/`;\r\n\t\t\t\t\t\tconst dbSavePathcoverImage = CoverImage ? `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkResursObjava}/${id}/${id}_${CoverImage.name}` : null; // not required field!\r\n\t\t\t\t\t\tconst dbSavePathAttachment = `korisnici/${PkOsobniPodaciPkUsera}/attachments/Resursi/${PkResursObjava}/${id}/${id}_${file.name}`;\r\n\t\t\t\t\t\tif (CoverImage) fs.renameSync(CoverImage.path, `${savePath}${id}_${CoverImage.name}`);\r\n\t\t\t\t\t\tfs.renameSync(file.path, `${savePath}${id}_${file.name}`);\r\n\r\n\t\t\t\t\t\tconst uploadFile = ({ dbPath, dbSavePathRoot, user, filename, file, Naziv, Opis, PkOsobniPodaciPkUsera }) =>\r\n\t\t\t\t\t\t\tnew Promise((resolve) => {\r\n\t\t\t\t\t\t\t\tconst { size, path, name, type, hash, lastModifiedDate } = file;\r\n\t\t\t\t\t\t\t\tconst { conn, request } = createDatotekaInsertRequest(\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tNaziv,\r\n\t\t\t\t\t\t\t\t\t\tOpis,\r\n\t\t\t\t\t\t\t\t\t\tPkDatoteka: null,\r\n\t\t\t\t\t\t\t\t\t\tPkUseraPromjena: user.PkUsera,\r\n\t\t\t\t\t\t\t\t\t\tPkUseraUnos: user.PkUsera,\r\n\t\t\t\t\t\t\t\t\t\tUserPromjena: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\t\t\tUserUnos: user.ImePrezimeUsera,\r\n\t\t\t\t\t\t\t\t\t\tdestination: dbSavePathRoot,\r\n\t\t\t\t\t\t\t\t\t\tencoding: null,\r\n\t\t\t\t\t\t\t\t\t\tfilename,\r\n\t\t\t\t\t\t\t\t\t\tmimetype: type,\r\n\t\t\t\t\t\t\t\t\t\toriginalname: name,\r\n\t\t\t\t\t\t\t\t\t\tpath: dbPath, //dbSavePathcoverImage,\r\n\t\t\t\t\t\t\t\t\t\tsize: size\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\t\t\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\t\t\t\t\t\tconst { PkDatoteka } = outputParams;\r\n\t\t\t\t\t\t\t\t\t\tresolve({ PkDatoteka });\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\tlet PkDatotekaCoverImage = null;\r\n\t\t\t\t\t\tif (CoverImage) {\r\n\t\t\t\t\t\t\tconst { PkDatoteka: insertedPkCover } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathcoverImage, filename: `${id}_${CoverImage.name}`, dbSavePathRoot, user, file: CoverImage });\r\n\t\t\t\t\t\t\tPkDatotekaCoverImage = exists(insertedPkCover) ? insertedPkCover : null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst { PkDatoteka } = await uploadFile({ Naziv, Opis, PkOsobniPodaciPkUsera, dbPath: dbSavePathAttachment, filename: `${id}_${file.name}`, dbSavePathRoot, user, file });\r\n\t\t\t\t\t\tconst { conn, request } = createDatotekaRelacijaRequest(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tPkResursObjava: PkResursObjava,\r\n\t\t\t\t\t\t\t\tPkDatoteka,\r\n\t\t\t\t\t\t\t\tPkDatotekaCoverImage,\r\n\t\t\t\t\t\t\t\tPkUsera: decryptIfEncrypted(PkOsobniPodaciPkUsera)\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tawait executeSqlReqAsPromise({ request, conn, res });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfs.removeSync(tempPath);\r\n\r\n\t\t\t\tres.status(200).send({ PkResursObjava });\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\r\n\t\t\tres.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n\r\n});\r\n//#endregion\r\n\r\n//#region UPDATE DATA\r\nrouter.put('/ResursiKategorija', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Kategorija' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst user = await handleRequestUser(req, res);\r\n\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursKategorija_Update', conn, res);\r\n\r\n\t\trequest.addParameter('PkResursKategorija', TYPES.Int, req.body.PkResursKategorija);\r\n\t\trequest.addParameter('Naziv', TYPES.NVarChar, req.body.Naziv);\r\n\t\trequest.addParameter('Opis', TYPES.NVarChar, req.body.Opis);\r\n\t\trequest.addParameter('UserPromjenio', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\t\trequest.addParameter('PkUseraPromjenio', TYPES.Int, user.PkUsera);\r\n\t\trequest.addParameter('RowVersion', TYPES.NVarChar, req.body.RowVersion);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.put('/ResursiKomentar', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Komentar' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursKomentar_Update', conn, res);\r\n\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, req.body.Sadrzaj);\r\n\t\trequest.addParameter('PkResursKomentar', TYPES.Int, req.body.PkResursKomentar);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\nrouter.put('/ResursiObjava', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Datoteka' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursObjava_Update', conn, res);\r\n\r\n\t\trequest.addParameter('Naslov', TYPES.NVarChar, req.body.Naslov);\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, req.body.Sadrzaj);\r\n\t\trequest.addParameter('PkResursObjava', TYPES.Int, req.body.PkResursObjava);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n});\r\n//#endregion\r\n\r\n//#region DELETE DATA\r\n\r\n//Ukoliko kategoriaj ima potkategorije, baza vraca error\r\nrouter.delete('/ResursiKategorija', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Kategorija' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursKategorija_Delete', conn, res);\r\n\r\n\t\trequest.addParameter('PkResursKategorija', TYPES.Int, req.query.PkResursKategorija);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n\r\n//Komentar ne brisemo iz baze vec dizemo flag da je izbrisan radi hijerarhijske strukture komentara\r\nrouter.delete('/ResursiKomentar', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Komentar' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursKomentar_Delete', conn, res);\r\n\r\n\t\trequest.addParameter('PkResursKomentar', TYPES.Int, req.query.PkResursKomentar);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n\r\n\r\n});\r\n\r\nrouter.delete('/ResursiObjava', async function (req, res) {\r\n\tconst hasAcces = await hasClaim({ modul: modulName, claim: 'Datoteka' }, req);\r\n\r\n\tif (hasAcces) {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursObjava_Delete', conn, res);\r\n\r\n\t\trequest.addParameter('PkResursObjava', TYPES.Int, req.query.PkResursObjava);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => simpleDbResolve(output, outputParams, result, res));\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:UNATHORIZED_ACCES' });\r\n\t}\r\n});\r\n//#endregion\r\n\r\n//#region FUNCTIONS\r\nasync function insertComment({ Sadrzaj, PkUseraUnos, PkResursObjava, ParentPk = null, Dubina = null }, res) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursKomentar_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, Sadrzaj);\r\n\t\trequest.addParameter('PkUseraUnos', TYPES.Int, PkUseraUnos);\r\n\t\trequest.addParameter('PkResursObjava', TYPES.Int, PkResursObjava);\r\n\t\trequest.addParameter('ParentPk', TYPES.Int, ParentPk);\r\n\t\trequest.addParameter('Dubina', TYPES.Int, Dubina);\r\n\t\trequest.addOutputParameter('PkResursKomentar', TYPES.Int, null);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tconst { PkResursKomentar } = outputParams;\r\n\t\t\t\tresolve({ PkResursKomentar });\r\n\t\t\t} else {\r\n\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nasync function insertObjava({ Naslov, Sadrzaj, PkUseraUnos, PkResursKategorija }, res) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Resursi.spResursObjava_Insert', conn, res);\r\n\r\n\t\trequest.addParameter('Naslov', TYPES.NVarChar, Naslov);\r\n\t\trequest.addParameter('Sadrzaj', TYPES.NVarChar, Sadrzaj);\r\n\t\trequest.addParameter('PkUseraUnos', TYPES.Int, PkUseraUnos);\r\n\t\trequest.addParameter('PkResursKategorija', TYPES.Int, PkResursKategorija);\r\n\t\trequest.addOutputParameter('PkResursObjava', TYPES.Int, null);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tconst { PkResursObjava } = outputParams;\r\n\t\t\t\tresolve({ PkResursObjava });\r\n\t\t\t} else {\r\n\t\t\t\tresolve({ PkDatoteka: null });\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction executeSqlReqAsPromise({ request, conn, res }) {\r\n\treturn new Promise((resolve) => {\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tresolve(result);\r\n\t\t\t} else {\r\n\t\t\t\tresolve({ message: output });\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n//#endregion FUNCTIONS\r\nmodule.exports = { resursiRouter: router };\r\n","\r\nvar appRootPath = require('app-root-path'),\r\nfs = require('fs');\r\n\r\n// ucitavanje config datoteka\r\n// appConfig.js je obuhvacena webpackom, JSON/ni nisu...\r\n\r\n\r\n// ukljucivanje enkripcije je izbaceno iz jsona jer korisnik to ne smije vidit i mjenjat\r\n// 14.9.2020 - odluceno na sastanku\r\nglobal.appConfig = {\r\n    encryptionConfig: {\r\n        enkripcijaDaNe: true,\r\n        encryptColumns: [\r\n            \"PkUsera\",\r\n            \"PkOsobniPodaciPkUsera\",\r\n            \"PkUseraUnos\"\r\n        ]\r\n    }\r\n};\r\n\r\nvar extAppConfig = fs.readFileSync('./config/appConfigExt.json', 'utf8');\r\nextAppConfig = JSON.parse(extAppConfig.toString());\r\n\r\nvar customAppConfig = fs.readFileSync('./config/appConfig4App.json', 'utf8');\r\ncustomAppConfig = JSON.parse(customAppConfig.toString());\r\n\r\nglobal.appConfig = { ...global.appConfig, ...extAppConfig, ...customAppConfig };\r\nglobal.appConfig.appRootPath = appRootPath;\r\n\r\nvar appConfig = global.appConfig;\r\nmodule.exports = appConfig;","var greska = [], // objekt koji vraca gresku\r\n\toutputvalue = [], // output parametar kod azuriranja podataka\r\n\tcrypt = require('./kripto.js'),\r\n\tConnectionPool = require('tedious-connection-pool');\r\n\r\nvar config = {\r\n\tserver: global.appConfig.databaseParams.productionDatabaseServer,\r\n\tuserName: crypt.decryptString(global.appConfig.databaseParams.productionUserName),\r\n\tpassword: crypt.decryptString(global.appConfig.databaseParams.productionPassword),\r\n\toptions: {\r\n\t\tencrypt: true,\r\n\t\tdatabase: global.appConfig.databaseParams.productionDatabaseName,\r\n\t\tinstanceName: global.appConfig.databaseParams.productionDatabaseServerInstanceName,\r\n\t\ttrustServerCertificate: true\r\n\t},\r\n\tauthentication: {\r\n\t\ttype: 'default',\r\n\t\toptions: {\r\n\t\t\tuserName: crypt.decryptString(global.appConfig.databaseParams.productionUserName),\r\n\t\t\tpassword: crypt.decryptString(global.appConfig.databaseParams.productionPassword)\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar config4Test = {\r\n\tserver: global.appConfig.databaseParams.testDatabaseServer,\r\n\tuserName: crypt.decryptString(global.appConfig.databaseParams.testUserName),\r\n\tpassword: crypt.decryptString(global.appConfig.databaseParams.testPassword),\r\n\toptions: {\r\n\t\tencrypt: true,\r\n\t\tdatabase: global.appConfig.databaseParams.testDatabaseName,\r\n\t\tinstanceName: global.appConfig.databaseParams.testDatabaseServerInstanceName\r\n\t},\r\n\tauthentication: {\r\n\t\ttype: 'default',\r\n\t\toptions: {\r\n\t\t\tuserName: crypt.decryptString(global.appConfig.databaseParams.testUserName),\r\n\t\t\tpassword: crypt.decryptString(global.appConfig.databaseParams.testPassword)\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar poolConfig = {\r\n\tmin: 2,\r\n\tmax: 4,\r\n\tlog: false,\r\n\tacquireTimeout: 300000\r\n};\r\n\r\nlet pool, pool4Test;\r\nfunction createPool() {\r\n\ttry {\r\n\t\tpool = new ConnectionPool(poolConfig, config); // pool za produkcijsku bazu\r\n\t\tpool.on('error', function (err) {\r\n\t\t\tpool.drain();\r\n\t\t});\r\n\t\tpool.on('debug', (connection, message) => {\r\n\t\t\tglobal.systemLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: ' pool error  ' + connection + message\r\n\t\t\t});\r\n\t\t});\r\n\t\tmodule.exports.pool = pool;\r\n\r\n\t\tpool4Test = new ConnectionPool(poolConfig, config4Test); // pool za testnu bazu\r\n\t\tpool4Test.on('error', function (err) {\r\n\t\t\tpool4Test.drain();\r\n\t\t});\r\n\t\tpool4Test.on('debug', (connection, message) => {\r\n\t\t\tglobal.systemLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: ' pool4Test error  ' + connection + message\r\n\t\t\t});\r\n\t\t});\r\n\t\tmodule.exports.pool4Test = pool4Test;\r\n\t} catch (error) {\r\n\t\tglobal.systemLogger.log({\r\n\t\t\tlevel: 'error',\r\n\t\t\tmessage: 'create pool error  ' + error\r\n\t\t});\r\n\t}\r\n}\r\ncreatePool();\r\n\r\nfunction createConnection(currDatabase) {\r\n\ttry {\r\n\t\t//currDatabase = 'Testna baza podataka' za testnu, 'Produkcijska baza podataka' za produkciju\r\n\t\tvar Connection = require('tedious').Connection;\r\n\t\tif (currDatabase === 'Testna baza podataka') {\r\n\t\t\tvar connection = new Connection(config4Test);\r\n\t\t} else if (currDatabase === 'Produkcijska baza podataka') {\r\n\t\t\tconnection = new Connection(config);\r\n\t\t} else {\r\n\t\t\tconnection = null;\r\n\t\t}\r\n\t\tconnection.connect();\r\n\t\treturn connection;\r\n\t} catch (error) {\r\n\t\tglobal.systemLogger.log({\r\n\t\t\tlevel: 'error',\r\n\t\t\tmessage: ' SQL Create Connection error  ' + error\r\n\t\t});\r\n\t\tconnection = null;\r\n\t\treturn connection;\r\n\t}\r\n}\r\n\r\nfunction createRequest(query, connection, res) {\r\n\tvar Request = require('tedious').Request;\r\n\tvar req = new Request(query, function (err, rowCount) {\r\n\t\tif (err) {\r\n\t\t\tglobal.systemLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: 'SQL Create Req error ' + err.message\r\n\t\t\t});\r\n\r\n\t\t\tif (res && !res.finished && !res.headersSent) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// res.status(500).write(JSON.stringify(err));\r\n\t\t\t\t\t// res.end();\r\n\t\t\t\t\tres.status(503).send({ message: 'STD:CHECK_INTERNET_OR_VPN' });\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tglobal.systemLogger.log({\r\n\t\t\t\t\t\tlevel: 'error',\r\n\t\t\t\t\t\tmessage: 'SQL Create Req error ' + (error && error.message)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconnection && connection.close();\r\n\t});\r\n\treturn req;\r\n}\r\n\r\nfunction createRequestPool(query, connection) {\r\n\tvar Request = require('tedious').Request;\r\n\tvar req = new Request(query, function (err, rowCount) {\r\n\t\tif (err) {\r\n\t\t\tglobal.systemLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: 'SQL Create POOL Req error ' + err.message\r\n\t\t\t});\r\n\t\t}\r\n\t\tconnection.release();\r\n\t});\r\n\treturn req;\r\n}\r\n\r\nfunction execStoredProc(query, connection, output, defaultContent, callback) {\r\n\tvar request = query;\r\n\tvar greska = [];\r\n\tvar outputParams = [];\r\n\tvar dbResultObj = [];\r\n\tif (typeof query == 'string') {\r\n\t\trequest = this.createRequest(query, connection);\r\n\t}\r\n\tvar empty = true;\r\n\r\n\trequest.on('row', function (columns) {\r\n\t\tempty = false;\r\n\r\n\t\tvar rowObject = {};\r\n\t\tcolumns.forEach(function (column) {\r\n\t\t\trowObject[column.metadata.colName] = column.value;\r\n\t\t});\r\n\t\tdbResultObj.push(rowObject);\r\n\t});\r\n\r\n\trequest.on('doneProc', function (rowCount, more, returnStatus, rows) {\r\n\t\t// ako je doslo do greske\r\n\t\tif (greska.length > 0) {\r\n\t\t\toutput.status(500).write(JSON.stringify(greska[0]));\r\n\t\t}\r\n\t\t// ako nema nista u selectu uzima output params\r\n\t\tif (empty && greska.length == 0) {\r\n\t\t\tif (global.appConfig.encryptionConfig.enkripcijaDaNe) {\r\n\t\t\t\toutputParams = crypt.encryptColumnsToClient(outputParams);\r\n\t\t\t}\r\n\t\t\tif (outputParams == 'NOK') {\r\n\t\t\t\toutput.status(500).write(JSON.stringify({ message: 'error' }));\r\n\t\t\t} else {\r\n\t\t\t\toutput.write(JSON.stringify(outputParams));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// ako ima zapisa\r\n\t\tif (!empty && greska.length == 0) {\r\n\t\t\t// gledam da li je u pravom formatu i parsiram ako nije\r\n\t\t\tdbResultObj = parsirajJSON(dbResultObj);\r\n\t\t\tif (global.appConfig.encryptionConfig.enkripcijaDaNe) {\r\n\t\t\t\tdbResultObj = crypt.encryptColumnsToClient(dbResultObj);\r\n\t\t\t}\r\n\t\t\tif (dbResultObj == 'NOK') {\r\n\t\t\t\toutput.status(500).write(JSON.stringify({ message: 'error' }));\r\n\t\t\t} else {\r\n\t\t\t\toutput.write(JSON.stringify(dbResultObj));\r\n\t\t\t}\r\n\t\t}\r\n\t\toutputParams = [];\r\n\t\toutput.end();\r\n\t});\r\n\r\n\trequest.on('returnValue', function (parameterName, value, metadata) {\r\n\t\tvar temp = {};\r\n\t\ttemp[parameterName] = value;\r\n\t\toutputParams.push(temp);\r\n\t});\r\n\r\n\tconnection.on('errorMessage', function (err) {\r\n\t\tif (err) {\r\n\t\t\tgreska.push(err);\r\n\t\t}\r\n\t});\r\n\r\n\trequest.on('error', function (err) {\r\n\t\tglobal.systemLogger.log({\r\n\t\t\tlevel: 'error',\r\n\t\t\tmessage: 'Req error ' + err.message\r\n\t\t});\r\n\t});\r\n\r\n\tconnection.on('connect', function (err) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t\tconnection.callProcedure(request);\r\n\t});\r\n}\r\n\r\nfunction execStoredProcFromNode(query, connection, output, callback) {\r\n\tvar request = query,\r\n\t\tgreska = [],\r\n\t\toutputvalue = [],\r\n\t\toutputParams = {},\r\n\t\tdbResultObj = [],\r\n\t\tresultRowCount = 0,\r\n\t\tempty = true;\r\n\r\n\trequest.on('doneProc', function (rowCount, more, returnStatus, rows) {\r\n\t\tif (greska.length > 0) {\r\n\t\t\toutput = 'NOK';\r\n\t\t\tcallback(output, outputParams, dbResultObj);\r\n\t\t}\r\n\t\tif (empty && greska.length == 0) {\r\n\t\t\t//output.write(defaultContent);\r\n\t\t\toutput = 'OK';\r\n\t\t\tif (global.appConfig.encryptionConfig.enkripcijaDaNe) {\r\n\t\t\t\toutputParams = crypt.encryptColumnsToClient(outputParams);\r\n\t\t\t\tdbResultObj = crypt.encryptColumnsToClient(dbResultObj);\r\n\t\t\t}\r\n\t\t\tcallback(output, outputParams, dbResultObj);\r\n\t\t}\r\n\t});\r\n\r\n\trequest.on('row', function (columns) {\r\n\t\tvar rowObject = {};\r\n\t\tcolumns.forEach(function (column) {\r\n\t\t\trowObject[column.metadata.colName] = column.value;\r\n\t\t});\r\n\t\tdbResultObj.push(rowObject);\r\n\t});\r\n\r\n\tconnection.on('errorMessage', function (err) {\r\n\t\tconsole.log('errorMessage');\r\n\t\tconsole.log('err', err);\r\n\t\tif (err) {\r\n\t\t\tgreska.push(err);\r\n\t\t}\r\n\t});\r\n\r\n\trequest.on('returnValue', function (parameterName, value, metadata) {\r\n\t\toutputParams[parameterName] = value;\r\n\t});\r\n\r\n\tconnection.on('connect', function (err) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t\tconnection.callProcedure(request);\r\n\t});\r\n}\r\n\r\nfunction execStoredProcNoJSONLocalResults(dbRequest, connection, req, res, callback) {\r\n\tvar request = dbRequest;\r\n\tvar resultData = [];\r\n\tgreska = [];\r\n\r\n\trequest.on('row', function (columns) {\r\n\t\tvar rowObject = {};\r\n\t\tcolumns.forEach(function (column) {\r\n\t\t\trowObject[column.metadata.colName] = column.value;\r\n\t\t});\r\n\t\tresultData.push(rowObject);\r\n\t});\r\n\trequest.on('doneProc', function () {\r\n\t\tif (global.appConfig.encryptionConfig.enkripcijaDaNe) {\r\n\t\t\tresultData = crypt.encryptColumnsToClient(resultData);\r\n\t\t}\r\n\t\tif (greska.length === 0) {\r\n\t\t\tif (typeof callback === 'function') {\r\n\t\t\t\tcallback(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresultStatus: '0',\r\n\t\t\t\t\t\tresultData: resultData\r\n\t\t\t\t\t},\r\n\t\t\t\t\treq,\r\n\t\t\t\t\tres\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresultStatus: '0',\r\n\t\t\t\t\tresultData: resultData\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (typeof callback === 'function') {\r\n\t\t\t\tcallback(greska, req, res);\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tgreska\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tconnection.on('errorMessage', function (err) {\r\n\t\tconsole.log('error errorMessage', err.message);\r\n\t\tif (err) {\r\n\t\t\tgreska = {\r\n\t\t\t\tresultStatus: '9999',\r\n\t\t\t\tresultData: err\r\n\t\t\t};\r\n\t\t\treturn {\r\n\t\t\t\tresultStatus: err.message,\r\n\t\t\t\tresultData: err\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\tconnection.on('connect', function (err) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log('error connect');\r\n\t\t}\r\n\t\tconnection.callProcedure(request);\r\n\t});\r\n}\r\n\r\n// TRANSAKCIJA\r\nfunction createTransactionRequest(query, connection) {\r\n\tvar Request = require('tedious').Request;\r\n\tvar req = new Request(query, function (err, rowCount) {\r\n\t\tif (err) {\r\n\t\t\tglobal.apiLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: ' error in db.createTransactionRequest  ' + err\r\n\t\t\t});\r\n\t\t}\r\n\t\tconnection; //&& connection.close();\r\n\t});\r\n\treturn req;\r\n}\r\n\r\nfunction beginTransaction(connection, callback) {\r\n\tconnection.on('connect', function (err) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log('error in db.beginTransaction', err);\r\n\t\t\tglobal.apiLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: ' error in db.beginTransaction  ' + err\r\n\t\t\t});\r\n\t\t}\r\n\t\tconnection.beginTransaction(function (err, result) {\r\n\t\t\tif (err) {\r\n\t\t\t\tconsole.log('error in db.beginTransaction', err);\r\n\t\t\t\tglobal.apiLogger.log({\r\n\t\t\t\t\tlevel: 'error',\r\n\t\t\t\t\tmessage: ' error in db.beginTransaction  ' + err\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (result) {\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction commitTransaction(connection) {\r\n\tconnection.commitTransaction(function (err) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log('error in db.commitTransaction', err);\r\n\t\t\tglobal.apiLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: ' error in db.commitTransaction  ' + err\r\n\t\t\t});\r\n\t\t\tconnection.rollbackTransaction(function (err) {});\r\n\t\t}\r\n\t\tconnection.close();\r\n\t});\r\n}\r\n\r\nfunction execStoredProcInTransaction(query, connection, output, outputParams = {}, callback) {\r\n\tvar request = query,\r\n\t\tgreska = [],\r\n\t\toutputvalue = [],\r\n\t\tdbResultObj = [],\r\n\t\tresultRowCount = 0,\r\n\t\tempty = true;\r\n\tif (connection.state.name == 'LoggedIn') {\r\n\t\tconnection.callProcedure(request);\r\n\t}\r\n\r\n\trequest.on('row', function (columns) {\r\n\t\tvar rowObject = {};\r\n\t\tcolumns.forEach(function (column) {\r\n\t\t\trowObject[column.metadata.colName] = column.value;\r\n\t\t});\r\n\t\tdbResultObj.push(rowObject);\r\n\t});\r\n\r\n\tconnection.on('errorMessage', function (err) {\r\n\t\tif (err) {\r\n\t\t\tgreska.push(err);\r\n\t\t}\r\n\t});\r\n\r\n\trequest.on('requestCompleted', function () {\r\n\t\tif (greska.length > 0) {\r\n\t\t\toutput = greska[0];\r\n\t\t\tcallback(output, outputParams, dbResultObj);\r\n\t\t}\r\n\t\tif (empty && greska.length == 0) {\r\n\t\t\t//output.write(defaultContent);\r\n\t\t\toutput = 'OK';\r\n\t\t\tif (global.appConfig.encryptionConfig.enkripcijaDaNe) {\r\n\t\t\t\toutputParams = crypt.encryptColumnsToClient(outputParams);\r\n\t\t\t\tdbResultObj = crypt.encryptColumnsToClient(dbResultObj);\r\n\t\t\t}\r\n\t\t\tcallback(output, outputParams, dbResultObj);\r\n\t\t}\r\n\t});\r\n\r\n\trequest.on('error', function () {\r\n\t\tconnection.rollbackTransaction(function (err) {\r\n\t\t\tif (err) {\r\n\t\t\t}\r\n\t\t});\r\n\t\tconnection.close(); // ovo nisam siguran\r\n\t});\r\n\r\n\tconnection.on('infoMessage', function (info) {\r\n\t\tif (info.number === 3621) {\r\n\t\t\tconsole.log('DeadLock', info.number, info.message, info.state); // 3621 - ercode napravi handler za ovu gresku\r\n\t\t}\r\n\t\t// if (info) {\r\n\t\t//   greska.push(info);\r\n\t\t// }\r\n\t});\r\n\r\n\trequest.on('returnValue', function (parameterName, value, metadata) {\r\n\t\toutputParams[parameterName] = value;\r\n\t});\r\n\r\n\tconnection.on('connect', function (err) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t\tconnection.callProcedure(request);\r\n\t});\r\n}\r\n\r\nfunction parsirajJSON(data) {\r\n\ttry {\r\n\t\tvar jsonKeys = Object.keys(data);\r\n\t\tvar dataObj = '';\r\n\t\tvar jsonKey = '';\r\n\t\tfor (var i = 0; i < jsonKeys.length; i++) {\r\n\t\t\tjsonKey = Object.keys(data[i]);\r\n\t\t\tdataObj = dataObj + data[i][jsonKey].toString();\r\n\t\t}\r\n\t\treturn JSON.parse(dataObj);\r\n\t} catch (error) {\r\n\t\treturn data;\r\n\t}\r\n}\r\n\r\nmodule.exports.createConnection = createConnection;\r\nmodule.exports.pool = pool;\r\nmodule.exports.pool4Test = pool4Test;\r\nmodule.exports.createRequest = createRequest;\r\nmodule.exports.createRequestPool = createRequestPool;\r\nmodule.exports.execStoredProc = execStoredProc;\r\nmodule.exports.execStoredProcFromNode = execStoredProcFromNode;\r\nmodule.exports.execStoredProcNoJSONLocalResults = execStoredProcNoJSONLocalResults;\r\n\r\nmodule.exports.createTransactionRequest = createTransactionRequest;\r\nmodule.exports.beginTransaction = beginTransaction;\r\nmodule.exports.commitTransaction = commitTransaction;\r\nmodule.exports.execStoredProcInTransaction = execStoredProcInTransaction;\r\n","const process = require('process');\r\n\r\nfunction handleWithLog(reason, promise, exceptionType) {\r\n\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace({ reason }, { promise }, { exceptionType });\r\n\r\n\tswitch (exceptionType) {\r\n\t\tcase 'unhandledRejection':\r\n\t\t\tglobal.systemLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: 'HANDLER: Unhandled Promise Rejection caught, reason: ' + reason\r\n\t\t\t});\r\n\t\t\tbreak;\r\n\t\tcase 'uncaughtException':\r\n\t\t\tglobal.systemLogger.log({\r\n\t\t\t\tlevel: 'error',\r\n\t\t\t\tmessage: 'HANDLER: Exception caught, missing a trycatch somewhere, reason: ' + reason\r\n\t\t\t});\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param  {...any} names process error events on global node process scale. defaults to \"unhandledRejection\", \"uncaughtException\"\r\n */\r\nfunction useGlobalAppHandlers(...args) {\r\n\tif (args.length == 0) {\r\n\t\targs = ['unhandledRejection', 'uncaughtException'];\r\n\t}\r\n\targs.includes('unhandledRejection') && process.on('unhandledRejection', (reason, p) => handleWithLog(reason, p, 'unhandledRejection'));\r\n\targs.includes('uncaughtException') && process.on('uncaughtException',  (error) => handleWithLog(error, null, 'uncaughtException'));\r\n\r\n}\r\n\r\nmodule.exports = {\r\n\tuseGlobalAppHandlers\r\n};\r\n","const jwt = require('jsonwebtoken');\r\nconst expressJwt = require('express-jwt');\r\nconst kripto = require('../kripto.js');\r\n\r\nconst jwtService = {\r\n\r\n\r\n    config: null,\r\n    init: function () {\r\n        this.config = JSON.parse(JSON.stringify(global.appConfig.jwtConfig));\r\n        this.decryptConfig();\r\n        return this\r\n    },\r\n    /**\r\n     * @wantedSideEffect jwtService.config\r\n     * @description decrypts all config defined properties.\r\n     */\r\n    decryptConfig: function() {\r\n        this.config.decryptKeys.forEach(prop => {\r\n            // poziv za rekurzivno dekriptiranje svih propertya\r\n            this.eachRecursive(this.config, prop, kripto.decryptString);\r\n        });\r\n        this.config.acceptableSecrets = this.config.acceptableSecrets.map(key => kripto.decryptString(key)); \r\n    },\r\n    /**\r\n     * \r\n     * @param {any} obj any object \r\n     * @param {string} target object key \r\n     * @param {function} fn a function that does whatever manupulation on obj's target property \r\n     */\r\n    eachRecursive: function (obj, target, fn) {\r\n        for (var k in obj) {\r\n            if (typeof obj[k] == \"object\" && obj[k] !== null)\r\n                this.eachRecursive(obj[k], target, fn);\r\n            else if (k == target) {\r\n                obj[k] = fn(obj[k]);\r\n            }\r\n        }\r\n    },\r\n    loginJwt: function (payload) {\r\n        return jwt.sign({ payload }, this.config.jwtSecret, { expiresIn: this.config.expiresIn, algorithm: this.config.algorithm });\r\n    },\r\n    signJwt: function (payload,secret) {\r\n        return jwt.sign({ payload }, secret, { expiresIn: this.config.expiresIn, algorithm: this.config.algorithm });\r\n    },\r\n    extractJwt: function (authHeader) {\r\n        if (authHeader && authHeader.length) {\r\n            return authHeader.split(' ')[1];\r\n        }\r\n        return null;\r\n    },\r\n    /**\r\n     * \r\n     * @param {string} token\r\n     * @return {boolean} true if valid, false otherwise\r\n     */\r\n    isValidJWTToken: function (token) {\r\n        try {\r\n            jwt.verify(token, this.config.jwtSecret, { algorithms: [this.config.algorithm] });\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    },\r\n    /**\r\n     * \r\n     * @param {string} token\r\n     * @return {*} decoded JWT token\r\n     */\r\n    decodeToken: function (token) {\r\n        return jwt.decode(token);\r\n    },\r\n    /**\r\n     * @param {*} req \r\n     * @param {string} token\r\n     * @returns {Promise<boolean|any>} \r\n     */\r\n    verifyJwtAndReturnAuthData: function (req = null, token = null) {\r\n        return new Promise((resolve, reject) => {\r\n            if (req && token == null) {\r\n                token = this.extractJwt(req.headers.authorization);\r\n            }\r\n            if (token == null) {\r\n                reject(false);\r\n            }\r\n            if(this.isValidJWTToken(token)) {\r\n                resolve(this.decodeToken(token));\r\n            } else {\r\n                reject(false);\r\n            }\r\n        });\r\n    },\r\n    /**\r\n     * @param {*} req HTTTP request\r\n     * @param {*} payload decoded payload from Base64\r\n     * @param {*} done callback to end this validation function \r\n     * {@link https://github.com/auth0/express-jwt/blob/5fb8c88067b9448d746d04ab60ad3b1996c7e310/README.md#multi-tenancy Click here for more details!}\r\n     */\r\n    findValidSecret: function (req, payload, done) {\r\n        let tryValidateToken = (token, secret) => {\r\n            try {\r\n                jwt.verify(token, secret, { algorithms: [jwtService.config.algorithm] });\r\n                return true;\r\n            } catch (error) {\r\n                return false;\r\n            }\r\n        };\r\n        \r\n        let token = jwtService.extractJwt(req.headers.authorization);\r\n        if(token == null) {\r\n            return done(null,null);\r\n        }\r\n        // 1st try with own app's secret key\r\n        let ownSecret = tryValidateToken(token, jwtService.config.jwtSecret) == true? jwtService.config.jwtSecret: undefined;\r\n\r\n        if(ownSecret != undefined) {\r\n            return done(null, jwtService.config.jwtSecret);\r\n        }\r\n        \r\n        // 2nd try with list of accepted secret keys\r\n\r\n        let acceptableSecret = jwtService.config.acceptableSecrets.find(acceptableSecret => tryValidateToken(token, acceptableSecret));\r\n\r\n        if(acceptableSecret != undefined) {\r\n            return done(null, acceptableSecret);\r\n        }\r\n        return done(null,null); // let express-jwt handle the error to get 401\r\n    },\r\n    /**\r\n     * Valid jwt token will hold payload object in \"req.user\"\r\n     */\r\n    jwtMiddleware: function () {\r\n        let result = expressJwt({\r\n            secret: this.findValidSecret, algorithms: [this.config.algorithm]\r\n        }).unless({\r\n            path: [\r\n                '/api/test',\r\n                '/api/security/test',\r\n                '/api/security/login',\r\n                /\\/public*/,\r\n                '/api/obavijesti/obavijest',\r\n                '/api/obavijesti/obavijestCategoryGroup',\r\n                '/api/obavijesti/obavijestForCategoryFTS',\r\n                '/api/obavijesti/obavijestiKategorija',\r\n                '/api/obavijesti/obavijestiKategorijaAll',\r\n                '/api/obavijesti/obavijestForCategory',\r\n                '/api/forum/kategorije',\r\n                '/api/forum/potkategorije',\r\n                '/api/forum/komentari',\r\n                '/api/forum/objave',\r\n                '/api/forum/objavaPrilozi',\r\n                '/api/resursi/ResursiKategorije',\r\n                '/api/resursi/ResursiPotkategorije',\r\n                '/api/resursi/ResursiKomentari',\r\n                '/api/resursi/ResursiObjave',\r\n                '/api/resursi/ResursiObjavaPrilozi',\r\n                '/api/profile/profile',\r\n                '/api/profile/osobniPodaciVrste',\r\n                '/api/profile/getDrzave',\r\n                '/api/profile/profileVrsta',\r\n                '/api/profile/attachments',\r\n                '/api/profile/uploadedFile',\r\n                '/api/profile/vrstaClanstva',\r\n                '/api/profile/clanoviVrsta',\r\n                '/api/google/oauth',\r\n                '/api/ankete/ankete',\r\n                '/api/ankete/predlosci',\r\n                '/api/ankete/anketa/solved/check',\r\n                '/api/ankete/anketa/solved',\r\n                '/api/ankete/anketa/statistika',\r\n                '/api/ankete/predlozak/templating',\r\n                '/api/security/usernameExists',\r\n                '/api/google/oauth/complete',\r\n                '/api/security/appUserInsert',\r\n                '/api/security/findUserByUsername',\r\n                '/api/security/resendConfirmEmail',\r\n                '/api/security/verifyAccount',\r\n                '/api/security/sendPassChangeEmail',\r\n                '/api/security/resetForgottenPassword',\r\n                '/api/security/aaiLogin',\r\n                '/api/security/ldapLogin',\r\n                /\\/*test/\r\n\r\n            ]\r\n        });\r\n        return result;\r\n    },\r\n};\r\n\r\njwtService.init();\r\n\r\nmodule.exports = jwtService;","var express = require('express'),\r\n\trequest = require('request'),\r\n\tcrypt = require('../kripto.js'),\r\n\trouter = express.Router(),\r\n\tdb = require('../db.js'),\r\n\tjwt = require('./jwt'),\r\n\tTYPES = require('tedious').TYPES,\r\n\tkripto = require('../kripto'),\r\n\tfs = require('fs');\r\n\r\nconst ActiveDirectory = require('activedirectory2');\r\n\r\nconst axios = require('axios').default;\r\n\r\nconst { first } = require('rxjs');\r\nconst { uuid } = require('uuidv4');\r\nconst { sendRegistrationMail, sendPassResetEmail } = require('../mail/mail');\r\nconst { handleRequestUser, decryptIfEncrypted, makeObservableConnection, groupFlatProperies } = require('../services/app.service.js');\r\nconst { createUpsertOsobniPodaciRequest } = require('../services/profile.service.js');\r\n\r\nfunction fetchUserLogin(user, res) {\r\n\treturn new Promise((resolve) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Sigurnost].[spApplicationUserLogin_select]', conn, res);\r\n\t\tuser.LoginName && request.addParameter('LoginName', TYPES.NVarChar, user.LoginName);\r\n\t\tuser.LDAPLoginName && request.addParameter('LDAPLoginName', TYPES.NVarChar, user.LDAPLoginName);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, dbUser) => {\r\n\t\t\tconst adminUser = dbUser.find((u) => u.IsAdmin);\r\n\t\t\tif (adminUser) {\r\n\t\t\t\tresolve(adminUser);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(dbUser[0]);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\nfunction fetchUserByPk(PkUsera, res) {\r\n\treturn new Promise((resolve) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Sigurnost].[spApplicationUser_select_NO_JSON]', conn, res);\r\n\t\trequest.addParameter('PkUsera', TYPES.Int, PkUsera);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, dbUser) => {\r\n\t\t\tresolve(dbUser[0]);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction findUserByUUID(UUID, res) {\r\n\treturn new Promise((resolve) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Sigurnost].[spApplicationUserUUID_select]', conn, res);\r\n\t\trequest.addParameter('UUID', TYPES.NVarChar, UUID);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, dbUser) => {\r\n\t\t\tresolve(dbUser[0]);\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n *\r\n * @param {{status:0|1|2|3, user:any, res:any}} , REGISTRIRAN = 0, AKTIVAN = 1, ZABORAVIO_PASS = 2, ADMIN_ISKLJUCIO = 3,\r\n */\r\nfunction setUserAccountActivityStatus({ status, user, res }) {\r\n\treturn new Promise((resolve) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Sigurnost].[spApplicationUserStatusRacuna_Update]', conn, res);\r\n\t\trequest.addParameter('KorisnikPkUsera', TYPES.Int, crypt.decryptString(user.PkUsera));\r\n\t\trequest.addParameter('StatusKorisnika', TYPES.Int, status);\r\n\t\trequest.addParameter('AktivanDaNe', TYPES.Int, user.UserAktivanDaNe);\r\n\t\trequest.addParameter('RowVersion', TYPES.NVarChar, user.RowVersion);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, dbResult) => {\r\n\t\t\tresolve(dbResult[0]);\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n *\r\n * @param {status:0|1|2|3} StatusKorisnika , REGISTRIRAN = 0, AKTIVAN = 1, ZABORAVIO_PASS = 2, ADMIN_ISKLJUCIO = 3,\r\n */\r\nfunction checkKorisnikStatusCanLogin(StatusKorisnika) {\r\n\tswitch (true) {\r\n\t\tcase StatusKorisnika == 0:\r\n\t\t\treturn { rejectLogin: true, message: 'STD:INACTIVE_USER' };\r\n\t\tcase StatusKorisnika == 1:\r\n\t\t\treturn { rejectLogin: false };\r\n\t\tcase StatusKorisnika == 2:\r\n\t\t\treturn { rejectLogin: true, message: 'STD:PASS_RESET_CHECK_MAIL' };\r\n\t\tcase StatusKorisnika == 3:\r\n\t\t\treturn { rejectLogin: true, message: 'STD:BANNED_ACC' };\r\n\t\tdefault:\r\n\t\t\treturn { rejectLogin: true, message: 'STD:INACTIVE_USER' };\r\n\t}\r\n}\r\n\r\nfunction syncWithEduplan({ authHeader, OIB }) {\r\n\treturn new Promise(async (resolve) => {\r\n\t\tconst token = jwt.extractJwt(authHeader);\r\n\t\tconst { API_URL } = global.appConfig.eduplanSync;\r\n\t\ttry {\r\n\t\t\tconst user = await axios.get(API_URL, { headers: { authorization: `Bearer ${token}` }, params: { OIB } });\r\n\t\t\tconst data = (user && user.data) || null;\r\n\t\t\tresolve(data ? groupFlatProperies(data.user) : {});\r\n\t\t} catch (error) {\r\n\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\t\t\treturn resolve({});\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction syncEduplanPayload({ osobniPodaci, eduplanUser, PkUsera }) {\r\n\tconst { meta, nastavnik, student } = eduplanUser;\r\n\tconst dataFeed = { ...meta, ...(nastavnik && nastavnik.PkNastavnikSuradnik ? nastavnik : student) };\r\n\tconst payload = {\r\n\t\t...osobniPodaci,\r\n\t\tSpol: dataFeed.Spol ? (dataFeed.Spol.toLowerCase().startsWith('Mu') ? 'MUSKO' : 'ZENSKO') : null,\r\n\t\tImeUsera: dataFeed.Ime,\r\n\t\tPrezimeUsera: dataFeed.Prezime,\r\n\t\tDatumRodenja: dataFeed.DatumRodjenja || dataFeed.DatumRodenja,\r\n\t\tJMBAG: dataFeed.JMBAG || null,\r\n\t\tEmail: dataFeed.Email || dataFeed.Email1 || dataFeed.Email2,\r\n\t\tPkDrzava: dataFeed.PkDrzava,\r\n\t\tGrad: `${dataFeed.NazivGrada || ''} ${dataFeed.PostanskiBroj || ''} ${dataFeed.PostanskiBrojPA || ''}`,\r\n\t\tAdresa: dataFeed.Adresa || dataFeed.AdresaKucna,\r\n\t\tMobitel: dataFeed.BrojMobitela || dataFeed.Mobitel\r\n\t};\r\n\treturn {\r\n\t\tbody: {\r\n\t\t\t...payload,\r\n\t\t\tPkUsera,\r\n\t\t\tPkOsobniPodaciPkUsera: PkUsera\r\n\t\t}\r\n\t};\r\n}\r\n\r\nconst login = {\r\n\thandleLoginPermit: (dbUser, reject) => {\r\n\t\tif (dbUser.UserAktivanDaNe == 0) {\r\n\t\t\treturn reject({ message: 'STD:INACTIVE_USER' });\r\n\t\t}\r\n\t\tconst status = checkKorisnikStatusCanLogin(dbUser.StatusKorisnika);\r\n\t\tif (status.rejectLogin) {\r\n\t\t\treturn reject({ message: status.message });\r\n\t\t}\r\n\t\treturn null;\r\n\t},\r\n\r\n\tregisterInWithLDAP: function ({ LoginName, Lozinka }, res) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst client = new ActiveDirectory({\r\n\t\t\t\turl: global.appConfig.ldap.ActiveDirectoryApi,\r\n\t\t\t\tusername: LoginName,\r\n\t\t\t\tpassword: Lozinka,\r\n\t\t\t\tbaseDN: global.appConfig.ldap.baseDN\r\n\t\t\t});\r\n\t\t\tclient.authenticate(LoginName, Lozinka || 'wrong_pass_if_empty', async (err, auth) => {\r\n\t\t\t\tif (err) return reject({ message: 'STD:INVALID_CREDENTIALS' });\r\n\r\n\t\t\t\tclient.findUser(LoginName, async (err, user) => {\r\n\t\t\t\t\tif (err) return reject({ message: 'STD:INVALID_CREDENTIALS' });\r\n\r\n\t\t\t\t\tconst { sn, givenName, userPrincipalName, sAMAccountName } = user;\r\n\t\t\t\t\tconst insertedUser = await insertUser(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tPrezimeUsera: sn || '-',\r\n\t\t\t\t\t\t\tImeUsera: givenName || '-',\r\n\t\t\t\t\t\t\tLDAPLoginName: sAMAccountName,\r\n\t\t\t\t\t\t\tLoginName: sAMAccountName,\r\n\t\t\t\t\t\t\tLozinka: uuid(),\r\n\t\t\t\t\t\t\tObaveznaIzmjenaLozinkeDaNe: 0,\r\n\t\t\t\t\t\t\tEmail: userPrincipalName,\r\n\t\t\t\t\t\t\tUserAktivanDaNe: 1,\r\n\t\t\t\t\t\t\tStatusKorisnika: 1\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tres,\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t\tresolve(jwt.loginJwt({ ...insertedUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\tsignInWithLDAP: function ({ LoginName, Lozinka }, res) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst client = new ActiveDirectory({\r\n\t\t\t\turl: global.appConfig.ldap.ActiveDirectoryApi\r\n\t\t\t});\r\n\t\t\tclient.authenticate(LoginName, Lozinka || 'wrong_pass_if_empty', async (err, auth) => {\r\n\t\t\t\tconsole.log(err, auth);\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treject({ message: 'STD:INVALID_CREDENTIALS' });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet dbUser = null;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst credential = LoginName.split(global.appConfig.ldap.ldapDomena)[0];\r\n\t\t\t\t\t\tdbUser = await fetchUserLogin({ LDAPLoginName: credential }, res);\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\treject({ message: 'STD:INVALID_CREDENTIALS' });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (dbUser) {\r\n\t\t\t\t\t\tthis.handleLoginPermit(dbUser, reject);\r\n\t\t\t\t\t\tresolve(jwt.loginJwt({ ...dbUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\t\t\t\t\t}\r\n\t\t\t\t\treject({ message: 'STD:INVALID_CREDENTIALS' });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\t/**\r\n\t *\r\n\t * @param {any} req\r\n\t * @returns {Promise<Object|string>}  {error: string} | token: string\r\n\t */\r\n\tuserLogin: function (req, res, user) {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet dbUser = null;\r\n\t\t\ttry {\r\n\t\t\t\tdbUser = await fetchUserLogin(user, res);\r\n\t\t\t} catch (error) {\r\n\t\t\t\treject({ message: 'STD:INVALID_CREDENTIALS' });\r\n\t\t\t}\r\n\t\t\tif (dbUser) {\r\n\t\t\t\tthis.handleLoginPermit(dbUser, reject);\r\n\t\t\t\tif (user.LoginName === kripto.decryptAdminPassword(user.Lozinka, false)) {\r\n\t\t\t\t\t//TODO DB login dobar?\r\n\t\t\t\t\tresolve(jwt.loginJwt({ ...dbUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\t\t\t\t} else if (user.Lozinka == kripto.decryptString(dbUser.Lozinka)) {\r\n\t\t\t\t\tresolve(jwt.loginJwt({ ...dbUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treject({ message: 'STD:INVALID_CREDENTIALS' });\r\n\t\t});\r\n\t},\r\n\taaiLogin: function (req, res, user) {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tconst { givenName, hrEduPersonUniqueID, sn, hrEduPersonOIB } = user;\r\n\t\t\tlet dbUser = null;\r\n\t\t\ttry {\r\n\t\t\t\tdbUser = await fetchUserLogin({ LoginName: hrEduPersonUniqueID }, res);\r\n\t\t\t} catch (error) {\r\n\t\t\t\treject({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t}\r\n\t\t\tconst findOsobniPodaciForUser = (PkUsera) => {\r\n\t\t\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\t\t\tconst request = db.createRequest('[Alumni].[spOsobniPodaci_select]', conn, res);\r\n\t\t\t\trequest.addParameter('PkUsera', TYPES.Int, decryptIfEncrypted(PkUsera));\r\n\t\t\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t\t\t};\r\n\r\n\t\t\tif (dbUser) {\r\n\t\t\t\tconst finishAAIUser = () => {\r\n\t\t\t\t\tthis.handleLoginPermit(dbUser, reject);\r\n\t\t\t\t\tresolve(jwt.loginJwt({ ...dbUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\t\t\t\t};\r\n\t\t\t\tconst needsUpdate = (param) => (param ? (param == '-' ? true : false) : true);\r\n\r\n\t\t\t\tif (needsUpdate(dbUser.ImeUsera) || needsUpdate(dbUser.PrezimeUsera) || needsUpdate(dbUser.OIB)) {\r\n\t\t\t\t\tconst updateOsobniPodaci = (userMeta) => {\r\n\t\t\t\t\t\tconst { ImeUsera, PrezimeUsera, OIB } = userMeta;\r\n\r\n\t\t\t\t\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\t\t\t\t\tconst request = db.createRequest('[Alumni].[spOsobniPodaci_update]', conn, res);\r\n\t\t\t\t\t\trequest.addParameter('PkUsera', TYPES.Int, decryptIfEncrypted(dbUser.PkUsera));\r\n\t\t\t\t\t\trequest.addParameter('ImeUsera', TYPES.NVarChar, needsUpdate(ImeUsera) ? givenName : ImeUsera);\r\n\t\t\t\t\t\trequest.addParameter('PrezimeUsera', TYPES.NVarChar, needsUpdate(PrezimeUsera) ? sn : PrezimeUsera);\r\n\t\t\t\t\t\trequest.addParameter('OIB', TYPES.NVarChar, needsUpdate(OIB) ? hrEduPersonOIB : OIB);\r\n\r\n\t\t\t\t\t\treturn makeObservableConnection(request, conn, res, db);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\treturn findOsobniPodaciForUser(dbUser.PkUsera)\r\n\t\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t\t.subscribe(([userMeta]) =>\r\n\t\t\t\t\t\t\tupdateOsobniPodaci(userMeta)\r\n\t\t\t\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t\t\t\t.subscribe((result) => {\r\n\t\t\t\t\t\t\t\t\tfinishAAIUser();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfinishAAIUser();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst insertedUser = await insertUser(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tPrezimeUsera: sn || '-',\r\n\t\t\t\t\t\t\tImeUsera: givenName || '-',\r\n\t\t\t\t\t\t\tLDAPLoginName: null,\r\n\t\t\t\t\t\t\tLoginName: hrEduPersonUniqueID,\r\n\t\t\t\t\t\t\tLozinka: uuid(),\r\n\t\t\t\t\t\t\tObaveznaIzmjenaLozinkeDaNe: 0,\r\n\t\t\t\t\t\t\tEmail: null,\r\n\t\t\t\t\t\t\tUserAktivanDaNe: 1,\r\n\t\t\t\t\t\t\tStatusKorisnika: 1\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tres,\r\n\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t{ OIB: hrEduPersonOIB || '-' }\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (hrEduPersonOIB) {\r\n\t\t\t\t\t\tconst eduplanUser = await syncWithEduplan({ authHeader: `Bearer ${jwt.loginJwt({ OIB: hrEduPersonOIB })}`, OIB: hrEduPersonOIB });\r\n\t\t\t\t\t\tif (eduplanUser && eduplanUser.meta && eduplanUser.meta.PkUsera) {\r\n\t\t\t\t\t\t\treturn findOsobniPodaciForUser(insertedUser.PkUsera)\r\n\t\t\t\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t\t\t\t.subscribe(([userMeta]) => {\r\n\t\t\t\t\t\t\t\t\tconst osobniPodaciPayload = syncEduplanPayload({ osobniPodaci: userMeta, eduplanUser, PkUsera: decryptIfEncrypted(insertedUser.PkUsera) });\r\n\t\t\t\t\t\t\t\t\tconst { request, conn } = createUpsertOsobniPodaciRequest(osobniPodaciPayload, res);\r\n\t\t\t\t\t\t\t\t\tmakeObservableConnection(request, conn, res, db)\r\n\t\t\t\t\t\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t\t\t\t\t\t.subscribe({\r\n\t\t\t\t\t\t\t\t\t\t\tnext: async (finished) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst syncedUser = await fetchUserLogin({ LoginName: hrEduPersonUniqueID }, res);\r\n\t\t\t\t\t\t\t\t\t\t\t\tresolve(jwt.loginJwt({ ...syncedUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tresolve(jwt.loginJwt({ ...insertedUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\terror: (err) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treject({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresolve(jwt.loginJwt({ ...insertedUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresolve(jwt.loginJwt({ ...insertedUser, ...{ currDatabase: res.locals.currDatabase } }));\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\treject({ message: 'STD:INVALID_REQUEST' });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\nrouter.get('/test', function (req, res) {\r\n\tres.send({ message: 'OK' });\r\n});\r\nrouter.get('/test/auth', function (req, res) {\r\n\tres.send(req.user);\r\n});\r\n\r\nrouter.put('/syncEduplan', async function (req, res) {\r\n\tconst { osobniPodaci, OIB, PkUsera } = req.body;\r\n\tconst eduplanUser = await syncWithEduplan({ authHeader: req.headers.authorization, OIB });\r\n\tconst osobniPodaciPayload = syncEduplanPayload({ osobniPodaci, eduplanUser, PkUsera });\r\n\tconst { request, conn } = createUpsertOsobniPodaciRequest(osobniPodaciPayload, res);\r\n\tmakeObservableConnection(request, conn, res, db)\r\n\t\t.pipe(first())\r\n\t\t.subscribe({\r\n\t\t\tnext: (finished) => {\r\n\t\t\t\tres.send(osobniPodaciPayload);\r\n\t\t\t},\r\n\t\t\terror: (err) => {\r\n\t\t\t\tres.send(err);\r\n\t\t\t}\r\n\t\t});\r\n});\r\n\r\nrouter.put('/refreshJWT', async function (req, res) {\r\n\tconst { token } = req.body;\r\n\tconst { payload } = jwt.decodeToken(token) || {};\r\n\tif (payload) {\r\n\t\tconst { LoginName } = payload;\r\n\t\tconst dbUser = await fetchUserLogin({ LoginName }, res);\r\n\t\tif (dbUser) {\r\n\t\t\tres.send({ token: jwt.loginJwt({ ...dbUser, ...{ currDatabase: res.locals.currDatabase } }) });\r\n\t\t}\r\n\t} else {\r\n\t\tres.send({});\r\n\t}\r\n});\r\n\r\nrouter.post('/ldapLogin', async function (req, res) {\r\n\tif (req.body && req.body.user) {\r\n\t\tconst { LoginName, Lozinka } = req.body.user;\r\n\t\ttry {\r\n\t\t\tconst token = await login.signInWithLDAP({ LoginName: LoginName + global.appConfig.ldap.ldapDomena, Lozinka }, res);\r\n\t\t\tif (token) {\r\n\t\t\t\tres.send({ token });\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// acc doesnt exist\r\n\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\t\t\ttry {\r\n\t\t\t\tconst token = await login.registerInWithLDAP({ LoginName: LoginName + global.appConfig.ldap.ldapDomena, Lozinka }, res);\r\n\t\t\t\tif (token) {\r\n\t\t\t\t\tres.send({ token });\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\nrouter.post('/login', async function (req, res) {\r\n\tif (req.body && req.body.user) {\r\n\t\tconst { LoginName, Lozinka } = req.body.user;\r\n\t\tif (LoginName.endsWith(global.appConfig.ldap.ldapDomena)) {\r\n\t\t\ttry {\r\n\t\t\t\tconst token = await login.signInWithLDAP({ LoginName, Lozinka }, res);\r\n\t\t\t\tif (token) {\r\n\t\t\t\t\tres.send({ token });\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tglobal.appConfig.ukljuciConsoleLog.ukljuciStackTrace && console.trace(error);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlogin\r\n\t\t\t.userLogin(req, res, req.body.user)\r\n\t\t\t.then((token) => {\r\n\t\t\t\tres.send({ token: token });\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tres.status(401).send(err);\r\n\t\t\t});\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:INVALID_REQUEST' });\r\n\t}\r\n});\r\n\r\nrouter.post('/aaiLogin', function (req, res) {\r\n\tif (req.body) {\r\n\t\tconst { givenName, hrEduPersonUniqueID, sn, hrEduPersonOIB } = req.body;\r\n\t\tlogin\r\n\t\t\t.aaiLogin(req, res, { givenName, hrEduPersonUniqueID, sn, hrEduPersonOIB })\r\n\t\t\t.then((token) => {\r\n\t\t\t\tres.send({ token: token });\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tres.status(401).send(err);\r\n\t\t\t});\r\n\t} else {\r\n\t\tres.status(401).send({ message: 'STD:INVALID_REQUEST' });\r\n\t}\r\n});\r\n\r\nrouter.get('/appUsers', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUser_select]', conn, res);\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\n\r\nrouter.get('/appGroups', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUserGroup_select]', conn, res);\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\n\r\nrouter.get('/userGroup', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationGroupZaUsera_select]', conn, res);\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.query.PkUsera);\r\n\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\nrouter.get('/groupUsers', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUserZaAppGroupu_select]', conn, res);\r\n\trequest.addParameter('PkApplicationUserGroup', TYPES.Int, req.query.PkApplicationUserGroup);\r\n\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\nrouter.post('/appGroupSetUser', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUserApplicationUserGroup_InsertOrDelete]', conn, res);\r\n\trequest.addParameter('KorisnikPkUsera', TYPES.Int, req.body.KorisnikPkUsera);\r\n\trequest.addParameter('PkApplicationUserGroup', TYPES.Int, req.body.PkApplicationUserGroup);\r\n\trequest.addParameter('UserSePridruzujeDaNe', TYPES.Int, req.body.UserSePridruzujeDaNe);\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('User', TYPES.NVarChar, req.body.User);\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\n\r\nfunction insertUser(registerMeta, res, sendMail = true, extraParams = {}) {\r\n\treturn new Promise(async (resolve, reject) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Sigurnost].[spApplicationUser_insert]', conn, res);\r\n\r\n\t\tconst handleLdapUsername = () => {\r\n\t\t\tif (registerMeta.Email && registerMeta.Email.includes('@')) {\r\n\t\t\t\treturn registerMeta.Email.split('@')[0];\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\trequest.addParameter('PrezimeUsera', TYPES.NVarChar, registerMeta.PrezimeUsera);\r\n\t\trequest.addParameter('ImeUsera', TYPES.NVarChar, registerMeta.ImeUsera);\r\n\t\trequest.addParameter('LDAPLoginName', TYPES.NVarChar, handleLdapUsername());\r\n\t\trequest.addParameter('LoginName', TYPES.NVarChar, registerMeta.LoginName);\r\n\t\trequest.addParameter('Lozinka', TYPES.NVarChar, kripto.encryptString(registerMeta.Lozinka));\r\n\t\trequest.addParameter('ObaveznaIzmjenaLozinkeDaNe', TYPES.Int, registerMeta.ObaveznaIzmjenaLozinkeDaNe);\r\n\t\trequest.addParameter('Email', TYPES.NVarChar, registerMeta.Email);\r\n\t\trequest.addParameter('UserAktivanDaNe', TYPES.Int, registerMeta.UserAktivanDaNe);\r\n\t\trequest.addParameter('StatusKorisnika', TYPES.Int, registerMeta.StatusKorisnika || 0);\r\n\t\trequest.addParameter('UUID', TYPES.NVarChar, uuid());\r\n\t\trequest.addParameter('PkUseraUnos', TYPES.Int, null);\r\n\t\trequest.addParameter('User', TYPES.NVarChar, null);\r\n\t\trequest.addParameter('Claims', TYPES.NVarChar, registerMeta.UserClaims || JSON.stringify(global.appConfig.jwtConfig.defaultUserClaims));\r\n\t\trequest.addOutputParameter('PkUsera', TYPES.Int, null);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, async (output, outputParams, data) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\tconst { PkUsera } = outputParams;\r\n\t\t\t\t\tconst dbUser = await fetchUserByPk(PkUsera, res);\r\n\t\t\t\t\tsendMail && sendRegistrationMail(dbUser, res.locals.language);\r\n\t\t\t\t\tconst { OIB } = extraParams;\r\n\t\t\t\t\tconst { request: upsertOsobniPodaciReq, conn: upsertConn } = createUpsertOsobniPodaciRequest(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbody: {\r\n\t\t\t\t\t\t\t\tSpol: null,\r\n\t\t\t\t\t\t\t\tImeUsera: dbUser.ImeUsera,\r\n\t\t\t\t\t\t\t\tPrezimeUsera: dbUser.PrezimeUsera,\r\n\t\t\t\t\t\t\t\tDatumRodenja: null,\r\n\t\t\t\t\t\t\t\tOIB: OIB ? OIB : null,\r\n\t\t\t\t\t\t\t\tJMBAG: null,\r\n\t\t\t\t\t\t\t\tPkDrzava: null,\r\n\t\t\t\t\t\t\t\tGrad: null,\r\n\t\t\t\t\t\t\t\tAdresa: null,\r\n\t\t\t\t\t\t\t\tEmail: dbUser.Email,\r\n\t\t\t\t\t\t\t\tMobitel: null,\r\n\t\t\t\t\t\t\t\tLoginName: null,\r\n\t\t\t\t\t\t\t\tPkUsera: PkUsera,\r\n\t\t\t\t\t\t\t\tPkOsobniPodaciPkUsera: null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tres\r\n\t\t\t\t\t);\r\n\t\t\t\t\tdb.execStoredProcFromNode(upsertOsobniPodaciReq, upsertConn, res, async (output, outputParams, data) => {\r\n\t\t\t\t\t\tresolve(dbUser);\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject({ message: 'STD:REGISTER_FAILED' });\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nrouter.post('/appUserInsert', async function (req, res) {\r\n\tlet userName = null;\r\n\ttry {\r\n\t\tif (req.body.LoginName) {\r\n\t\t\tconst dbUser = await fetchUserLogin(req.body, res);\r\n\t\t\tif (dbUser) userName = dbUser.LoginName;\r\n\t\t} else {\r\n\t\t\treturn res.status(500).send({ message: 'STD:NO_USERNAME_PROVIDED' });\r\n\t\t}\r\n\t\tif (userName == req.body.LoginName) {\r\n\t\t\treturn res.status(500).send({ message: 'STD:USERNAME_USED' });\r\n\t\t} else {\r\n\t\t\tconst insertedUser = await insertUser(req.body, res);\r\n\t\t\treturn res.status(200).send(insertedUser);\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tres.status(500).send(error);\r\n\t}\r\n});\r\n\r\nrouter.post('/resendConfirmEmail', async function (req, res) {\r\n\ttry {\r\n\t\tconst { PkUsera } = req.body;\r\n\t\tconst dbUser = await fetchUserByPk(PkUsera, res);\r\n\t\tconst result = await sendRegistrationMail(dbUser, res.locals.language);\r\n\t\tglobal.systemLogger.log({\r\n\t\t\tlevel: 'info',\r\n\t\t\tmessage: 'IMAP-GMAIL: ' + JSON.stringify(result)\r\n\t\t});\r\n\t\tres.status(200).send({ message: 'OK' });\r\n\t} catch (error) {\r\n\t\tglobal.systemLogger.log({\r\n\t\t\tlevel: 'info',\r\n\t\t\tmessage: 'IMAP-GMAIL: ' + JSON.stringify(error)\r\n\t\t});\r\n\t\tres.status(500).send({ ...error, message: 'STD:EMAIL_NO_SEND' });\r\n\t}\r\n});\r\n\r\nrouter.post('/verifyAccount', async function (req, res) {\r\n\ttry {\r\n\t\tconst account = await findUserByUUID(req.body.UUID, res);\r\n\t\tif (account) {\r\n\t\t\tawait setUserAccountActivityStatus({ status: 1, user: { ...account, UserAktivanDaNe: 1 }, res });\r\n\t\t\tres.status(200).send(await findUserByUUID(req.body.UUID, res));\r\n\t\t} else {\r\n\t\t\tres.status(500).send({ message: 'STD:ACC_NO_CONFIRM' });\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tres.status(500).send({ ...error, message: 'STD:ACC_NO_CONFIRM' });\r\n\t}\r\n});\r\n\r\nrouter.post('/findUserByUsername', async function (req, res) {\r\n\ttry {\r\n\t\tconst account = await fetchUserLogin(req.body, res);\r\n\t\tif (req.body.onlyAvatar && account) {\r\n\t\t\treturn res.status(200).send({\r\n\t\t\t\tAvatarPath: account.AvatarPath\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (account) {\r\n\t\t\treturn res.status(200).send({\r\n\t\t\t\tImeUsera: account.ImeUsera,\r\n\t\t\t\tPkUsera: account.PkUsera,\r\n\t\t\t\tPrezimeUsera: account.PrezimeUsera,\r\n\t\t\t\tEmail: account.Email\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tres.status(500).send({ ...error, message: 'STD:INVALID_CREDENTIALS' });\r\n\t}\r\n});\r\n\r\nrouter.post('/sendPassChangeEmail', async function (req, res) {\r\n\tif (req.body.PkUsera || req.body.LoginName) {\r\n\t\tlet account = null;\r\n\t\ttry {\r\n\t\t\tif (req.body.LoginName) {\r\n\t\t\t\taccount = await fetchUserLogin(req.body, res);\r\n\t\t\t} else if (req.body.PkUsera) {\r\n\t\t\t\taccount = await fetchUserByPk(req.body.PkUsera, res);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\treturn res.status(500).send({ ...error, message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t\tif (account) {\r\n\t\t\ttry {\r\n\t\t\t\tawait setUserAccountActivityStatus({ status: 2, user: account, res });\r\n\t\t\t\tconst result = await sendPassResetEmail(account, res.locals.language);\r\n\t\t\t\tglobal.systemLogger.log({\r\n\t\t\t\t\tlevel: 'info',\r\n\t\t\t\t\tmessage: 'IMAP-GMAIL: ' + JSON.stringify(result)\r\n\t\t\t\t});\r\n\t\t\t\tres.status(200).send({\r\n\t\t\t\t\tImeUsera: account.ImeUsera,\r\n\t\t\t\t\tPkUsera: account.PkUsera,\r\n\t\t\t\t\tPrezimeUsera: account.PrezimeUsera,\r\n\t\t\t\t\tEmail: account.Email\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tglobal.systemLogger.log({\r\n\t\t\t\t\tlevel: 'info',\r\n\t\t\t\t\tmessage: 'IMAP-GMAIL: ' + JSON.stringify(error)\r\n\t\t\t\t});\r\n\t\t\t\tres.status(500).send({ ...error, message: 'STD:EMAIL_NO_SEND' });\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn res.status(500).send({ message: 'STD:INVALID_REQUEST' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(500).send({ message: 'STD:NO_USERNAME_PROVIDED' });\r\n\t}\r\n});\r\n\r\nfunction resetUserPassword(user, res) {\r\n\treturn new Promise((resolve) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('[Sigurnost].[spApplicationUserResetPassword]', conn, res);\r\n\t\trequest.addParameter('PkUsera', TYPES.Int, crypt.decryptString(user.PkUsera));\r\n\t\trequest.addParameter('Lozinka', TYPES.NVarChar, crypt.encryptString(user.Lozinka));\r\n\t\trequest.addParameter('RowVersion', TYPES.NVarChar, user.RowVersion);\r\n\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, dbResult) => {\r\n\t\t\tresolve(dbResult[0]);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nrouter.post('/resetForgottenPassword', async function (req, res) {\r\n\tif (req.body.Lozinka) {\r\n\t\ttry {\r\n\t\t\tif (req.body.PkUsera) {\r\n\t\t\t\tawait resetUserPassword({ ...(await fetchUserByPk(req.body.PkUsera, res)), Lozinka: req.body.Lozinka }, res);\r\n\t\t\t\tawait setUserAccountActivityStatus({ status: 1, user: await fetchUserByPk(req.body.PkUsera, res), res });\r\n\t\t\t\tres.status(200).send({ message: 'OK' });\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).send({ message: 'STD:PASS_ERROR_RESET' });\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(500).send({ message: 'STD:PASS_ERROR_RESET' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(500).send({ message: 'STD:NO_PASSWORD_PROVIDED' });\r\n\t}\r\n});\r\n\r\nrouter.post('/verifyCaptcha', async function (req, res) {\r\n\tconst options = {\r\n\t\turl: 'https://www.google.com/recaptcha/api/siteverify',\r\n\t\tform: {\r\n\t\t\tsecret: req.body.captchaSecretKey,\r\n\t\t\tresponse: req.body.captchaToken\r\n\t\t}\r\n\t};\r\n\trequest.post(options, (err, httpResponse, body) => {\r\n\t\tif (err) {\r\n\t\t\tres.send(body);\r\n\t\t}\r\n\t\tres.send(body);\r\n\t});\r\n});\r\n\r\nrouter.post('/appUserUpdate', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUser_update]', conn, res);\r\n\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('PrezimeUsera', TYPES.NVarChar, req.body.PrezimeUsera);\r\n\trequest.addParameter('ImeUsera', TYPES.NVarChar, req.body.ImeUsera);\r\n\trequest.addParameter('LDAPLoginName', TYPES.NVarChar, req.body.LDAPLoginName);\r\n\trequest.addParameter('LoginName', TYPES.NVarChar, req.body.LoginName);\r\n\trequest.addParameter('ObaveznaIzmjenaLozinkeDaNe', TYPES.Int, req.body.ObaveznaIzmjenaLozinkeDaNe);\r\n\trequest.addParameter('Email', TYPES.NVarChar, req.body.Email);\r\n\trequest.addParameter('UserAktivanDaNe', TYPES.Int, req.body.UserAktivanDaNe);\r\n\trequest.addParameter('RowVersion', TYPES.NVarChar, req.body.RowVersion);\r\n\trequest.addParameter('PkUseraPromjena', TYPES.Int, req.body.PkUseraPromjena);\r\n\trequest.addParameter('User', TYPES.NVarChar, req.body.User);\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\n\r\nrouter.post('/appUserAktivanUpdate', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUserAktivan_Update]', conn, res);\r\n\trequest.addParameter('KorisnikPkUsera', TYPES.Int, req.body.KorisnikPkUsera);\r\n\trequest.addParameter('AktivanDaNe', TYPES.Bit, req.body.AktivanDaNe);\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('RowVersion', TYPES.NVarChar, req.body.RowVersion);\r\n\trequest.addParameter('User', TYPES.NVarChar, req.body.User);\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\n\r\nrouter.get('/userPravaApp', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spPravaKorisnika_select]', conn, res);\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.query.PkUsera);\r\n\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\nrouter.post('/adminChangePasswordForUser', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUser_AdminChangePassword]', conn, res);\r\n\r\n\trequest.addParameter('KorisnikPkUsera', TYPES.Int, req.body.KorisnikPkUsera);\r\n\trequest.addParameter('NovaLozinka', TYPES.NVarChar, kripto.encryptString(req.body.NovaLozinka));\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('RowVersion', TYPES.NVarChar, req.body.RowVersion);\r\n\trequest.addParameter('User', TYPES.NVarChar, req.body.User);\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\n\r\nrouter.post('/changePassword', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUser_ChangePassword]', conn, res);\r\n\trequest.addParameter('KorisnikPkUsera', TYPES.Int, req.body.KorisnikPkUsera);\r\n\trequest.addParameter('StaraLozinka', TYPES.NVarChar, kripto.encryptString(req.body.StaraLozinka));\r\n\trequest.addParameter('NovaLozinka', TYPES.NVarChar, kripto.encryptString(req.body.NovaLozinka));\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('User', TYPES.NVarChar, req.body.User);\r\n\tdb.execStoredProc(request, conn, res, '[]');\r\n});\r\n\r\nrouter.post('/usernameExists', function (req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('[Sigurnost].[spApplicationUserLogin_select]', conn, res);\r\n\trequest.addParameter('LoginName', TYPES.NVarChar, req.body.LoginName);\r\n\r\n\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, dbUser) => {\r\n\t\tres.send({ used: dbUser.length ? true : false });\r\n\t});\r\n});\r\n\r\nmodule.exports = { securityRouter: router, login: login, fetchUserByPk: fetchUserByPk };\r\n","var crypto = require('crypto');\r\n\r\nlet encObj = {};\r\n\r\n//konfiguracijske varijable za kriptiranje \r\n// algoritam za dekodiranje konfig varijabli\r\nconst cfgEncAlgorithm = 'aes-256-ctr',\r\n    // kljuc za dekodiranje konfig varijabli\r\n    cfgSecret = {\r\n        // iv mora biti 16 byte dug\r\n        iv: 'd6F3Efeqd6F3Efeq'.toString('hex').slice(0, 16),\r\n        // key mora biti 32 byte dug\r\n        key: Buffer.from(\"d6F3Efeqd6F3Efeqd6F3Efeqd6F3Efeq\".toString().slice(0, 32), 'utf8')\r\n    };\r\n\r\nencObj.cfgKeyDecrypt = function (inputString) {\r\n    let decryptString = '';\r\n    try {\r\n        var decipher = crypto.createDecipheriv(cfgEncAlgorithm, cfgSecret.key, cfgSecret.iv)\r\n        decryptString = decipher.update(inputString, 'hex', 'utf8')\r\n        decryptString += decipher.final('utf8');\r\n    }\r\n    catch (error) {\r\n        global.systemLogger.log({\r\n            level: 'error',\r\n            message: 'Greška: dekripcija cfgKey: ' + inputString + ' : ' + error.message\r\n        });\r\n    }\r\n    return decryptString;\r\n}\r\n\r\nencObj.cfgKeyEncrypt = function (inputString) {\r\n    var cryptString = '';\r\n    try {\r\n        var cipher = crypto.createCipheriv(cfgEncAlgorithm, cfgSecret.key, cfgSecret.iv);\r\n        cryptString = cipher.update(inputString, 'utf8', 'hex');\r\n        cryptString += cipher.final('hex');\r\n    }\r\n    catch (error) {\r\n        global.systemLogger.log({\r\n            level: 'error',\r\n            message: 'Greška: enkripcija cfgKey: ' + inputString + ' : ' + error.message\r\n        });\r\n    }\r\n    return cryptString;\r\n};\r\n\r\n// algoritam za kodiranje&dekodiranje podataka\r\n// dataCryptoAlg aes-256-ctr\r\n// dataSecretiv 448942efd74d41000dc5e2a64333\r\n// dataSecretkey masterofpuppets2Lama.3e5t6csksjuhseikuhiuowse\r\n\r\nconst dataCryptoAlgorithm = encObj.cfgKeyDecrypt(global.appConfig.codes.delta),\r\n    // saltevi za poboljsanje enkripcije\r\n    dataSecret = {\r\n        iv: encObj.cfgKeyDecrypt(global.appConfig.codes.alpha).toString('hex').slice(0, 16),\r\n        key: Buffer.from(encObj.cfgKeyDecrypt(global.appConfig.codes.beta).toString().slice(0, 32), 'utf8')\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar encryptString = encObj.encryptString = function (inputString) {\r\n    if (inputString && inputString !== '' && inputString !== null && inputString !== undefined && inputString.length > 0) {\r\n        try {\r\n            const cipher = crypto.createCipheriv(dataCryptoAlgorithm, dataSecret.key, dataSecret.iv);\r\n            let encrypted = cipher.update(inputString, 'utf8', 'hex');\r\n            encrypted += cipher.final('hex');\r\n            return encrypted;\r\n        } catch (error) {\r\n            global.systemLogger.log({\r\n                level: 'warn',\r\n                message: 'Greška u enkripciji stringa: ' + inputString + ' ' + error.message\r\n            });\r\n            return;\r\n        }\r\n    } else {\r\n        return inputString;\r\n    }\r\n\r\n};\r\n\r\nvar decryptString = encObj.decryptString = function (inputString) {\r\n    if (inputString && inputString !== '' && inputString !== null && inputString !== undefined && inputString.length > 0) {\r\n        try {\r\n            const decipher = crypto.createDecipheriv(dataCryptoAlgorithm, dataSecret.key, dataSecret.iv);\r\n            let decrypted = decipher.update(inputString, 'hex', 'utf8');\r\n            decrypted += decipher.final('utf8');\r\n            return decrypted;\r\n        } catch (error) {\r\n            global.systemLogger.log({\r\n                level: 'warn',\r\n                message: 'Greška u dekripciji stringa: ' + inputString + ' ' + error.message\r\n            });\r\n            return;\r\n        }\r\n    } else {\r\n        return inputString;\r\n    }\r\n};\r\n\r\nencObj.tryDecryptOrReturnInput = function (inputString) {\r\n    if (inputString && inputString !== '' && inputString !== null && inputString !== undefined && inputString.length > 0) {\r\n        try {\r\n            const decipher = crypto.createDecipheriv(dataCryptoAlgorithm, dataSecret.key, dataSecret.iv);\r\n            let decrypted = decipher.update(inputString, 'hex', 'utf8');\r\n            decrypted += decipher.final('utf8');\r\n            return decrypted;\r\n        } catch (error) {\r\n            return inputString\r\n        }\r\n    } else {\r\n        return inputString;\r\n    }\r\n}\r\n\r\n\r\n// --------------------------------------------------------\r\n// DEKRIPCIJA ZA SLANJE SA KLIJENTA NA SERVER\r\n// --------------------------------------------------------\r\nvar dekriptirajPk = encObj.dekriptirajPk = function (obj) {\r\n    if (obj) {\r\n\r\n        let kolone = [];// kolone koje se enkriptiraju iz configa --lowercase\r\n        global.appConfig.encryptionConfig.encryptColumns.forEach(element => {\r\n            kolone.push(element.toLowerCase())\r\n        });\r\n\r\n        let propertyArray = Object.keys(obj);\r\n\r\n        // ovdje moram radit foreach jer properti moze biti objekt koji rekurzivno poziva funkciju\r\n        propertyArray.forEach(prop => {\r\n\r\n            if (typeof obj[prop] == \"object\" && obj[prop] !== null) {\r\n                dekriptirajPk(obj[prop]);\r\n            } else {\r\n\r\n\r\n                if (prop && kolone.includes(prop.toLowerCase())) {\r\n                    obj[prop] = decryptString(obj[prop]);\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n// --------------------------------------------------------\r\n// ENKRIPCIJA ZA SLANJE NA KLIJENT\r\n// --------------------------------------------------------\r\nvar encryptColumnsToClient = encObj.encryptColumnsToClient = function (ResultObjArray) {\r\n    // sada kad imam objekte prolazim po property i trazim koje treba enkriptirati\r\n    let vratiErr = false;\r\n\r\n\r\n    if (ResultObjArray && ResultObjArray[0]) {\r\n\r\n        let kolone = []; // kolone koje se enkriptiraju iz configa --lowercase\r\n        global.appConfig.encryptionConfig.encryptColumns.forEach(element => {\r\n            kolone.push(element.toLowerCase())\r\n        });\r\n\r\n        // za svaki objekt u arrayu\r\n        for (const obj of ResultObjArray) {\r\n\r\n\r\n            // pronalazim one kolone koje enkriptiramo\r\n            let propertyArray = Object.keys(obj);\r\n            propertyArray = propertyArray.filter(prop => {\r\n                return kolone.includes(prop.toLowerCase())\r\n            })\r\n\r\n            propertyArray.forEach(prop => {\r\n\r\n                if (prop && obj[prop]) {\r\n                    let enkriptirano = encryptString(obj[prop].toString());\r\n                    if (enkriptirano) {\r\n                        obj[prop] = enkriptirano;\r\n                    } else {\r\n                        vratiErr = true;\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n\r\n            // prekidam i ovaj loop\r\n            if (vratiErr) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (vratiErr == true) {\r\n        return 'NOK';\r\n    } else {\r\n        return ResultObjArray;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  _____________ ADMIN pass hash BEGIN __________\r\n */\r\n\r\nencObj.decryptAdminPassword = function (inputString, log = true) {\r\n    if (inputString && inputString !== '' && inputString !== null && inputString !== undefined && inputString.length > 3) {\r\n        try {\r\n            inputString = removeSaltFromAdminPassword(inputString);\r\n            let date = new Date();\r\n            const [m,y,d] = [date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCFullYear()];\r\n            let keyPayload = m+y+d + dataSecret.key;\r\n            const key = Buffer.from(keyPayload.toString().slice(0, 32), 'utf8')\r\n            const decipher = crypto.createDecipheriv(dataCryptoAlgorithm, key, dataSecret.iv);\r\n            let decrypted = decipher.update(inputString, 'hex', 'utf8');\r\n            decrypted += decipher.final('utf8');\r\n            return decrypted;\r\n        } catch (error) {\r\n            if (log) {\r\n                global.systemLogger.log({\r\n                    level: 'warn',\r\n                    message: 'Greška u dekripciji stringa: ' + inputString + ' ' + error.message\r\n                });\r\n            }\r\n            return;\r\n        }\r\n    } else {\r\n        return inputString;\r\n    }\r\n};\r\n\r\nlet indexSplit = function(value, index)\r\n{\r\n return [value.substring(0, index), value.substring(index)];\r\n}\r\n\r\nlet getRandomText = function(length) {\r\n  let charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".match(/./g);\r\n  let text = \"\";\r\n  for (var i = 0; i < length; i++) text += charset[Math.floor(Math.random() * charset.length)];\r\n  return text;\r\n}\r\nlet addSaltToAdminPassword = function(pass) {\r\n    return indexSplit(pass,1).map(i => i + getRandomText(4)).join('');\r\n}\r\n\r\nlet removeSaltFromAdminPassword = function(pass) {\r\n    return indexSplit(pass,1).map((str,i) => i == 1? str.slice(4,str.length - 4): str).join('')\r\n}\r\n\r\n/**\r\n * @param {string} username username od acc-a u kojeg admin zeli ući\r\n * @description kreira dnevni pass za admina\r\n */\r\n encObj.generateAdminPassword = function (username, log = true) {\r\n    if (username && username !== '' && username !== null && username !== undefined && username.length > 3) {\r\n        try {\r\n            let date = new Date();\r\n            const [m,y,d] = [date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCFullYear()];\r\n            let keyPayload = m+y+d + dataSecret.key;\r\n            const key = Buffer.from(keyPayload.toString().slice(0, 32), 'utf8');\r\n            const cipher = crypto.createCipheriv(dataCryptoAlgorithm, key, dataSecret.iv);\r\n            let encrypted = cipher.update(username, 'utf8', 'hex');\r\n            encrypted += cipher.final('hex'); // 0 +1, len -2\r\n            \r\n            return addSaltToAdminPassword(encrypted);\r\n        } catch (error) {\r\n            if (log) {\r\n                global.systemLogger.log({\r\n                    level: 'warn',\r\n                    message: 'Greška u enkripciji stringa: ' + username + ' ' + error.message\r\n                });\r\n            }\r\n            return;\r\n        }\r\n    } else {\r\n        return username;\r\n    }\r\n};\r\n/**\r\n *  _____________ ADMIN pass hash END __________\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = encObj;","const { mailInit, constructEmailOptions, sendMail, translate } = require('../mailService');\r\nconst path = require('path');\r\n\r\nasync function sendAnketaLinkMail({ user, lang, PkAnketa }) {\r\n\tconst { anketaLink } = global.appConfig.mailConfig.emails;\r\n\tconst { mailConfig } = global.appConfig;\r\n\r\n\tconst mailTransport = mailInit();\r\n\tconst options = constructEmailOptions({\r\n\t\tlang: lang,\r\n\t\tdest: {\r\n\t\t\tto: user.Email,\r\n\t\t\tsubject: translate(lang, 'ANKETA_LINK')\r\n\t\t},\r\n\t\ttemplateParams: {\r\n\t\t\tANKETA_LINK: translate(lang, 'ANKETA_LINK'),\r\n\t\t\tANKETA_LINK_HEADER: translate(lang, 'ANKETA_LINK_HEADER'),\r\n\t\t\tPOSTOVANI: translate(lang, 'POSTOVANI'),\r\n\t\t\time: user.ImeUsera,\r\n\t\t\tprezime: user.PrezimeUsera,\r\n\t\t\tANKETA_LINK_TEXT_0: translate(lang, 'ANKETA_LINK_TEXT_0'),\r\n\t\t\tlink: `${anketaLink.url}/${PkAnketa}`,\r\n\t\t\tANKETA_BUTTON_LABEL: translate(lang, 'ANKETA_BUTTON_LABEL'),\r\n\t\t\tORG_NEED_HELP: translate(lang, 'ORG_NEED_HELP'),\r\n\t\t\tACC_CONFIRM_BACKUP_LINK: translate(lang, 'ACC_CONFIRM_BACKUP_LINK'),\r\n\t\t\torganizationContactLink: mailConfig.incomingMailParams.organizationContactLink,\r\n\t\t\tstaticUrl: mailConfig.incomingMailParams.staticUrl,\r\n\t\t\tORGANIZATION: translate(lang, 'ORGANIZATION'),\r\n\t\t\tADDRESS: translate(lang, 'ADDRESS'),\r\n\t\t\tappLink: mailConfig.incomingMailParams.appLink\r\n\t\t},\r\n\t\ttemplateUrl: path.join(anketaLink.template),\r\n\t\tattachments: anketaLink.attachments\r\n\t});\r\n\treturn await sendMail({ mailTransport, options });\r\n}\r\n\r\nmodule.exports = { sendAnketaLinkMail };\r\n","const { mailInit, constructEmailOptions, sendMail, translate } = require('../mailService');\r\nconst path = require('path');\r\n\r\nasync function sendObavijestLinkMail({ user, lang, PkObavijest }) {\r\n\tconst { obavijestLink } = global.appConfig.mailConfig.emails;\r\n\tconst { mailConfig } = global.appConfig;\r\n\r\n\tconst mailTransport = mailInit();\r\n\tconst options = constructEmailOptions({\r\n\t\tlang: lang,\r\n\t\tdest: {\r\n\t\t\tto: user.Email,\r\n\t\t\tsubject: translate(lang, 'OBAVIJEST_LINK')\r\n\t\t},\r\n\t\ttemplateParams: {\r\n\t\t\tOBAVIJEST_LINK: translate(lang, 'OBAVIJEST_LINK'),\r\n\t\t\tOBAVIJEST_LINK_HEADER: translate(lang, 'OBAVIJEST_LINK_HEADER'),\r\n\t\t\tPOSTOVANI: translate(lang, 'POSTOVANI'),\r\n\t\t\time: user.ImeUsera,\r\n\t\t\tprezime: user.PrezimeUsera,\r\n\t\t\tOBAVIJEST_LINK_TEXT_0: translate(lang, 'OBAVIJEST_LINK_TEXT_0'),\r\n\t\t\tlink: `${obavijestLink.url}/${PkObavijest}`,\r\n\t\t\tOBAVIJEST_BUTTON_LABEL: translate(lang, 'OBAVIJEST_BUTTON_LABEL'),\r\n\t\t\tORG_NEED_HELP: translate(lang, 'ORG_NEED_HELP'),\r\n\t\t\tACC_CONFIRM_BACKUP_LINK: translate(lang, 'ACC_CONFIRM_BACKUP_LINK'),\r\n\t\t\torganizationContactLink: mailConfig.incomingMailParams.organizationContactLink,\r\n\t\t\tstaticUrl: mailConfig.incomingMailParams.staticUrl,\r\n\t\t\tORGANIZATION: translate(lang, 'ORGANIZATION'),\r\n\t\t\tADDRESS: translate(lang, 'ADDRESS'),\r\n\t\t\tappLink: mailConfig.incomingMailParams.appLink\r\n\t\t},\r\n\t\ttemplateUrl: path.join(obavijestLink.template),\r\n\t\tattachments: obavijestLink.attachments\r\n\t});\r\n\treturn await sendMail({ mailTransport, options });\r\n}\r\n\r\nmodule.exports = { sendObavijestLinkMail };\r\n","const path = require(\"path\");\r\nconst { mailInit, constructEmailOptions, sendMail, translate } = require(\"../mailService\");\r\n\r\n\r\nasync function sendPassResetEmail(user, lang) {\r\n    const { passReset } = global.appConfig.mailConfig.emails;\r\n    const { mailConfig } = global.appConfig;\r\n\r\n    const mailTransport = mailInit();\r\n    const options = constructEmailOptions({\r\n        lang: lang,\r\n        dest: {\r\n            to: user.Email,\r\n            subject: translate(lang, \"RESET_PASSWORD\"),\r\n        },\r\n        templateParams: {\r\n            RESET_PASSWORD: translate(lang, \"RESET_PASSWORD\"),\r\n            RESET_PASSWORD_HEADER: translate(lang, \"RESET_PASSWORD_HEADER\"),\r\n            POSTOVANI: translate(lang, \"POSTOVANI\"),\r\n            ime: user.ImeUsera,\r\n            prezime: user.PrezimeUsera,\r\n            RESET_PASSWORD_TEXT_0: translate(lang, \"RESET_PASSWORD_TEXT_0\"),\r\n            link: `${passReset.url}/${user.UUID}`,\r\n            RESET_PASSWORD_BTN_LABEL: translate(lang, 'RESET_PASSWORD_BTN_LABEL'),\r\n            ORG_NEED_HELP: translate(lang, 'ORG_NEED_HELP'),\r\n            RESET_PASSWORD_BACKUP_LINK: translate(lang, 'RESET_PASSWORD_BACKUP_LINK'),\r\n            organizationContactLink: mailConfig.incomingMailParams.organizationContactLink,\r\n            staticUrl: mailConfig.incomingMailParams.staticUrl,\r\n            ORGANIZATION: translate(lang, \"ORGANIZATION\"),\r\n            ADDRESS: translate(lang, \"ADDRESS\"),\r\n            appLink: mailConfig.incomingMailParams.appLink,\r\n        },\r\n        attachments: passReset.attachments,\r\n        templateUrl: path.join(passReset.template)\r\n    });\r\n\r\n    return await sendMail({ mailTransport, options });\r\n}\r\n\r\nmodule.exports = { sendPassResetEmail };","const { mailInit, constructEmailOptions, sendMail, translate } = require(\"../mailService\");\r\nconst path = require(\"path\");\r\n\r\nasync function sendRegistrationMail(user, lang) {\r\n\tconst { accConfirm } = global.appConfig.mailConfig.emails;\r\n\tconst { mailConfig } = global.appConfig;\r\n\r\n\tconst mailTransport = mailInit();\r\n\tconst options = constructEmailOptions({\r\n        lang: lang,\r\n\t\tdest: {\r\n\t\t\tto: user.Email,\r\n\t\t\tsubject: translate(lang, \"CONFIRM_ACCOUNT\"),\r\n\t\t},\r\n\t\ttemplateParams: {\r\n\t\t\tCONFIRM_ACCOUNT: translate(lang, \"CONFIRM_ACCOUNT\"),\r\n\t\t\tCONFIRM_ACCOUNT_HEADER: translate(lang, \"CONFIRM_ACCOUNT_HEADER\"),\r\n\t\t\tPOSTOVANI: translate(lang, \"POSTOVANI\"),\r\n\t\t\time: user.ImeUsera,\r\n\t\t\tprezime: user.PrezimeUsera,\r\n\t\t\tCONFIRM_ACCOUNT_TEXT_0: translate(lang, \"CONFIRM_ACCOUNT_TEXT_0\"),\r\n\t\t\tlink: `${accConfirm.url}/${user.UUID}`,\r\n\t\t\tACC_CONFIRM_BTN_LABEL: translate(lang, 'ACC_CONFIRM_BTN_LABEL'),\r\n\t\t\tORG_NEED_HELP: translate(lang, 'ORG_NEED_HELP'),\r\n\t\t\tACC_CONFIRM_BACKUP_LINK: translate(lang, 'ACC_CONFIRM_BACKUP_LINK'),\r\n\t\t\torganizationContactLink: mailConfig.incomingMailParams.organizationContactLink,\r\n\t\t\tstaticUrl: mailConfig.incomingMailParams.staticUrl,\r\n\t\t\tORGANIZATION: translate(lang, \"ORGANIZATION\"),\r\n\t\t\tADDRESS: translate(lang, \"ADDRESS\"),\r\n\t\t\tappLink: mailConfig.incomingMailParams.appLink\r\n\t\t},\r\n\t\ttemplateUrl: path.join(accConfirm.template),\r\n\t\tattachments: accConfirm.attachments\r\n\t});\r\n\treturn await sendMail({ mailTransport, options });\r\n}\r\n\r\nmodule.exports = { sendRegistrationMail };","module.exports = {\r\n    ORGANIZATION: \"Alumni\",\r\n    ADDRESS: \"Stinice 12, 21000 Split\",\r\n    CONFIRM_ACCOUNT: \"Account confirmation\",\r\n    CONFIRM_ACCOUNT_HEADER: \"Account confirmation\",\r\n    POSTOVANI: \"Dear\",\r\n    CONFIRM_ACCOUNT_TEXT_0: \"With this email, we require that you verify your newly created account by clicking the following link.\",\r\n    PASS_CHANGE_BTN_LABEL: \"Change Password\",\r\n    ACC_CONFIRM_BTN_LABEL: \"Confirm Account\",\r\n    ORG_NEED_HELP: \"Do you have a question? Contact us.\",\r\n    ACC_CONFIRM_BACKUP_LINK: \"If you do not see the confirmation button, there is a confirmation link below.\",\r\n    RESET_PASSWORD: \"Reset password\",\r\n    RESET_PASSWORD_HEADER: \"Reset password\",\r\n    RESET_PASSWORD_TEXT_0: \"With this email, we accept your password change request. You can reset your password by clicking the following link.\",\r\n    RESET_PASSWORD_BTN_LABEL: \"Reset password\",\r\n    RESET_PASSWORD_BACKUP_LINK: \"If you do not see the password reset button, there is a link below.\",\r\n    ANKETA_LINK: \"We have a survey for you!\",\r\n    ANKETA_LINK_HEADER: \"We have a survey for you!\",\r\n    ANKETA_LINK_TEXT_0: \"With this email, we invite you to fill in our survey. It will take only a minute. Thank you in advance!\",\r\n    ANKETA_BUTTON_LABEL: \"Continue to survey\",\r\n    OBAVIJEST_LINK: \"We have a notification for you!\",\r\n    OBAVIJEST_LINK_HEADER: \"We have a notification for you!\",\r\n    OBAVIJEST_LINK_TEXT_0: \"With this email we notify you that you have new notification. Click on sent link to view notification. Thank you in advance!\",\r\n    OBAVIJEST_BUTTON_LABEL: \"View notification\"\r\n\r\n\r\n\r\n\r\n}","module.exports = {\r\n\tORGANIZATION: 'Alumni',\r\n\tADDRESS: 'Stinice 12, 21000 Split',\r\n\tCONFIRM_ACCOUNT: 'Potvrda korisničkog računa',\r\n\tCONFIRM_ACCOUNT_HEADER: 'Potvrda korisničkog računa',\r\n\tPOSTOVANI: 'Poštovani/a',\r\n\tCONFIRM_ACCOUNT_TEXT_0: 'Putem ovog e-maila zahtijevamo od vas da klikom na gore priložen gumb potvrdite vaš novokreirani korisnički račun.',\r\n\tPASS_CHANGE_BTN_LABEL: 'Promijeni Lozinku',\r\n\tACC_CONFIRM_BTN_LABEL: 'Potvrdi Račun',\r\n\tORG_NEED_HELP: 'Imate li pitanje? Obratite nam se.',\r\n\tACC_CONFIRM_BACKUP_LINK: 'Ukoliko ne vidite gumb potvrde, ispod se nalazi poveznica za potvrdu.',\r\n\tRESET_PASSWORD: 'Poništavanje lozinke',\r\n\tRESET_PASSWORD_HEADER: 'Poništavanje lozinke',\r\n\tRESET_PASSWORD_TEXT_0: 'Ovom e-poštom prihvaćamo vaš zahtjev za promjenom lozinke. Zaporku možete promijeniti klikom na gore priloženom gumbu.',\r\n\tRESET_PASSWORD_BTN_LABEL: 'Poništi lozinku',\r\n\tRESET_PASSWORD_BACKUP_LINK: 'Ukoliko ne vidite gumb za poništavanje lozinke, ispod se nalazi poveznica.',\r\n\tANKETA_LINK: 'Imamo anketu za vas!',\r\n\tANKETA_LINK_HEADER: 'Imamo anketu za vas!',\r\n\tANKETA_LINK_TEXT_0: 'Ovom e-poštom vas pozivamo da ispunite našu anketu. Trajat će samo minutu. Hvala unaprijed!',\r\n\tANKETA_BUTTON_LABEL: 'Nastavite do ankete',\r\n\tOBAVIJEST_LINK: 'Imamo obavijest za vas!',\r\n\tOBAVIJEST_LINK_HEADER: 'Imamo obavijest za vas!',\r\n\tOBAVIJEST_LINK_TEXT_0: 'Ovom e-poštom vas obaviještavamo da imate novu notifikaciju. Pregled notifikacije možete izvršiti klikom na poslani link. Hvala unaprijed!',\r\n\tOBAVIJEST_BUTTON_LABEL: 'Pregledajte obavijest',\r\n\r\n};\r\n","const { sendRegistrationMail } = require('./emails/sendRegistrationMail');\r\nconst { sendPassResetEmail } = require('./emails/sendPassResetMail');\r\nconst { sendAnketaLinkMail } = require('./emails/sendAnketaLinkMail');\r\nconst { sendObavijestLinkMail } = require('./emails/sendObavijestLinkMail');\r\n\r\nmodule.exports = {\r\n\tsendRegistrationMail,\r\n\tsendPassResetEmail,\r\n\tsendAnketaLinkMail,\r\n\tsendObavijestLinkMail\r\n};\r\n","const nodemailer = require(\"nodemailer\");\r\nconst Handlebars = require(\"handlebars\");\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst templateText = {\r\n\thr: require(\"./i18n/hr\"),\r\n\ten: require(\"./i18n/en\"),\r\n};\r\n\r\nfunction mailInit() {\r\n\t// Autentifikacijski podaci za slanje maila\r\n\tconst { incomingMailParams: mailConfig } = global.appConfig.mailConfig;\r\n\r\n\tlet transportOptions = {\r\n\t\tauth: {\r\n\t\t\tuser: mailConfig.mailUser,\r\n\t\t\tpass: mailConfig.mailPass,\r\n\t\t},\r\n\t};\r\n\r\n\t// Postavljanje konfiguracije za slanje maila\r\n\tif (mailConfig.mailServiceDaNe === \"true\") {\r\n\t\ttransportOptions.service = mailConfig.mailService;\r\n\t} else {\r\n\t\ttransportOptions.host = mailConfig.mailHost;\r\n\t\ttransportOptions.port = mailConfig.mailPort;\r\n\t\ttransportOptions.secure = false;\r\n\t\t// do not fail on invalid certs\r\n\t\ttransportOptions.tls = { rejectUnauthorized: false };\r\n\t}\r\n\t// Kreiranje transporta za slanje maila\r\n\treturn nodemailer.createTransport(transportOptions);\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} lang hr|en\r\n * @param {string} key key from dictionary\r\n * @returns string\r\n */\r\nfunction translate(lang, key) {\r\n\treturn templateText[lang][key];\r\n}\r\n\r\nfunction constructEmailOptions({lang, dest: { to, subject }, templateParams, templateUrl, attachments }) {\r\n\tconst { mailConfig } = global.appConfig;\r\n\tconst source = fs.readFileSync(path.join(templateUrl), \"utf8\");\r\n\tconst template = Handlebars.compile(source);\r\n\treturn {\r\n\t\tfrom: `${translate(lang,'ORGANIZATION')} <${mailConfig.incomingMailParams.mailUser}>`,\r\n\t\tto: to,\r\n\t\tsubject: `Alumni | ${subject}`, //'MyApplication | Password Reset',\r\n\t\thtml: template(templateParams),\r\n\t\tattachments: attachments\r\n\t};\r\n}\r\n\r\nfunction sendMail({mailTransport, options}) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tmailTransport.sendMail(options, (err, info) => {\r\n\t\t\tif (err) return reject(err);\r\n\t\t\treturn resolve(info);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nmodule.exports = {\r\n\tmailInit,\r\n    translate,\r\n    constructEmailOptions,\r\n    sendMail\r\n};\r\n","'use strict';\r\nvar appConfig = require('./config/appConfig.js'), // config se prvi ucitava jer ostali fileovi mozda koriste config\r\n\tbodyParser = require('body-parser'),\r\n\thelmet = require('helmet'),\r\n\tmorgan = require('morgan'),\r\n\tcrypt = require('./kripto.js'),\r\n\tapp = require('express')(),\r\n\texpress = require('express'),\r\n\tpath = require('path'),\r\n\tjwt = require('./jwt/jwt');\r\n\r\n// const { require } = require('app-root-path');\r\nconst { useGlobalAppHandlers } = require('./error.handler');\r\n\r\nconst { handleRequestUser, isAdmin } = require('./services/app.service');\r\n// inicijalizacija loggera\r\nvar winston = require('./winston');\r\nglobal.systemLogger = winston.loggers.get('systemLogger');\r\nglobal.apiLogger = winston.loggers.get('apiLogger');\r\n\r\napp.use(function (req, res, next) {\r\n\tres.header('Access-Control-Allow-Origin', '*');\r\n\tres.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, curr_db, language');\r\n\tres.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n\tnext();\r\n});\r\n\r\napp.use(helmet());\r\napp.use(bodyParser.json({ limit: '5mb' }));\r\napp.use(\r\n\tbodyParser.urlencoded({\r\n\t\tlimit: '5mb',\r\n\t\textended: true\r\n\t})\r\n);\r\n\r\nif (appConfig.appLogParams.apiCallLog == true) {\r\n\tapp.use(\r\n\t\tmorgan(':status :date[iso] :method :url :response-time  :req[query] :req[body] :remote-addr :res[content-length]', {\r\n\t\t\tskip: function (req, res) {\r\n\t\t\t\treturn req.method == 'OPTIONS';\r\n\t\t\t},\r\n\t\t\tstream: global.apiLogger.stream\r\n\t\t})\r\n\t);\r\n}\r\napp.use(async function (req, res, next) {\r\n\tres.locals.currDatabase = (req.headers && req.headers.curr_db) || 'Produkcijska baza podataka';\r\n\tres.locals.language = (req.headers && req.headers.language) || 'hr';\r\n\tif (global.appConfig.encryptionConfig.enkripcijaDaNe) {\r\n\t\tcrypt.dekriptirajPk(req.query);\r\n\t\tcrypt.dekriptirajPk(req.body);\r\n\t}\r\n\tnext();\r\n});\r\n\r\nif (appConfig.mainParams.checkAuthHeader == true) app.use(jwt.jwtMiddleware());\r\n\r\napp.use('/api/pretplata', require('./api/pretplate').pretplateRouter);\r\napp.use('/api/security', require('./jwt/security').securityRouter);\r\napp.use('/api/obavijesti', require('./api/obavijesti'));\r\napp.use('/api/profile', require('./api/profile'));\r\napp.use('/api/forum', require('./api/forum').forumRouter);\r\napp.use('/api/resursi', require('./api/resursi').resursiRouter);\r\napp.use('/api/ankete', require('./api/ankete').anketeRouter);\r\napp.use('/api/administracija', async (req, res, next) => {\r\n\t//Security na router razini, ako osoba nije administrator svi apiji ga odbijaju\r\n\tif ('OPTIONS' == req.method) {\r\n\t\tres.send(200);\r\n\t} else {\r\n\t\tawait isAdmin(req) ? next() : res.status(401).send({ message: 'STD:UNATHORIZED_ACCES' })\r\n\t}\r\n}, require('./api/administracija').administracijaRouter);\r\napp.use('/api', require('./api'));\r\napp.use('/api/google', require('./services/google.oauth2.service').router);\r\napp.use('/public/', express.static(path.join(appConfig.directoryParams.nodeSrv, 'public')));\r\n//ako URL ne pocinje sa API onda je greska\r\napp.use(function (req, res, next) {\r\n\tglobal.systemLogger.log({\r\n\t\tlevel: 'warn',\r\n\t\tmessage: '404 Unknown API URL: ' + req.url\r\n\t});\r\n\tvar err = new Error('Unknown API URL.');\r\n\terr.status = 404;\r\n\tnext(err);\r\n});\r\n// generalna greska....\r\napp.use(function (err, req, res, next) {\r\n\tif (appConfig.ukljuciConsoleLog.ukljuciStackTrace) {\r\n\t\tconsole.trace(err);\r\n\t}\r\n\tglobal.systemLogger.log({\r\n\t\tlevel: 'error',\r\n\t\tmessage: 'ERROR: ' + err.message + err.status\r\n\t});\r\n\tnext(err);\r\n\tres.status(err.status || 500).end();\r\n});\r\n\r\nif (appConfig.ukljuciConsoleLog.ukljuciStackTrace) useGlobalAppHandlers();\r\n\r\n//The 404 ruta UVIJEK MORA BITI ZADNJA RUTA !!!!!!!!\r\napp.get('*', function (req, res) {\r\n\tglobal.systemLogger.log({\r\n\t\tlevel: 'warn',\r\n\t\tmessage: 'Nepoznati API URL ! ' + req.url\r\n\t});\r\n\tres.status(404).send('Nepoznati API URL !');\r\n});\r\n\r\nmodule.exports = app;\r\napp.listen(appConfig.mainParams.applicationPort);\r\nglobal.systemLogger.log({\r\n\tlevel: 'info',\r\n\tmessage: 'Server started at port ' + appConfig.mainParams.applicationPort\r\n});\r\n","const { TYPES } = require('tedious');\r\nconst { constructConnection, makeObservableConnectionWithOutput, makeObservableConnection, exists } = require('./app.service');\r\n\r\nfunction insertPredlozakWithOutput({ predlozak, user, res, db }) {\r\n\tconst { PredlozakNaziv, PredlozakNaslov, PredlozakOpis, ProglasenoAnketomDaNe } = predlozak;\r\n\tconst { request, conn } = constructConnection('Ankete.spPredlozak_upsert', res.locals.currDatabase, res, db);\r\n\trequest.addParameter('PredlozakNaziv', TYPES.NVarChar, PredlozakNaziv);\r\n\trequest.addParameter('PredlozakNaslov', TYPES.NVarChar, PredlozakNaslov);\r\n\trequest.addParameter('PredlozakOpis', TYPES.NVarChar, PredlozakOpis);\r\n\trequest.addParameter('IzbrisanDaNe', TYPES.Int, 0);\r\n\trequest.addParameter('UredivanjeDaNe', TYPES.Int, 1);\r\n\trequest.addParameter('PkUserUnos', TYPES.Int, user.PkUsera);\r\n\trequest.addParameter('PkUsera', TYPES.Int, user.PkUsera);\r\n\t// request.addParameter('DatumUnos', TYPES.Date, DatumUnos);\r\n\trequest.addParameter('PkUserPromjena', TYPES.Int, user.PkUsera);\r\n\trequest.addParameter('User', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\trequest.addParameter('ProglasenoAnketomDaNe', TYPES.Int, ProglasenoAnketomDaNe);\r\n\trequest.addOutputParameter('PkPredlozak', TYPES.Int, null);\r\n\treturn makeObservableConnectionWithOutput(request, conn, res, db, 'PkPredlozak');\r\n}\r\n\r\nfunction updatePredlozakWithOutput({ predlozak, PkPredlozak, user, res, db }) {\r\n\tconst { PredlozakNaziv, PredlozakNaslov, PredlozakOpis, IzbrisanDaNe, UredivanjeDaNe, PkUserUnos, DatumUnos, PkUsera, ProglasenoAnketomDaNe } = predlozak;\r\n\tconst { request, conn } = constructConnection('Ankete.spPredlozak_upsert', res.locals.currDatabase, res, db);\r\n\trequest.addParameter('PredlozakNaziv', TYPES.NVarChar, PredlozakNaziv);\r\n\trequest.addParameter('PredlozakNaslov', TYPES.NVarChar, PredlozakNaslov);\r\n\trequest.addParameter('PredlozakOpis', TYPES.NVarChar, PredlozakOpis);\r\n\trequest.addParameter('IzbrisanDaNe', TYPES.Int, IzbrisanDaNe);\r\n\trequest.addParameter('UredivanjeDaNe', TYPES.Int, UredivanjeDaNe);\r\n\trequest.addParameter('PkUserUnos', TYPES.Int, PkUserUnos);\r\n\trequest.addParameter('PkUsera', TYPES.Int, PkUsera);\r\n\trequest.addParameter('DatumUnos', TYPES.Date, DatumUnos);\r\n\trequest.addParameter('PkUserPromjena', TYPES.Int, user.PkUsera);\r\n\trequest.addParameter('User', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\trequest.addParameter('ProglasenoAnketomDaNe', TYPES.Int, ProglasenoAnketomDaNe);\r\n\trequest.addOutputParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\treturn makeObservableConnectionWithOutput(request, conn, res, db, 'PkPredlozak');\r\n}\r\nfunction insertPitanjePredlozak({ PkPitanje, PkPredlozak, pitanje, user, res, db }) {\r\n\tconst { request, conn } = constructConnection('Ankete.spPredlozakPitanje_Insert', res.locals.currDatabase, res, db);\r\n\tconst { PitanjeRedoslijed } = pitanje;\r\n\r\n\trequest.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\trequest.addParameter('PkPitanje', TYPES.Int, PkPitanje);\r\n\trequest.addParameter('PitanjeRedoslijed', TYPES.Int, PitanjeRedoslijed);\r\n\trequest.addParameter('PkUser', TYPES.Int, user.PkUsera);\r\n\trequest.addParameter('User', TYPES.NVarChar, user.ImePrezimeUsera);\r\n\trequest.addOutputParameter('PkPredlozakPitanje', TYPES.Int, null);\r\n\treturn makeObservableConnectionWithOutput(request, conn, res, db, 'PkPredlozakPitanje');\r\n}\r\n\r\nfunction groupStats(statsPitanja) {\r\n\tconst groupedStatsPitanja = [];\r\n\tstatsPitanja.forEach((s) => {\r\n\t\tlet exists = groupedStatsPitanja.find((gs) => gs.PkPitanje == s.PkPitanje);\r\n\t\tif (exists) {\r\n\t\t\texists.Odgovori.push(s);\r\n\t\t} else {\r\n\t\t\tgroupedStatsPitanja.push({\r\n\t\t\t\tPkPitanje: s.PkPitanje,\r\n\t\t\t\tOdgovori: [s]\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\treturn groupedStatsPitanja;\r\n}\r\nfunction fetchAnketaStatistika({ PkAnketa = null, PkPredlozak = null, db, res }) {\r\n\tconst { request, conn } = constructConnection('Ankete.[spStatistikaAnketa_select]', res.locals.currDatabase, res, db);\r\n\texists(PkAnketa) && request.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\texists(PkPredlozak) && request.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\treturn makeObservableConnection(request, conn, res, db);\r\n}\r\nfunction fetchAnketaStatistikaPitanja({ PkAnketa = null, PkPredlozak = null, db, res }) {\r\n\tconst { request, conn } = constructConnection('Ankete.[spStatistikaAnketaPitanjaOdgovor_select]', res.locals.currDatabase, res, db);\r\n\texists(PkAnketa) && request.addParameter('PkAnketa', TYPES.Int, PkAnketa);\r\n\texists(PkPredlozak) && request.addParameter('PkPredlozak', TYPES.Int, PkPredlozak);\r\n\treturn makeObservableConnection(request, conn, res, db);\r\n}\r\n\r\nmodule.exports = {\r\n\tinsertPredlozakWithOutput,\r\n\tupdatePredlozakWithOutput,\r\n\tinsertPitanjePredlozak,\r\n\tgroupStats,\r\n\tfetchAnketaStatistika,\r\n\tfetchAnketaStatistikaPitanja\r\n};\r\n","const axios = require('axios').default;\r\nconst ONE_SECOND = 1000;\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst crypt = require('../kripto');\r\n\r\nconst { from } = require('rxjs');\r\n\r\nfunction simpleDbResolve(output, outputParams, result, res, errMessage = 'STD:INVALID_REQUEST') {\r\n\tif (output == 'OK') {\r\n\t\treturn res.status(200).send(result);\r\n\t}\r\n\treturn res.status(500).send({ message: errMessage });\r\n}\r\n/**\r\n *\r\n * @param {'Produkcijska baza podataka'|'Testna baza podataka'} dbType\r\n */\r\nasync function pingDatabase(dbType, secure = false) {\r\n\tconst { productionDatabaseServer, testDatabaseServer } = global.appConfig.databaseParams;\r\n\ttry {\r\n\t\tconst swapType = () => (dbType == 'Produkcijska baza podataka' ? productionDatabaseServer : testDatabaseServer);\r\n\t\tconst httpOrHttps = () => (secure ? 'https://' : 'http://');\r\n\t\tconst url = `${httpOrHttps()}${swapType()}`;\r\n\t\tawait axios.get(url, { timeout: ONE_SECOND });\r\n\t\treturn {};\r\n\t} catch (error) {\r\n\t\tconst { response } = error;\r\n\t\tif (!(response && response.status)) {\r\n\t\t\treturn { error: null };\r\n\t\t}\r\n\t\treturn { error: true };\r\n\t}\r\n}\r\n\r\nasync function dbResolveMiddleware(req, res, next) {\r\n\tif (req.method != 'OPTIONS') {\r\n\t\tconst result = await pingDatabase(res.locals.currDatabase, req.secure);\r\n\t\tif (result.error) {\r\n\t\t\tres.status(503).send({ message: 'STD:CHECK_INTERNET_OR_VPN' });\r\n\t\t} else {\r\n\t\t\tnext();\r\n\t\t}\r\n\t} else {\r\n\t\tnext();\r\n\t}\r\n}\r\n/**\r\n *\r\n * @param {string[]} pathParts ['c', 'users', 'user', 'etc']\r\n */\r\nfunction constructDirDepth(pathParts, rootDir = null) {\r\n\tconst { directoryParams } = global.appConfig;\r\n\r\n\treturn pathParts.reduce(\r\n\t\t(acc, dir) => {\r\n\t\t\tconst targetPath = path.join(acc, dir);\r\n\t\t\tif (!fs.existsSync(targetPath)) fs.mkdirSync(targetPath);\r\n\t\t\treturn targetPath;\r\n\t\t},\r\n\t\trootDir ? path.join(rootDir) : path.join(directoryParams.nodeSrv)\r\n\t);\r\n}\r\nfunction atob(a) {\r\n\treturn Buffer.from(a, 'base64').toString('binary');\r\n}\r\n\r\nfunction handleJWT(token) {\r\n\tif (!token) return {};\r\n\tconst base64Url = token.split('.')[1];\r\n\tconst base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n\tconst jsonPayload = decodeURIComponent(\r\n\t\tatob(base64)\r\n\t\t\t.split('')\r\n\t\t\t.map(function (c) {\r\n\t\t\t\treturn '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n\t\t\t})\r\n\t\t\t.join('')\r\n\t);\r\n\r\n\treturn JSON.parse(jsonPayload);\r\n}\r\n\r\nasync function handleRequestUser(req, res) {\r\n\tconst user = req.user;\r\n\tif (user) {\r\n\t\tconst { payload } = user;\r\n\t\tif (payload.PkUsera) {\r\n\t\t\tpayload.PkUsera = +crypt.decryptString(payload.PkUsera);\r\n\t\t}\r\n\t\treturn payload;\r\n\t} else if (req.headers && req.headers.authorization) {\r\n\t\tconst { payload } = handleJWT(req.headers.authorization);\r\n\t\tif (payload.PkUsera) {\r\n\t\t\tpayload.PkUsera = +crypt.decryptString(payload.PkUsera);\r\n\t\t}\r\n\t\treturn payload;\r\n\t} else {\r\n\t\t// const { fetchUserByPk } = require('../jwt/security');\r\n\t\t// const defaultUser = await fetchUserByPk(1, res); // 1 is usually admin user\r\n\t\t// defaultUser.PkUsera = +crypt.decryptString(defaultUser.PkUsera);\r\n\t\t// return defaultUser;\r\n\t\treturn {};\r\n\t}\r\n}\r\n/**\r\n *\r\n * @param {any} test against all possible falsy values (will still return false on \"0\" and \"''\")\r\n * @returns\r\n */\r\nfunction exists(x) {\r\n\tif (x === '[object Object]') return false;\r\n\tif (['null', 'undefined'].includes(x)) return false;\r\n\treturn !!x;\r\n}\r\n/**\r\n *\r\n * @param {any[]} valuesToGroup\r\n * @param {string} key\r\n * @returns {any} grouped by key\r\n */\r\nfunction groupDataByKeySync(valuesToGroup, key) {\r\n\treturn valuesToGroup.reduce((hash, obj) => {\r\n\t\tif (obj[key] === undefined) return hash;\r\n\t\treturn Object.assign(hash, { [obj[key]]: (hash[obj[key]] || []).concat(obj) });\r\n\t}, {});\r\n}\r\n/**\r\n *\r\n * @param {any[]} valuesToGroup array\r\n * @param any[]} properties array of keys to group\r\n * @returns\r\n */\r\nfunction groupByProperties(valuesToGroup, properties) {\r\n\tlet result = [];\r\n\r\n\t// iterate over each item in the original array\r\n\tvaluesToGroup.forEach(function (item) {\r\n\t\t// check if the item belongs in an already created group\r\n\t\tlet added = result.some(function (group) {\r\n\t\t\t// check if the item belongs in this group\r\n\t\t\tlet shouldAdd = properties.every(function (prop) {\r\n\t\t\t\treturn group[0][prop] === item[prop];\r\n\t\t\t});\r\n\t\t\t// add item to this group if it belongs\r\n\t\t\tif (shouldAdd) {\r\n\t\t\t\tgroup.push(item);\r\n\t\t\t}\r\n\t\t\t// exit the loop when an item is added, continue if not\r\n\t\t\treturn shouldAdd;\r\n\t\t});\r\n\r\n\t\t// no matching group was found, so a new group needs to be created for this item\r\n\t\tif (!added) {\r\n\t\t\tresult.push([item]);\r\n\t\t}\r\n\t});\r\n\treturn result;\r\n}\r\n/**\r\n *\r\n * @param {string} input takes the input and tries to decrpyt if successful, returns the decrypted string else the original input\r\n */\r\nfunction decryptIfEncrypted(input) {\r\n\treturn crypt.tryDecryptOrReturnInput(input);\r\n}\r\n\r\nfunction devLogger() {\r\n\treturn new console.Console(fs.createWriteStream('./output.txt'));\r\n}\r\n\r\nfunction forEachOwnProperty(object, iterator) {\r\n\tfor (let property in object) {\r\n\t\tif (Object.prototype.hasOwnProperty.call(object, property)) {\r\n\t\t\titerator(property, object[property]);\r\n\t\t}\r\n\t}\r\n}\r\n/**\r\n *\r\n * @param {any} flat a level 1 depth object containing keys as 'x.y.z':value\r\n * @param {any} unflat returns nested object constructed as {x: { y:{ z: value }}}\r\n * @returns {any[]} unflat\r\n */\r\nfunction groupFlatProperies(flat, unflat = {}) {\r\n\tforEachOwnProperty(flat, function (property, value) {\r\n\t\tproperty = property.split('.');\r\n\r\n\t\tlet currentNode = unflat;\r\n\r\n\t\tfor (let i = 0; i < property.length; i++) {\r\n\t\t\tlet currentProperty = property[i];\r\n\r\n\t\t\tif (typeof currentNode[currentProperty] === 'undefined') {\r\n\t\t\t\tif (i === property.length - 1) {\r\n\t\t\t\t\tcurrentNode[currentProperty] = value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (/^\\+?(0|[1-9]\\d*)$/.test(property[i + 1])) {\r\n\t\t\t\t\t\tcurrentNode[currentProperty] = [];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentNode[currentProperty] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcurrentNode = currentNode[currentProperty];\r\n\t\t}\r\n\t});\r\n\r\n\treturn unflat;\r\n}\r\n\r\nconst constructConnection = (procName, dbName, res, dbContext) => {\r\n\tconst conn = dbContext.createConnection(dbName);\r\n\tconst request = dbContext.createRequest(procName, conn, res);\r\n\treturn { request, conn };\r\n};\r\n\r\nconst makeObservableConnection = (request, conn, res, db) => {\r\n\treturn from(\r\n\t\tnew Promise((resolve) => {\r\n\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\tresolve(result);\r\n\t\t\t\t}\r\n\t\t\t\tresolve([]);\r\n\t\t\t});\r\n\t\t})\r\n\t);\r\n};\r\nconst makeObservableConnectionWithOutput = (request, conn, res, db, key) => {\r\n\treturn from(\r\n\t\tnew Promise((resolve) => {\r\n\t\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\t\tif (output == 'OK') {\r\n\t\t\t\t\tif (key in outputParams) {\r\n\t\t\t\t\t\tresolve({ [key]: outputParams[key] });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresolve({ [key]: null });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresolve({ [key]: null });\r\n\t\t\t});\r\n\t\t})\r\n\t);\r\n};\r\n\r\nconst flatten = (array) => {\r\n\treturn [].concat.apply([], array);\r\n};\r\n\r\nconst stringToSentence = (text) => {\r\n\tif (text) {\r\n\t\ttext = text.replace(/\\s+/g, ' ').trim();\r\n\t\ttext = text[0].toUpperCase() + text.slice(1);\r\n\t\tif (!text.length) return null;\r\n\t\treturn text.endsWith('.') ? text : text + '.';\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\n/**\r\n *\r\n * @param {{modul:string,claim:string}} authParams modul je glavni ulaz ekrana, claim je sta smi radit na ton ekranu\r\n */\r\nasync function hasClaim({ modul, claim }, req) {\r\n\tconst user = await handleRequestUser(req);\r\n\t\r\n\tif (user) {\r\n\t\t//Ukoliko je admin moze radit sta oce\r\n\t\tif (user.IsAdmin) return true;\r\n\t\t\r\n\t\tif (user.Claims) {\r\n\t\t\ttry {\r\n\t\t\t\tconst claims = JSON.parse(user.Claims);\r\n\r\n\t\t\t\treturn claims[modul][claim];\r\n\t\t\t} catch (error) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n\r\nasync function isAdmin(req) {\r\n\tconst user = await handleRequestUser(req);\r\n\r\n\tif (user && user.IsAdmin) {\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nmodule.exports = {\r\n\tsimpleDbResolve,\r\n\tdbResolveMiddleware,\r\n\tconstructDirDepth,\r\n\thandleRequestUser,\r\n\texists,\r\n\tgroupDataByKeySync,\r\n\tgroupByProperties,\r\n\tdecryptIfEncrypted,\r\n\tdevLogger,\r\n\tgroupFlatProperies,\r\n\tconstructConnection,\r\n\tmakeObservableConnection,\r\n\tmakeObservableConnectionWithOutput,\r\n\tflatten,\r\n\tstringToSentence,\r\n\thasClaim,\r\n\tisAdmin\r\n};\r\n","const { google } = require(\"googleapis\");\r\nconst axios = require(\"axios\").default;\r\nconst router = require(\"express\").Router();\r\n\r\nconst { google: googleCfg } = global.appConfig.oauth;\r\nconst oauth2Client = new google.auth.OAuth2(\r\n\tgoogleCfg.GOOGLE_CLIENT_ID,\r\n\tgoogleCfg.GOOGLE_CLIENT_SECRET,\r\n\t/*\r\n\t * This is where Google will redirect the user after they\r\n\t * give permission to your application\r\n\t */\r\n\tgoogleCfg.redirectUrl\r\n);\r\n\r\nfunction getGoogleAuthURL() {\r\n\t/*\r\n\t * Generate a url that asks permissions to the user's email and profile\r\n\t */\r\n\tconst scopes = [\"https://www.googleapis.com/auth/userinfo.profile\", \"https://www.googleapis.com/auth/userinfo.email\"];\r\n\r\n\treturn oauth2Client.generateAuthUrl({\r\n\t\taccess_type: \"offline\",\r\n\t\tprompt: \"consent\",\r\n\t\tscope: scopes, // If you only need one scope you can pass it as string\r\n\t});\r\n}\r\n\r\nasync function getGoogleUser({ code }) {\r\n\tconst { tokens } = await oauth2Client.getToken(code);\r\n\t// Fetch the user's profile with the access token and bearer\r\n\tconst googleUser = await axios.get(`https://www.googleapis.com/oauth2/v1/userinfo?alt=json&access_token=${tokens.access_token}`, {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${tokens.id_token}`,\r\n\t\t\t},\r\n\t\t})\r\n\t\t.then(res => res.data)\r\n\t\t.catch(error => {\r\n\t\t\tthrow new Error(error.message);\r\n\t\t});\r\n\r\n\treturn googleUser;\r\n}\r\n\r\nrouter.get('/oauth/complete', async (req, res) => {\r\n\ttry {\r\n\t\tconst user = await getGoogleUser(req.query);\r\n\t\tres.send(user);\r\n\t\t\t\r\n\t} catch (error) {\r\n\t\tres.status(500).send({...error , message: \"STD:GOOGLE_AUTH_ERROR\"});\t\t\r\n\t}\r\n});\r\nrouter.get(\"/oauth\", async (req, res) => {\r\n\tres.send({url:getGoogleAuthURL()});\r\n});\r\nmodule.exports = {\r\n\tgetGoogleUser,\r\n\trouter,\r\n};\r\n","const db = require('../db.js');\r\nconst { TYPES } = require('tedious');\r\nconst { exists } = require('./app.service.js');\r\n\r\nfunction createUpsertOsobniPodaciRequest(req, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.[spOsobniPodaci_Upsert]', conn, res);\r\n\trequest.addParameter('Spol', TYPES.NVarChar, req.body.Spol);\r\n\trequest.addParameter('ImeUsera', TYPES.NVarChar, req.body.ImeUsera);\r\n\trequest.addParameter('PrezimeUsera', TYPES.NVarChar, req.body.PrezimeUsera);\r\n\trequest.addParameter('DatumRodenja', TYPES.NVarChar, req.body.DatumRodenja);\r\n\trequest.addParameter('OIB', TYPES.NVarChar, req.body.OIB);\r\n\trequest.addParameter('JMBAG', TYPES.NVarChar, req.body.JMBAG);\r\n\trequest.addParameter('PkDrzava', TYPES.NVarChar, req.body.PkDrzava);\r\n\trequest.addParameter('Grad', TYPES.NVarChar, req.body.Grad);\r\n\trequest.addParameter('Adresa', TYPES.NVarChar, req.body.Adresa);\r\n\treq.body.Email && request.addParameter('Email', TYPES.NVarChar, req.body.Email);\r\n\trequest.addParameter('Mobitel', TYPES.NVarChar, req.body.Mobitel);\r\n\treq.body.LDAPLoginName && request.addParameter('LDAPLoginName', TYPES.NVarChar, req.body.LDAPLoginName);\r\n\trequest.addParameter('PkUsera', TYPES.Int, req.body.PkUsera);\r\n\trequest.addParameter('PrivatnostPodataka', TYPES.Bit, req.body.PrivatnostPodataka);\r\n\trequest.addOutputParameter('PkOsobniPodaciPkUsera', TYPES.Int, req.body.PkOsobniPodaciPkUsera);\r\n\treturn { request, conn };\r\n}\r\n\r\nfunction createDatotekaInsertRequest({ Naziv, Opis, PkDatoteka, originalname, encoding, size, mimetype, destination, filename, path, PkUseraUnos, PkUseraPromjena, UserUnos, UserPromjena }, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.[spDatoteka_insert]', conn, res);\r\n\trequest.addParameter('originalname', TYPES.NVarChar, originalname);\r\n\trequest.addParameter('encoding', TYPES.NVarChar, encoding);\r\n\trequest.addParameter('size', TYPES.Int, size);\r\n\trequest.addParameter('mimetype', TYPES.NVarChar, mimetype);\r\n\trequest.addParameter('destination', TYPES.NVarChar, destination);\r\n\trequest.addParameter('filename', TYPES.NVarChar, filename);\r\n\trequest.addParameter('path', TYPES.NVarChar, path);\r\n\trequest.addParameter('PkUseraUnos', TYPES.Int, PkUseraUnos);\r\n\trequest.addParameter('PkUseraPromjena', TYPES.Int, PkUseraPromjena);\r\n\trequest.addParameter('UserUnos', TYPES.NVarChar, UserUnos);\r\n\trequest.addParameter('UserPromjena', TYPES.NVarChar, UserPromjena);\r\n\trequest.addParameter('Naziv', TYPES.NVarChar, Naziv);\r\n\trequest.addParameter('Opis', TYPES.NVarChar, Opis);\r\n\trequest.addOutputParameter('PkDatoteka', TYPES.Int, exists(PkDatoteka) ? PkDatoteka : null);\r\n\treturn { request, conn };\r\n}\r\nfunction createDatotekaRelacijaRequest({ PkForumObjava, PkResursObjava, PkUsera, PkDatoteka, PkDatotekaCoverImage, PkForumObjavaKomentar = null, PkResursObjavaKomentar = null }, res) {\r\n\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\tconst request = db.createRequest('Alumni.[spDatotekaRelacija_insert]', conn, res);\r\n\tPkForumObjava && request.addParameter('PkForumObjava', TYPES.Int, PkForumObjava);\r\n\tPkResursObjava && request.addParameter('PkResursObjava', TYPES.Int, PkResursObjava);\r\n\tPkUsera && request.addParameter('PkUsera', TYPES.Int, PkUsera);\r\n\tPkDatoteka && request.addParameter('PkDatoteka', TYPES.Int, PkDatoteka);\r\n\tPkDatotekaCoverImage && request.addParameter('PkDatotekaCoverImage', TYPES.Int, PkDatotekaCoverImage);\r\n\tPkForumObjavaKomentar && request.addParameter('PkForumObjavaKomentar', TYPES.Int, PkForumObjavaKomentar);\r\n\tPkResursObjavaKomentar && request.addParameter('PkResursObjavaKomentar', TYPES.Int, PkResursObjavaKomentar);\r\n\treturn { request, conn };\r\n}\r\n\r\nfunction fetchDatotekaInfo({ PkDatoteka }, res) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.spDatotekaRelacija_select', conn, res);\r\n\t\trequest.addParameter('PkDatoteka', TYPES.Int, PkDatoteka);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tresolve(result);\r\n\t\t\t} else {\r\n\t\t\t\treject('STD:INVALID_REQUEST');\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction deletePrilog(Relacija, res) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst conn = db.createConnection(res.locals.currDatabase);\r\n\t\tconst request = db.createRequest('Alumni.spDatoteka_delete', conn, res);\r\n\t\trequest.addParameter('PkDatoteka', TYPES.Int, Relacija.PkDatoteka);\r\n\t\trequest.addParameter('PkDatotekaCoverImage', TYPES.Int, Relacija.PkDatotekaCoverImage);\r\n\t\tdb.execStoredProcFromNode(request, conn, res, (output, outputParams, result) => {\r\n\t\t\tif (output == 'OK') {\r\n\t\t\t\tresolve(result);\r\n\t\t\t} else {\r\n\t\t\t\treject('STD:INVALID_REQUEST');\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nmodule.exports = {\r\n\tcreateUpsertOsobniPodaciRequest,\r\n\tcreateDatotekaInsertRequest,\r\n\tcreateDatotekaRelacijaRequest,\r\n\tfetchDatotekaInfo,\r\n\tdeletePrilog\r\n};\r\n","const fs = require('fs');\r\n\r\nfunction pripremiFoldere() {\r\n\tfs.exists(global.appConfig.directoryParams.uploadPath, function (exists) {\r\n\t\tif (exists) {\r\n\t\t} else {\r\n\t\t\tfs.mkdir(global.appConfig.directoryParams.uploadPath, function (err) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tglobal.systemLogger.log({\r\n\t\t\t\t\t\tlevel: 'error',\r\n\t\t\t\t\t\tmessage: 'tools.pripremiFoldere(): Error in  uploadPath folder creation '\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\tfs.exists(global.appConfig.directoryParams.uploadPathTest, function (exists) {\r\n\t\tif (exists) {\r\n\t\t} else {\r\n\t\t\tfs.mkdir(global.appConfig.directoryParams.uploadPathTest, function (err) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\t// logger.log('error', 'tools.pripremiFoldere(): Error in uploadPath folder creation');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\tfs.exists(global.appConfig.directoryParams.nodeSrv + 'logs', function (exists) {\r\n\t\tif (exists) {\r\n\t\t} else {\r\n\t\t\tfs.mkdir(global.appConfig.directoryParams.nodeSrv + 'logs', function (err) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\t//  logger.log('error', 'tools.pripremiFoldere(): Error in logs folder creation');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction checkFileExists(filePath) {\r\n\ttry {\r\n\t\tfs.statSync(filePath);\r\n\t\treturn true;\r\n\t} catch (e) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nfunction checkFolderExists(filePath) {\r\n\ttry {\r\n\t\tfs.statSync(filePath);\r\n\t\treturn true;\r\n\t} catch (e) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n/**\r\n *\r\n * @param {string} str\r\n * @param {boolean} deleteDiacritic\r\n * @returns\r\n */\r\nfunction removeDiacritics(str, deleteDiacritic = false) {\r\n\tvar defaultDiacriticsRemovalMap = [\r\n\t\t{\r\n\t\t\tbase: 'A',\r\n\t\t\tletters: /[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'AA',\r\n\t\t\tletters: /[\\uA732]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'AE',\r\n\t\t\tletters: /[\\u00C6\\u01FC\\u01E2]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'AO',\r\n\t\t\tletters: /[\\uA734]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'AU',\r\n\t\t\tletters: /[\\uA736]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'AV',\r\n\t\t\tletters: /[\\uA738\\uA73A]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'AY',\r\n\t\t\tletters: /[\\uA73C]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'B',\r\n\t\t\tletters: /[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'C',\r\n\t\t\tletters: /[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'D',\r\n\t\t\tletters: /[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'DZ',\r\n\t\t\tletters: /[\\u01F1\\u01C4]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'Dz',\r\n\t\t\tletters: /[\\u01F2\\u01C5]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'E',\r\n\t\t\tletters: /[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'F',\r\n\t\t\tletters: /[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'G',\r\n\t\t\tletters: /[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'H',\r\n\t\t\tletters: /[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'I',\r\n\t\t\tletters: /[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'J',\r\n\t\t\tletters: /[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'K',\r\n\t\t\tletters: /[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'L',\r\n\t\t\tletters: /[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'LJ',\r\n\t\t\tletters: /[\\u01C7]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'Lj',\r\n\t\t\tletters: /[\\u01C8]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'M',\r\n\t\t\tletters: /[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'N',\r\n\t\t\tletters: /[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'NJ',\r\n\t\t\tletters: /[\\u01CA]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'Nj',\r\n\t\t\tletters: /[\\u01CB]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'O',\r\n\t\t\tletters: /[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'OI',\r\n\t\t\tletters: /[\\u01A2]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'OO',\r\n\t\t\tletters: /[\\uA74E]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'OU',\r\n\t\t\tletters: /[\\u0222]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'P',\r\n\t\t\tletters: /[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'Q',\r\n\t\t\tletters: /[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'R',\r\n\t\t\tletters: /[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'S',\r\n\t\t\tletters: /[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'T',\r\n\t\t\tletters: /[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'TZ',\r\n\t\t\tletters: /[\\uA728]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'U',\r\n\t\t\tletters: /[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'V',\r\n\t\t\tletters: /[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'VY',\r\n\t\t\tletters: /[\\uA760]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'W',\r\n\t\t\tletters: /[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'X',\r\n\t\t\tletters: /[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'Y',\r\n\t\t\tletters: /[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'Z',\r\n\t\t\tletters: /[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'a',\r\n\t\t\tletters: /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'aa',\r\n\t\t\tletters: /[\\uA733]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'ae',\r\n\t\t\tletters: /[\\u00E6\\u01FD\\u01E3]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'ao',\r\n\t\t\tletters: /[\\uA735]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'au',\r\n\t\t\tletters: /[\\uA737]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'av',\r\n\t\t\tletters: /[\\uA739\\uA73B]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'ay',\r\n\t\t\tletters: /[\\uA73D]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'b',\r\n\t\t\tletters: /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'c',\r\n\t\t\tletters: /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'd',\r\n\t\t\tletters: /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'dz',\r\n\t\t\tletters: /[\\u01F3\\u01C6]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'e',\r\n\t\t\tletters: /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'f',\r\n\t\t\tletters: /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'g',\r\n\t\t\tletters: /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'h',\r\n\t\t\tletters: /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'hv',\r\n\t\t\tletters: /[\\u0195]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'i',\r\n\t\t\tletters: /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'j',\r\n\t\t\tletters: /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'k',\r\n\t\t\tletters: /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'l',\r\n\t\t\tletters: /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'lj',\r\n\t\t\tletters: /[\\u01C9]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'm',\r\n\t\t\tletters: /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'n',\r\n\t\t\tletters: /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'nj',\r\n\t\t\tletters: /[\\u01CC]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'o',\r\n\t\t\tletters: /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'oi',\r\n\t\t\tletters: /[\\u01A3]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'ou',\r\n\t\t\tletters: /[\\u0223]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'oo',\r\n\t\t\tletters: /[\\uA74F]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'p',\r\n\t\t\tletters: /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'q',\r\n\t\t\tletters: /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'r',\r\n\t\t\tletters: /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 's',\r\n\t\t\tletters: /[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 't',\r\n\t\t\tletters: /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'tz',\r\n\t\t\tletters: /[\\uA729]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'u',\r\n\t\t\tletters: /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'v',\r\n\t\t\tletters: /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'vy',\r\n\t\t\tletters: /[\\uA761]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'w',\r\n\t\t\tletters: /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'x',\r\n\t\t\tletters: /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'y',\r\n\t\t\tletters: /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g\r\n\t\t},\r\n\t\t{\r\n\t\t\tbase: 'z',\r\n\t\t\tletters: /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g\r\n\t\t}\r\n\t];\r\n\tif (str) {\r\n\t\tif (deleteDiacritic) {\r\n\t\t\tfor (let i = 0; i < str.length; i++) {\r\n\t\t\t\tconst diacriticToDelete = defaultDiacriticsRemovalMap.find((d) => (str[i].match(d.letters) && d.base != str[i]));\r\n\t\t\t\tif (diacriticToDelete != undefined) {\r\n\t\t\t\t\tstr = str.substring(0, i) + str.substring(i + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = 0; i < defaultDiacriticsRemovalMap.length; i++) {\r\n\t\t\t\tstr = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn str;\r\n}\r\n// promijeni sve karaktere koji ne smiju biti u filename-u\r\nfunction cleanUpFileName(str) {\r\n\tvar defaultCharactersRemovalMap = [\r\n\t\t{\r\n\t\t\tbase: '_',\r\n\t\t\tletters: /[\\u003E\\uFE65\\uFF1E\\u003C\\uFE64\\uFF1C\\u003A\\u003F\\u002A\\u003D\\u002B\\u0023]/g\r\n\t\t\t// >,<,?,*, =,+,#\r\n\t\t}\r\n\t];\r\n\r\n\tfor (var i = 0; i < defaultCharactersRemovalMap.length; i++) {\r\n\t\tstr = str.replace(defaultCharactersRemovalMap[i].letters, defaultCharactersRemovalMap[i].base);\r\n\t}\r\n\treturn str;\r\n}\r\n\r\nmodule.exports = {\r\n\tcleanUpFileName,\r\n\tremoveDiacritics,\r\n\tcheckFolderExists,\r\n\tcheckFileExists,\r\n\tpripremiFoldere\r\n};\r\n","// var appRoot = require('app-root-path');\r\nconst winston = require('winston');\r\nconst { format } = require('winston');\r\nconst { combine, timestamp, label, json, printf } = format;\r\n\r\n// log levels=  error: 0,  warn: 1,  info: 2,  http: 3,  verbose: 4,  debug: 5,  silly: 6\r\n\r\nconst myFormat = printf(({ level, message, label, timestamp }) => {\r\n  return `${timestamp} [${label}] ${level}: ${message}`;\r\n});\r\n\r\n\r\nwinston.loggers.add('apiLogger', {\r\n  format: combine(\r\n    label({ label: 'ApiLog' }),\r\n    timestamp(),\r\n    myFormat,\r\n    format.json()\r\n  ),\r\n  transports: [\r\n    new winston.transports.File({\r\n      filename: global.appConfig.appRootPath + '/logs/api-logs.log',\r\n      json: false,\r\n      maxsize: 5242880,\r\n      maxFiles: 5,\r\n    }),\r\n    new winston.transports.Console(),\r\n  ]\r\n});\r\nwinston.loggers.add('systemLogger', {\r\n  format: combine(\r\n    label({ label: 'SystemLog' }),\r\n    timestamp(),\r\n    myFormat,\r\n    format.json()\r\n  ),\r\n  transports: [\r\n    new winston.transports.File({\r\n      filename: global.appConfig.appRootPath + '/logs/system-logs.log',\r\n      json: false,\r\n      maxsize: 5242880,\r\n      maxFiles: 5,\r\n    }),\r\n    new winston.transports.Console(),\r\n  ]\r\n});\r\n\r\n\r\n/* const apiLogger = createLogger({\r\n  transports: [\r\n    new transports.File({\r\n      filename: './logs/api-logs.log',\r\n      json: false,\r\n      maxsize: 5242880,\r\n      maxFiles: 5,\r\n    }),\r\n    new transports.Console(),\r\n  ]\r\n});\r\n\r\nconst systemLogger = createLogger({\r\n  transports: [\r\n    new transports.File({\r\n      filename: './logs/system-logs.log',\r\n      json: false,\r\n      maxsize: 5242880,\r\n      maxFiles: 5,\r\n    }),\r\n    new transports.Console(),\r\n  ]\r\n}); */\r\n\r\n\r\n// create a stream object with a 'write' function that will be used by `morgan`\r\nwinston.loggers.get('apiLogger').stream = {\r\n  write: function (message, encoding) {\r\n    // use the 'info' log level so the output will be picked up by both transports (file and console)\r\n    global.apiLogger.info(message);\r\n  },\r\n};\r\n\r\n\r\nmodule.exports = winston.loggers;\r\n","module.exports = require(\"activedirectory2\");","module.exports = require(\"app-root-path\");","module.exports = require(\"axios\");","module.exports = require(\"body-parser\");","module.exports = require(\"crypto\");","module.exports = require(\"express\");","module.exports = require(\"express-jwt\");","module.exports = require(\"formidable\");","module.exports = require(\"fs\");","module.exports = require(\"fs-extra\");","module.exports = require(\"googleapis\");","module.exports = require(\"handlebars\");","module.exports = require(\"helmet\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"morgan\");","module.exports = require(\"nodemailer\");","module.exports = require(\"path\");","module.exports = require(\"process\");","module.exports = require(\"request\");","module.exports = require(\"rxjs\");","module.exports = require(\"tedious\");","module.exports = require(\"tedious-connection-pool\");","module.exports = require(\"uuidv4\");","module.exports = require(\"winston\");"],"sourceRoot":""}